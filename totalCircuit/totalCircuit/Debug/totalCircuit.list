
totalCircuit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800add0  0800add0  0001add0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b388  0800b388  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800b388  0800b388  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b388  0800b388  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b38c  0800b38c  0001b38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800b390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000220  0800b5b0  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800b5b0  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011181  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002568  00000000  00000000  0003140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00033978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db2  00000000  00000000  00034ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019845  00000000  00000000  00035872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c0f  00000000  00000000  0004f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000943af  00000000  00000000  00063cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d44  00000000  00000000  000f8078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fddbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800adb8 	.word	0x0800adb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800adb8 	.word	0x0800adb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <abs_>:
static void MX_ADC1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
//ham tri tuyet doi
float abs_(float a) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(a < 0) return -a;
 8001164:	f04f 0100 	mov.w	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff89 	bl	8001080 <__aeabi_fcmplt>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <abs_+0x20>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800117a:	e000      	b.n	800117e <abs_+0x22>
	else return a;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <Follow_Tracking>:

//xe
void Follow_Tracking(void)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	af00      	add	r7, sp, #0
	wr = -e3;
 800118e:	4b9a      	ldr	r3, [pc, #616]	; (80013f8 <Follow_Tracking+0x270>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001196:	4a99      	ldr	r2, [pc, #612]	; (80013fc <Follow_Tracking+0x274>)
 8001198:	6013      	str	r3, [r2, #0]
	v = vr * cos(e3) + k1 * e1_line; //m/s
 800119a:	4b99      	ldr	r3, [pc, #612]	; (8001400 <Follow_Tracking+0x278>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f942 	bl	8000428 <__aeabi_f2d>
 80011a4:	4604      	mov	r4, r0
 80011a6:	460d      	mov	r5, r1
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <Follow_Tracking+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f93b 	bl	8000428 <__aeabi_f2d>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f008 fdc3 	bl	8009d44 <cos>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4614      	mov	r4, r2
 80011d0:	461d      	mov	r5, r3
 80011d2:	4b8c      	ldr	r3, [pc, #560]	; (8001404 <Follow_Tracking+0x27c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a8c      	ldr	r2, [pc, #560]	; (8001408 <Follow_Tracking+0x280>)
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fdb1 	bl	8000d44 <__aeabi_fmul>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f91f 	bl	8000428 <__aeabi_f2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7fe ffbb 	bl	800016c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fc43 	bl	8000a88 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	4a81      	ldr	r2, [pc, #516]	; (800140c <Follow_Tracking+0x284>)
 8001206:	6013      	str	r3, [r2, #0]
	w = wr + vr * k2 * e2/1000  + k3 * vr * sin(e3); //rad/s
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <Follow_Tracking+0x278>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a80      	ldr	r2, [pc, #512]	; (8001410 <Follow_Tracking+0x288>)
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd96 	bl	8000d44 <__aeabi_fmul>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <Follow_Tracking+0x28c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f7ff fd8e 	bl	8000d44 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	497b      	ldr	r1, [pc, #492]	; (8001418 <Follow_Tracking+0x290>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe3d 	bl	8000eac <__aeabi_fdiv>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b71      	ldr	r3, [pc, #452]	; (80013fc <Follow_Tracking+0x274>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	4610      	mov	r0, r2
 800123e:	f7ff fc79 	bl	8000b34 <__addsf3>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f8ef 	bl	8000428 <__aeabi_f2d>
 800124a:	4604      	mov	r4, r0
 800124c:	460d      	mov	r5, r1
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <Follow_Tracking+0x294>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6b      	ldr	r2, [pc, #428]	; (8001400 <Follow_Tracking+0x278>)
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd73 	bl	8000d44 <__aeabi_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f8e1 	bl	8000428 <__aeabi_f2d>
 8001266:	4680      	mov	r8, r0
 8001268:	4689      	mov	r9, r1
 800126a:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <Follow_Tracking+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8da 	bl	8000428 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f008 fdac 	bl	8009dd8 <sin>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4640      	mov	r0, r8
 8001286:	4649      	mov	r1, r9
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4620      	mov	r0, r4
 8001292:	4629      	mov	r1, r5
 8001294:	f7fe ff6a 	bl	800016c <__adddf3>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fbf2 	bl	8000a88 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a5e      	ldr	r2, [pc, #376]	; (8001420 <Follow_Tracking+0x298>)
 80012a8:	6013      	str	r3, [r2, #0]
	setpoint_r = (1 / r) * (v - b * w/2) * (60 / (2 * PI)); //rpm
 80012aa:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <Follow_Tracking+0x29c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461d      	mov	r5, r3
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <Follow_Tracking+0x284>)
 80012be:	681c      	ldr	r4, [r3, #0]
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <Follow_Tracking+0x2a0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a56      	ldr	r2, [pc, #344]	; (8001420 <Follow_Tracking+0x298>)
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd3a 	bl	8000d44 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fde8 	bl	8000eac <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff fc25 	bl	8000b30 <__aeabi_fsub>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff fd2a 	bl	8000d44 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f898 	bl	8000428 <__aeabi_f2d>
 80012f8:	a33d      	add	r3, pc, #244	; (adr r3, 80013f0 <Follow_Tracking+0x268>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f8eb 	bl	80004d8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fbbd 	bl	8000a88 <__aeabi_d2f>
 800130e:	4603      	mov	r3, r0
 8001310:	4a46      	ldr	r2, [pc, #280]	; (800142c <Follow_Tracking+0x2a4>)
 8001312:	6013      	str	r3, [r2, #0]
	setpoint_l = (1 / r) * (v + b * w/2) * (60 / (2 * PI)); //rpm
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <Follow_Tracking+0x29c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800131e:	f7ff fdc5 	bl	8000eac <__aeabi_fdiv>
 8001322:	4603      	mov	r3, r0
 8001324:	461c      	mov	r4, r3
 8001326:	4b40      	ldr	r3, [pc, #256]	; (8001428 <Follow_Tracking+0x2a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <Follow_Tracking+0x298>)
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fd07 	bl	8000d44 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fdb5 	bl	8000eac <__aeabi_fdiv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <Follow_Tracking+0x284>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4610      	mov	r0, r2
 800134e:	f7ff fbf1 	bl	8000b34 <__addsf3>
 8001352:	4603      	mov	r3, r0
 8001354:	4619      	mov	r1, r3
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fcf4 	bl	8000d44 <__aeabi_fmul>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f862 	bl	8000428 <__aeabi_f2d>
 8001364:	a322      	add	r3, pc, #136	; (adr r3, 80013f0 <Follow_Tracking+0x268>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f8b5 	bl	80004d8 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fb87 	bl	8000a88 <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <Follow_Tracking+0x2a8>)
 800137e:	6013      	str	r3, [r2, #0]
	if(setpoint_r < 0){
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <Follow_Tracking+0x2a4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 0100 	mov.w	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe79 	bl	8001080 <__aeabi_fcmplt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <Follow_Tracking+0x214>
		setpoint_r = 0;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <Follow_Tracking+0x2a4>)
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
	}
	if(setpoint_r >= 250){
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <Follow_Tracking+0x2a4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4924      	ldr	r1, [pc, #144]	; (8001434 <Follow_Tracking+0x2ac>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe80 	bl	80010a8 <__aeabi_fcmpge>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <Follow_Tracking+0x22c>
		setpoint_r = 250;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <Follow_Tracking+0x2a4>)
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <Follow_Tracking+0x2ac>)
 80013b2:	601a      	str	r2, [r3, #0]
	}
	if(setpoint_l < 0){
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <Follow_Tracking+0x2a8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 0100 	mov.w	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe5f 	bl	8001080 <__aeabi_fcmplt>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <Follow_Tracking+0x248>
		setpoint_l = 0;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <Follow_Tracking+0x2a8>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
	}
	if(setpoint_l >= 250){
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <Follow_Tracking+0x2a8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4917      	ldr	r1, [pc, #92]	; (8001434 <Follow_Tracking+0x2ac>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe66 	bl	80010a8 <__aeabi_fcmpge>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d100      	bne.n	80013e4 <Follow_Tracking+0x25c>
		setpoint_l = 250;
	}
}
 80013e2:	e002      	b.n	80013ea <Follow_Tracking+0x262>
		setpoint_l = 250;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <Follow_Tracking+0x2a8>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <Follow_Tracking+0x2ac>)
 80013e8:	601a      	str	r2, [r3, #0]
}
 80013ea:	bf00      	nop
 80013ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f0:	79a4dd62 	.word	0x79a4dd62
 80013f4:	4023193a 	.word	0x4023193a
 80013f8:	200004a4 	.word	0x200004a4
 80013fc:	20000544 	.word	0x20000544
 8001400:	2000002c 	.word	0x2000002c
 8001404:	20000554 	.word	0x20000554
 8001408:	20000558 	.word	0x20000558
 800140c:	2000054c 	.word	0x2000054c
 8001410:	20000030 	.word	0x20000030
 8001414:	2000049c 	.word	0x2000049c
 8001418:	447a0000 	.word	0x447a0000
 800141c:	20000034 	.word	0x20000034
 8001420:	20000550 	.word	0x20000550
 8001424:	20000020 	.word	0x20000020
 8001428:	20000024 	.word	0x20000024
 800142c:	2000055c 	.word	0x2000055c
 8001430:	20000560 	.word	0x20000560
 8001434:	437a0000 	.word	0x437a0000

08001438 <stop_or_run>:
//stop to get goods and no line no run
void stop_or_run(){
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	if((empty == 1 && AdcValues[0] >= 230 && AdcValues[1] >= 230 && AdcValues[2] >= 230 && AdcValues[3] >= 230 && AdcValues[4] >= 230)) {
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <stop_or_run+0x44>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d116      	bne.n	8001472 <stop_or_run+0x3a>
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <stop_or_run+0x48>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2be5      	cmp	r3, #229	; 0xe5
 800144a:	d912      	bls.n	8001472 <stop_or_run+0x3a>
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <stop_or_run+0x48>)
 800144e:	885b      	ldrh	r3, [r3, #2]
 8001450:	2be5      	cmp	r3, #229	; 0xe5
 8001452:	d90e      	bls.n	8001472 <stop_or_run+0x3a>
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <stop_or_run+0x48>)
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	2be5      	cmp	r3, #229	; 0xe5
 800145a:	d90a      	bls.n	8001472 <stop_or_run+0x3a>
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <stop_or_run+0x48>)
 800145e:	88db      	ldrh	r3, [r3, #6]
 8001460:	2be5      	cmp	r3, #229	; 0xe5
 8001462:	d906      	bls.n	8001472 <stop_or_run+0x3a>
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <stop_or_run+0x48>)
 8001466:	891b      	ldrh	r3, [r3, #8]
 8001468:	2be5      	cmp	r3, #229	; 0xe5
 800146a:	d902      	bls.n	8001472 <stop_or_run+0x3a>
		stop = 1;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <stop_or_run+0x4c>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
	}
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000001c 	.word	0x2000001c
 8001480:	2000046c 	.word	0x2000046c
 8001484:	200004f4 	.word	0x200004f4

08001488 <no_line_no_run>:
void no_line_no_run() {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	if((AdcValues[0] <= 700 && AdcValues[1] <= 700 && AdcValues[2] <= 700 && AdcValues[3] <= 700 && AdcValues[4] <= 700)){
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <no_line_no_run+0x4c>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001494:	d819      	bhi.n	80014ca <no_line_no_run+0x42>
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <no_line_no_run+0x4c>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800149e:	d814      	bhi.n	80014ca <no_line_no_run+0x42>
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <no_line_no_run+0x4c>)
 80014a2:	889b      	ldrh	r3, [r3, #4]
 80014a4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014a8:	d80f      	bhi.n	80014ca <no_line_no_run+0x42>
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <no_line_no_run+0x4c>)
 80014ac:	88db      	ldrh	r3, [r3, #6]
 80014ae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014b2:	d80a      	bhi.n	80014ca <no_line_no_run+0x42>
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <no_line_no_run+0x4c>)
 80014b6:	891b      	ldrh	r3, [r3, #8]
 80014b8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014bc:	d805      	bhi.n	80014ca <no_line_no_run+0x42>
		stop = 1;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <no_line_no_run+0x50>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
		outline = 1;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <no_line_no_run+0x54>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
	}
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000046c 	.word	0x2000046c
 80014d8:	200004f4 	.word	0x200004f4
 80014dc:	200004d0 	.word	0x200004d0

080014e0 <yes_or_no_good>:
//check good?
void yes_or_no_good(){
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
	if(green == 1 && red == 0) {
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <yes_or_no_good+0x50>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <yes_or_no_good+0x26>
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <yes_or_no_good+0x54>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <yes_or_no_good+0x26>
		  hangXanh = 1;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <yes_or_no_good+0x58>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
		  hangDo = 0;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <yes_or_no_good+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
		  empty = 0;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <yes_or_no_good+0x60>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
	}
	if(green == 0 && red == 1){
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <yes_or_no_good+0x50>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <yes_or_no_good+0x48>
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <yes_or_no_good+0x54>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <yes_or_no_good+0x48>

		  hangXanh = 0;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <yes_or_no_good+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
		  hangDo = 1;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <yes_or_no_good+0x5c>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
		  empty = 0;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <yes_or_no_good+0x60>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
	}
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	200004bc 	.word	0x200004bc
 8001534:	200004c0 	.word	0x200004c0
 8001538:	200004c8 	.word	0x200004c8
 800153c:	200004cc 	.word	0x200004cc
 8001540:	2000001c 	.word	0x2000001c

08001544 <CaculatorFuntionSensor>:
//sensorline
void CaculatorFuntionSensor(void)
   {
 8001544:	b598      	push	{r3, r4, r7, lr}
 8001546:	af00      	add	r7, sp, #0
            A[0] = (float) ( Ymax - Ymin ) / ( ADCMaxValue[0] - ADCMinValue[0] );
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <CaculatorFuntionSensor+0x120>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <CaculatorFuntionSensor+0x124>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fba1 	bl	8000c9c <__aeabi_i2f>
 800155a:	4604      	mov	r4, r0
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <CaculatorFuntionSensor+0x128>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <CaculatorFuntionSensor+0x12c>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fb97 	bl	8000c9c <__aeabi_i2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4619      	mov	r1, r3
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff fc9a 	bl	8000eac <__aeabi_fdiv>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <CaculatorFuntionSensor+0x130>)
 800157e:	601a      	str	r2, [r3, #0]
            A[1] = (float) ( Ymax - Ymin ) / ( ADCMaxValue[1] - ADCMinValue[1] );
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <CaculatorFuntionSensor+0x120>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <CaculatorFuntionSensor+0x124>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fb85 	bl	8000c9c <__aeabi_i2f>
 8001592:	4604      	mov	r4, r0
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <CaculatorFuntionSensor+0x128>)
 8001596:	885b      	ldrh	r3, [r3, #2]
 8001598:	461a      	mov	r2, r3
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <CaculatorFuntionSensor+0x12c>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fb7b 	bl	8000c9c <__aeabi_i2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fc7e 	bl	8000eac <__aeabi_fdiv>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <CaculatorFuntionSensor+0x130>)
 80015b6:	605a      	str	r2, [r3, #4]
            A[2] = (float) ( Ymax - Ymin ) / ( ADCMaxValue[2] - ADCMinValue[2] );
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <CaculatorFuntionSensor+0x120>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <CaculatorFuntionSensor+0x124>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb69 	bl	8000c9c <__aeabi_i2f>
 80015ca:	4604      	mov	r4, r0
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <CaculatorFuntionSensor+0x128>)
 80015ce:	889b      	ldrh	r3, [r3, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <CaculatorFuntionSensor+0x12c>)
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fb5f 	bl	8000c9c <__aeabi_i2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fc62 	bl	8000eac <__aeabi_fdiv>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <CaculatorFuntionSensor+0x130>)
 80015ee:	609a      	str	r2, [r3, #8]
            A[3] = (float) ( Ymax - Ymin ) / ( ADCMaxValue[3] - ADCMinValue[3] );
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <CaculatorFuntionSensor+0x120>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <CaculatorFuntionSensor+0x124>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fb4d 	bl	8000c9c <__aeabi_i2f>
 8001602:	4604      	mov	r4, r0
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <CaculatorFuntionSensor+0x128>)
 8001606:	88db      	ldrh	r3, [r3, #6]
 8001608:	461a      	mov	r2, r3
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <CaculatorFuntionSensor+0x12c>)
 800160c:	88db      	ldrh	r3, [r3, #6]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fb43 	bl	8000c9c <__aeabi_i2f>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fc46 	bl	8000eac <__aeabi_fdiv>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <CaculatorFuntionSensor+0x130>)
 8001626:	60da      	str	r2, [r3, #12]
            A[4] = (float) ( Ymax - Ymin ) / ( ADCMaxValue[4] - ADCMinValue[4] );
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <CaculatorFuntionSensor+0x120>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <CaculatorFuntionSensor+0x124>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb31 	bl	8000c9c <__aeabi_i2f>
 800163a:	4604      	mov	r4, r0
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <CaculatorFuntionSensor+0x128>)
 800163e:	891b      	ldrh	r3, [r3, #8]
 8001640:	461a      	mov	r2, r3
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <CaculatorFuntionSensor+0x12c>)
 8001644:	891b      	ldrh	r3, [r3, #8]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb27 	bl	8000c9c <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	4620      	mov	r0, r4
 8001654:	f7ff fc2a 	bl	8000eac <__aeabi_fdiv>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <CaculatorFuntionSensor+0x130>)
 800165e:	611a      	str	r2, [r3, #16]
      }
 8001660:	bf00      	nop
 8001662:	bd98      	pop	{r3, r4, r7, pc}
 8001664:	20000016 	.word	0x20000016
 8001668:	20000018 	.word	0x20000018
 800166c:	2000000c 	.word	0x2000000c
 8001670:	20000000 	.word	0x20000000
 8001674:	20000488 	.word	0x20000488

08001678 <CalibrationSenrsorValue>:
void CalibrationSenrsorValue(uint16_t *ADCValue)
{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
		AdcValuesAfterCalib[0] = (uint16_t) (Ymin + A[0]*( ADCValue[0] - ADCMinValue[0]));
 8001680:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <CalibrationSenrsorValue+0x178>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fb09 	bl	8000c9c <__aeabi_i2f>
 800168a:	4605      	mov	r5, r0
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <CalibrationSenrsorValue+0x17c>)
 800168e:	681c      	ldr	r4, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <CalibrationSenrsorValue+0x180>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fafd 	bl	8000c9c <__aeabi_i2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fb4c 	bl	8000d44 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff fa3f 	bl	8000b34 <__addsf3>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd2f 	bl	800111c <__aeabi_f2uiz>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b4e      	ldr	r3, [pc, #312]	; (80017fc <CalibrationSenrsorValue+0x184>)
 80016c4:	801a      	strh	r2, [r3, #0]
		AdcValuesAfterCalib[1] = (uint16_t) (Ymin + A[1]*( ADCValue[1] - ADCMinValue[1]));
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <CalibrationSenrsorValue+0x178>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fae6 	bl	8000c9c <__aeabi_i2f>
 80016d0:	4605      	mov	r5, r0
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <CalibrationSenrsorValue+0x17c>)
 80016d4:	685c      	ldr	r4, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3302      	adds	r3, #2
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <CalibrationSenrsorValue+0x180>)
 80016e0:	885b      	ldrh	r3, [r3, #2]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fad9 	bl	8000c9c <__aeabi_i2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fb28 	bl	8000d44 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4628      	mov	r0, r5
 80016fa:	f7ff fa1b 	bl	8000b34 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd0b 	bl	800111c <__aeabi_f2uiz>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <CalibrationSenrsorValue+0x184>)
 800170c:	805a      	strh	r2, [r3, #2]
		AdcValuesAfterCalib[2] = (uint16_t) (Ymin + A[2]*( ADCValue[2] - ADCMinValue[2]));
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <CalibrationSenrsorValue+0x178>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fac2 	bl	8000c9c <__aeabi_i2f>
 8001718:	4605      	mov	r5, r0
 800171a:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <CalibrationSenrsorValue+0x17c>)
 800171c:	689c      	ldr	r4, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <CalibrationSenrsorValue+0x180>)
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fab5 	bl	8000c9c <__aeabi_i2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fb04 	bl	8000d44 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	4628      	mov	r0, r5
 8001742:	f7ff f9f7 	bl	8000b34 <__addsf3>
 8001746:	4603      	mov	r3, r0
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fce7 	bl	800111c <__aeabi_f2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <CalibrationSenrsorValue+0x184>)
 8001754:	809a      	strh	r2, [r3, #4]
		AdcValuesAfterCalib[3] = (uint16_t) (Ymin + A[3]*( ADCValue[3] - ADCMinValue[3]));
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <CalibrationSenrsorValue+0x178>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa9e 	bl	8000c9c <__aeabi_i2f>
 8001760:	4605      	mov	r5, r0
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <CalibrationSenrsorValue+0x17c>)
 8001764:	68dc      	ldr	r4, [r3, #12]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3306      	adds	r3, #6
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <CalibrationSenrsorValue+0x180>)
 8001770:	88db      	ldrh	r3, [r3, #6]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fa91 	bl	8000c9c <__aeabi_i2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fae0 	bl	8000d44 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4628      	mov	r0, r5
 800178a:	f7ff f9d3 	bl	8000b34 <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fcc3 	bl	800111c <__aeabi_f2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <CalibrationSenrsorValue+0x184>)
 800179c:	80da      	strh	r2, [r3, #6]
		AdcValuesAfterCalib[4] = (uint16_t) (Ymin + A[4]*( ADCValue[4] - ADCMinValue[4]));
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <CalibrationSenrsorValue+0x178>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa7a 	bl	8000c9c <__aeabi_i2f>
 80017a8:	4605      	mov	r5, r0
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <CalibrationSenrsorValue+0x17c>)
 80017ac:	691c      	ldr	r4, [r3, #16]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3308      	adds	r3, #8
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <CalibrationSenrsorValue+0x180>)
 80017b8:	891b      	ldrh	r3, [r3, #8]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fa6d 	bl	8000c9c <__aeabi_i2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff fabc 	bl	8000d44 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4628      	mov	r0, r5
 80017d2:	f7ff f9af 	bl	8000b34 <__addsf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fc9f 	bl	800111c <__aeabi_f2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <CalibrationSenrsorValue+0x184>)
 80017e4:	811a      	strh	r2, [r3, #8]
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000018 	.word	0x20000018
 80017f4:	20000488 	.word	0x20000488
 80017f8:	20000000 	.word	0x20000000
 80017fc:	2000047c 	.word	0x2000047c

08001800 <CalibSensorDependOnEnvironment>:

void CalibSensorDependOnEnvironment(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 5; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	e040      	b.n	800188e <CalibSensorDependOnEnvironment+0x8e>
	{
		if(AdcValues[i] != 0)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <CalibSensorDependOnEnvironment+0xd0>)
 8001810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d023      	beq.n	8001860 <CalibSensorDependOnEnvironment+0x60>
		{
			if(AdcValues[i] > ADCMaxValue[i])
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <CalibSensorDependOnEnvironment+0xd0>)
 800181c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	492c      	ldr	r1, [pc, #176]	; (80018d4 <CalibSensorDependOnEnvironment+0xd4>)
 8001824:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001828:	429a      	cmp	r2, r3
 800182a:	d907      	bls.n	800183c <CalibSensorDependOnEnvironment+0x3c>
				ADCMaxValue[i] = AdcValues[i];
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	4927      	ldr	r1, [pc, #156]	; (80018d0 <CalibSensorDependOnEnvironment+0xd0>)
 8001832:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001836:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <CalibSensorDependOnEnvironment+0xd4>)
 8001838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(AdcValues[i] < ADCMinValue[i])
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <CalibSensorDependOnEnvironment+0xd0>)
 8001840:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4924      	ldr	r1, [pc, #144]	; (80018d8 <CalibSensorDependOnEnvironment+0xd8>)
 8001848:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <CalibSensorDependOnEnvironment+0x60>
				ADCMinValue[i] = AdcValues[i];
 8001850:	79fa      	ldrb	r2, [r7, #7]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	491e      	ldr	r1, [pc, #120]	; (80018d0 <CalibSensorDependOnEnvironment+0xd0>)
 8001856:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <CalibSensorDependOnEnvironment+0xd8>)
 800185c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		sumADCmax += ADCMaxValue[i];
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <CalibSensorDependOnEnvironment+0xd4>)
 8001864:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <CalibSensorDependOnEnvironment+0xdc>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	4413      	add	r3, r2
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <CalibSensorDependOnEnvironment+0xdc>)
 8001872:	801a      	strh	r2, [r3, #0]
		sumADCmin += ADCMinValue[i];
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <CalibSensorDependOnEnvironment+0xd8>)
 8001878:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <CalibSensorDependOnEnvironment+0xe0>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	4413      	add	r3, r2
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <CalibSensorDependOnEnvironment+0xe0>)
 8001886:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3301      	adds	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d9bb      	bls.n	800180c <CalibSensorDependOnEnvironment+0xc>
	}
	Ymax = sumADCmax/5;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <CalibSensorDependOnEnvironment+0xdc>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <CalibSensorDependOnEnvironment+0xe4>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <CalibSensorDependOnEnvironment+0xe8>)
 80018a4:	801a      	strh	r2, [r3, #0]
	Ymin = sumADCmin/5;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <CalibSensorDependOnEnvironment+0xe0>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <CalibSensorDependOnEnvironment+0xe4>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <CalibSensorDependOnEnvironment+0xec>)
 80018b6:	801a      	strh	r2, [r3, #0]
	sumADCmax = 0;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <CalibSensorDependOnEnvironment+0xdc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	801a      	strh	r2, [r3, #0]
	sumADCmin = 0;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <CalibSensorDependOnEnvironment+0xe0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	801a      	strh	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000046c 	.word	0x2000046c
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000476 	.word	0x20000476
 80018e0:	20000478 	.word	0x20000478
 80018e4:	cccccccd 	.word	0xcccccccd
 80018e8:	20000016 	.word	0x20000016
 80018ec:	20000018 	.word	0x20000018

080018f0 <ErrorLine>:
float ErrorLine(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
      CalibrationSenrsorValue(AdcValues);
 80018f6:	481e      	ldr	r0, [pc, #120]	; (8001970 <ErrorLine+0x80>)
 80018f8:	f7ff febe 	bl	8001678 <CalibrationSenrsorValue>
      sum_Adcvalues = (AdcValuesAfterCalib[0] + AdcValuesAfterCalib[1] + AdcValuesAfterCalib[2] + AdcValuesAfterCalib[3] + AdcValuesAfterCalib[4]);
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <ErrorLine+0x84>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <ErrorLine+0x84>)
 8001904:	885b      	ldrh	r3, [r3, #2]
 8001906:	4413      	add	r3, r2
 8001908:	4a1a      	ldr	r2, [pc, #104]	; (8001974 <ErrorLine+0x84>)
 800190a:	8892      	ldrh	r2, [r2, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <ErrorLine+0x84>)
 8001910:	88d2      	ldrh	r2, [r2, #6]
 8001912:	4413      	add	r3, r2
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <ErrorLine+0x84>)
 8001916:	8912      	ldrh	r2, [r2, #8]
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f9be 	bl	8000c9c <__aeabi_i2f>
 8001920:	4603      	mov	r3, r0
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <ErrorLine+0x88>)
 8001924:	6013      	str	r3, [r2, #0]
      float e2_line = (2*(AdcValuesAfterCalib[4] - AdcValuesAfterCalib[0]) + (AdcValuesAfterCalib[3] - AdcValuesAfterCalib[1]))*17/sum_Adcvalues;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <ErrorLine+0x84>)
 8001928:	891b      	ldrh	r3, [r3, #8]
 800192a:	461a      	mov	r2, r3
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <ErrorLine+0x84>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	005a      	lsls	r2, r3, #1
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <ErrorLine+0x84>)
 8001936:	88db      	ldrh	r3, [r3, #6]
 8001938:	4619      	mov	r1, r3
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <ErrorLine+0x84>)
 800193c:	885b      	ldrh	r3, [r3, #2]
 800193e:	1acb      	subs	r3, r1, r3
 8001940:	441a      	add	r2, r3
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9a7 	bl	8000c9c <__aeabi_i2f>
 800194e:	4602      	mov	r2, r0
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <ErrorLine+0x88>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	4610      	mov	r0, r2
 8001958:	f7ff faa8 	bl	8000eac <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	607b      	str	r3, [r7, #4]
      //e2_line = (e2_line + 0.2565)/0.7247;
      return -e2_line;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000046c 	.word	0x2000046c
 8001974:	2000047c 	.word	0x2000047c
 8001978:	200004ac 	.word	0x200004ac

0800197c <find_e2_e3>:
void find_e2_e3(void) {
 800197c:	b598      	push	{r3, r4, r7, lr}
 800197e:	af00      	add	r7, sp, #0
	  CalibSensorDependOnEnvironment();
 8001980:	f7ff ff3e 	bl	8001800 <CalibSensorDependOnEnvironment>
	  CaculatorFuntionSensor();
 8001984:	f7ff fdde 	bl	8001544 <CaculatorFuntionSensor>
	  CalibrationSenrsorValue(AdcValues);
 8001988:	4823      	ldr	r0, [pc, #140]	; (8001a18 <find_e2_e3+0x9c>)
 800198a:	f7ff fe75 	bl	8001678 <CalibrationSenrsorValue>
	  e2 = ErrorLine();
 800198e:	f7ff ffaf 	bl	80018f0 <ErrorLine>
 8001992:	4603      	mov	r3, r0
 8001994:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <find_e2_e3+0xa0>)
 8001996:	6013      	str	r3, [r2, #0]
	  if(vtb != 0){
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <find_e2_e3+0xa4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb63 	bl	800106c <__aeabi_fcmpeq>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d12f      	bne.n	8001a0c <find_e2_e3+0x90>
		  e3 = atan((e2 - pre_e2)/ (vtb*Ts*1000));
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <find_e2_e3+0xa0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <find_e2_e3+0xa8>)
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f8ba 	bl	8000b30 <__aeabi_fsub>
 80019bc:	4603      	mov	r3, r0
 80019be:	461c      	mov	r4, r3
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <find_e2_e3+0xa4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <find_e2_e3+0xac>)
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f9ba 	bl	8000d44 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4916      	ldr	r1, [pc, #88]	; (8001a2c <find_e2_e3+0xb0>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f9b5 	bl	8000d44 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	4619      	mov	r1, r3
 80019de:	4620      	mov	r0, r4
 80019e0:	f7ff fa64 	bl	8000eac <__aeabi_fdiv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd1e 	bl	8000428 <__aeabi_f2d>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f008 f81c 	bl	8009a30 <atan>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f842 	bl	8000a88 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <find_e2_e3+0xb4>)
 8001a08:	6013      	str	r3, [r2, #0]
	  }
	  else e3 = 0;
}
 8001a0a:	e003      	b.n	8001a14 <find_e2_e3+0x98>
	  else e3 = 0;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <find_e2_e3+0xb4>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	bd98      	pop	{r3, r4, r7, pc}
 8001a18:	2000046c 	.word	0x2000046c
 8001a1c:	2000049c 	.word	0x2000049c
 8001a20:	20000540 	.word	0x20000540
 8001a24:	200004a0 	.word	0x200004a0
 8001a28:	20000028 	.word	0x20000028
 8001a2c:	447a0000 	.word	0x447a0000
 8001a30:	200004a4 	.word	0x200004a4

08001a34 <color_recognize>:

//color sensor
void color_recognize(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
   for(int i = 0; i < 3; i++){
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	e053      	b.n	8001ae8 <color_recognize+0xb4>
         switch (i){
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d037      	beq.n	8001ab6 <color_recognize+0x82>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	dc4a      	bgt.n	8001ae2 <color_recognize+0xae>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <color_recognize+0x26>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d017      	beq.n	8001a88 <color_recognize+0x54>
 8001a58:	e043      	b.n	8001ae2 <color_recognize+0xae>
            case 0:
               HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a60:	4868      	ldr	r0, [pc, #416]	; (8001c04 <color_recognize+0x1d0>)
 8001a62:	f002 ffcd 	bl	8004a00 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	4865      	ldr	r0, [pc, #404]	; (8001c04 <color_recognize+0x1d0>)
 8001a6e:	f002 ffc7 	bl	8004a00 <HAL_GPIO_WritePin>
               red_value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001a72:	2100      	movs	r1, #0
 8001a74:	4864      	ldr	r0, [pc, #400]	; (8001c08 <color_recognize+0x1d4>)
 8001a76:	f004 fd39 	bl	80064ec <HAL_TIM_ReadCapturedValue>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a63      	ldr	r2, [pc, #396]	; (8001c0c <color_recognize+0x1d8>)
 8001a7e:	6013      	str	r3, [r2, #0]
               HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f001 ff4d 	bl	8003920 <HAL_Delay>
               break;
 8001a86:	e02c      	b.n	8001ae2 <color_recognize+0xae>
            case 1:
               HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a8e:	485d      	ldr	r0, [pc, #372]	; (8001c04 <color_recognize+0x1d0>)
 8001a90:	f002 ffb6 	bl	8004a00 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9a:	485a      	ldr	r0, [pc, #360]	; (8001c04 <color_recognize+0x1d0>)
 8001a9c:	f002 ffb0 	bl	8004a00 <HAL_GPIO_WritePin>
               blue_value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4859      	ldr	r0, [pc, #356]	; (8001c08 <color_recognize+0x1d4>)
 8001aa4:	f004 fd22 	bl	80064ec <HAL_TIM_ReadCapturedValue>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <color_recognize+0x1dc>)
 8001aac:	6013      	str	r3, [r2, #0]
               HAL_Delay(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f001 ff36 	bl	8003920 <HAL_Delay>
               break;
 8001ab4:	e015      	b.n	8001ae2 <color_recognize+0xae>
            case 2:
               HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abc:	4851      	ldr	r0, [pc, #324]	; (8001c04 <color_recognize+0x1d0>)
 8001abe:	f002 ff9f 	bl	8004a00 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac8:	484e      	ldr	r0, [pc, #312]	; (8001c04 <color_recognize+0x1d0>)
 8001aca:	f002 ff99 	bl	8004a00 <HAL_GPIO_WritePin>
               green_value = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	484d      	ldr	r0, [pc, #308]	; (8001c08 <color_recognize+0x1d4>)
 8001ad2:	f004 fd0b 	bl	80064ec <HAL_TIM_ReadCapturedValue>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <color_recognize+0x1e0>)
 8001ada:	6013      	str	r3, [r2, #0]
               HAL_Delay(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f001 ff1f 	bl	8003920 <HAL_Delay>
   for(int i = 0; i < 3; i++){
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	dda8      	ble.n	8001a40 <color_recognize+0xc>
         }
      }
   //detect Red
      if ((red_value > 30700 && red_value < 31000) &&  (blue_value > 30700 && blue_value < 31000) && (green_value > 30700 && green_value < 31000)){
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <color_recognize+0x1d8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f247 72ec 	movw	r2, #30700	; 0x77ec
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d927      	bls.n	8001b4a <color_recognize+0x116>
 8001afa:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <color_recognize+0x1d8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f647 1217 	movw	r2, #30999	; 0x7917
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d821      	bhi.n	8001b4a <color_recognize+0x116>
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <color_recognize+0x1dc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f247 72ec 	movw	r2, #30700	; 0x77ec
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d91b      	bls.n	8001b4a <color_recognize+0x116>
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <color_recognize+0x1dc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f647 1217 	movw	r2, #30999	; 0x7917
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d815      	bhi.n	8001b4a <color_recognize+0x116>
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <color_recognize+0x1e0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f247 72ec 	movw	r2, #30700	; 0x77ec
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d90f      	bls.n	8001b4a <color_recognize+0x116>
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <color_recognize+0x1e0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f647 1217 	movw	r2, #30999	; 0x7917
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d809      	bhi.n	8001b4a <color_recognize+0x116>
         green = 0;
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <color_recognize+0x1e4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
         red = 1;
 8001b3c:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <color_recognize+0x1e8>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
         blue = 0;
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <color_recognize+0x1ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e058      	b.n	8001bfc <color_recognize+0x1c8>
      }
      // Green
      else if ((red_value > 200 && red_value < 250) &&  (blue_value > 200 && blue_value < 250) && (green_value > 220 && green_value < 300)){
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <color_recognize+0x1d8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2bc8      	cmp	r3, #200	; 0xc8
 8001b50:	d91e      	bls.n	8001b90 <color_recognize+0x15c>
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <color_recognize+0x1d8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2bf9      	cmp	r3, #249	; 0xf9
 8001b58:	d81a      	bhi.n	8001b90 <color_recognize+0x15c>
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <color_recognize+0x1dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2bc8      	cmp	r3, #200	; 0xc8
 8001b60:	d916      	bls.n	8001b90 <color_recognize+0x15c>
 8001b62:	4b2b      	ldr	r3, [pc, #172]	; (8001c10 <color_recognize+0x1dc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2bf9      	cmp	r3, #249	; 0xf9
 8001b68:	d812      	bhi.n	8001b90 <color_recognize+0x15c>
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <color_recognize+0x1e0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2bdc      	cmp	r3, #220	; 0xdc
 8001b70:	d90e      	bls.n	8001b90 <color_recognize+0x15c>
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <color_recognize+0x1e0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b7a:	d209      	bcs.n	8001b90 <color_recognize+0x15c>
         green=1;
 8001b7c:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <color_recognize+0x1e4>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
         red=0;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <color_recognize+0x1e8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
         blue = 0;
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <color_recognize+0x1ec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e035      	b.n	8001bfc <color_recognize+0x1c8>
      }
      //Blue
      else if((red_value > 800 && red_value < 1000) &&  (blue_value > 1300 && blue_value < 1500) && ((blue_value > red_value)) && (red_value > green_value)){
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <color_recognize+0x1d8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001b98:	d926      	bls.n	8001be8 <color_recognize+0x1b4>
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <color_recognize+0x1d8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba2:	d221      	bcs.n	8001be8 <color_recognize+0x1b4>
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <color_recognize+0x1dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f240 5214 	movw	r2, #1300	; 0x514
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d91b      	bls.n	8001be8 <color_recognize+0x1b4>
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <color_recognize+0x1dc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d815      	bhi.n	8001be8 <color_recognize+0x1b4>
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <color_recognize+0x1dc>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <color_recognize+0x1d8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d90f      	bls.n	8001be8 <color_recognize+0x1b4>
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <color_recognize+0x1d8>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <color_recognize+0x1e0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d909      	bls.n	8001be8 <color_recognize+0x1b4>
		green=0;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <color_recognize+0x1e4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
		red=0;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <color_recognize+0x1e8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
		blue = 1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <color_recognize+0x1ec>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e009      	b.n	8001bfc <color_recognize+0x1c8>
      }
      else {
         green=0;
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <color_recognize+0x1e4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
         red = 0;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <color_recognize+0x1e8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
         blue = 0;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <color_recognize+0x1ec>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
      }
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	200003dc 	.word	0x200003dc
 8001c0c:	200004b0 	.word	0x200004b0
 8001c10:	200004b4 	.word	0x200004b4
 8001c14:	200004b8 	.word	0x200004b8
 8001c18:	200004bc 	.word	0x200004bc
 8001c1c:	200004c0 	.word	0x200004c0
 8001c20:	200004c4 	.word	0x200004c4

08001c24 <brake>:

//giam toc do
void brake(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	if(s >= 6500 && empty == 1) {
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <brake+0xdc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4935      	ldr	r1, [pc, #212]	; (8001d04 <brake+0xe0>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fa3a 	bl	80010a8 <__aeabi_fcmpge>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <brake+0x26>
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <brake+0xe4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d103      	bne.n	8001c4a <brake+0x26>
		vr = 0.2;
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <brake+0xe8>)
 8001c44:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <brake+0xec>)
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e057      	b.n	8001cfa <brake+0xd6>
	}
	else if(empty == 0 && s <= 8800){
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <brake+0xe4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <brake+0x48>
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <brake+0xdc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	492f      	ldr	r1, [pc, #188]	; (8001d14 <brake+0xf0>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fa1b 	bl	8001094 <__aeabi_fcmple>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <brake+0x48>
		vr = 0.7;
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <brake+0xe8>)
 8001c66:	4a2c      	ldr	r2, [pc, #176]	; (8001d18 <brake+0xf4>)
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e046      	b.n	8001cfa <brake+0xd6>
	}else if(empty == 0 && s > 8800 && s <= 9500){
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <brake+0xe4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d116      	bne.n	8001ca2 <brake+0x7e>
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <brake+0xdc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4926      	ldr	r1, [pc, #152]	; (8001d14 <brake+0xf0>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa1e 	bl	80010bc <__aeabi_fcmpgt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <brake+0x7e>
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <brake+0xdc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <brake+0xf8>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fa01 	bl	8001094 <__aeabi_fcmple>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <brake+0x7e>
		vr = 0.5;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <brake+0xe8>)
 8001c9a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e02b      	b.n	8001cfa <brake+0xd6>
	}else if(empty == 0 && s > 9500 && s <= 11600){
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <brake+0xe4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <brake+0xb2>
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <brake+0xdc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <brake+0xf8>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fa03 	bl	80010bc <__aeabi_fcmpgt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <brake+0xb2>
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <brake+0xdc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4917      	ldr	r1, [pc, #92]	; (8001d20 <brake+0xfc>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f9e6 	bl	8001094 <__aeabi_fcmple>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <brake+0xb2>
		vr = 0.7;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <brake+0xe8>)
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <brake+0xf4>)
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e011      	b.n	8001cfa <brake+0xd6>
	}else if(empty == 0 && s > 11600){
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <brake+0xe4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10d      	bne.n	8001cfa <brake+0xd6>
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <brake+0xdc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	490f      	ldr	r1, [pc, #60]	; (8001d20 <brake+0xfc>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f9e9 	bl	80010bc <__aeabi_fcmpgt>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d100      	bne.n	8001cf2 <brake+0xce>
		vr = 0.2;
	}
}
 8001cf0:	e003      	b.n	8001cfa <brake+0xd6>
		vr = 0.2;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <brake+0xe8>)
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <brake+0xec>)
 8001cf6:	601a      	str	r2, [r3, #0]
}
 8001cf8:	e7ff      	b.n	8001cfa <brake+0xd6>
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000548 	.word	0x20000548
 8001d04:	45cb2000 	.word	0x45cb2000
 8001d08:	2000001c 	.word	0x2000001c
 8001d0c:	2000002c 	.word	0x2000002c
 8001d10:	3e4ccccd 	.word	0x3e4ccccd
 8001d14:	46098000 	.word	0x46098000
 8001d18:	3f333333 	.word	0x3f333333
 8001d1c:	46147000 	.word	0x46147000
 8001d20:	46354000 	.word	0x46354000
 8001d24:	00000000 	.word	0x00000000

08001d28 <find_speed>:

//motor
void find_speed(void) {
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	//read encoder
	encoder_cnt_A = __HAL_TIM_GET_COUNTER(&htim1); //right
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <find_speed+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <find_speed+0x1bc>)
 8001d36:	601a      	str	r2, [r3, #0]
	encoder_cnt_B = __HAL_TIM_GET_COUNTER(&htim2); //left
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <find_speed+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <find_speed+0x1c4>)
 8001d42:	601a      	str	r2, [r3, #0]
	//cal rpm and speed (m/s)
	rpm_A = 60*((float)encoder_cnt_A - (float)encoder_cnt_pre_A)/(1496*Ts);
 8001d44:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <find_speed+0x1bc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe ffa7 	bl	8000c9c <__aeabi_i2f>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <find_speed+0x1c8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffa1 	bl	8000c9c <__aeabi_i2f>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7fe fee6 	bl	8000b30 <__aeabi_fsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4963      	ldr	r1, [pc, #396]	; (8001ef4 <find_speed+0x1cc>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ffeb 	bl	8000d44 <__aeabi_fmul>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461c      	mov	r4, r3
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <find_speed+0x1d0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4961      	ldr	r1, [pc, #388]	; (8001efc <find_speed+0x1d4>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ffe3 	bl	8000d44 <__aeabi_fmul>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff f892 	bl	8000eac <__aeabi_fdiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <find_speed+0x1d8>)
 8001d8e:	601a      	str	r2, [r3, #0]
	rpm_B = -60*((float)encoder_cnt_B - (float)encoder_cnt_pre_B)/(1496*Ts);
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <find_speed+0x1c4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff81 	bl	8000c9c <__aeabi_i2f>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <find_speed+0x1dc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ff7b 	bl	8000c9c <__aeabi_i2f>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7fe fec0 	bl	8000b30 <__aeabi_fsub>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4955      	ldr	r1, [pc, #340]	; (8001f08 <find_speed+0x1e0>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe ffc5 	bl	8000d44 <__aeabi_fmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461c      	mov	r4, r3
 8001dbe:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <find_speed+0x1d0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	494e      	ldr	r1, [pc, #312]	; (8001efc <find_speed+0x1d4>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ffbd 	bl	8000d44 <__aeabi_fmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff f86c 	bl	8000eac <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <find_speed+0x1e4>)
 8001dda:	601a      	str	r2, [r3, #0]
	v_A = abs_(rpm_A*2*PI*r/60); //m/s
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <find_speed+0x1d8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fea6 	bl	8000b34 <__addsf3>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb1c 	bl	8000428 <__aeabi_f2d>
 8001df0:	a339      	add	r3, pc, #228	; (adr r3, 8001ed8 <find_speed+0x1b0>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fb6f 	bl	80004d8 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4614      	mov	r4, r2
 8001e00:	461d      	mov	r5, r3
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <find_speed+0x1e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb0e 	bl	8000428 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	f7fe fb60 	bl	80004d8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <find_speed+0x1ec>)
 8001e26:	f7fe fc81 	bl	800072c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fe29 	bl	8000a88 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f98f 	bl	800115c <abs_>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <find_speed+0x1f0>)
 8001e42:	6013      	str	r3, [r2, #0]
	v_B = abs_(rpm_B*2*PI*r/60); //m/s
 8001e44:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <find_speed+0x1e4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fe72 	bl	8000b34 <__addsf3>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fae8 	bl	8000428 <__aeabi_f2d>
 8001e58:	a31f      	add	r3, pc, #124	; (adr r3, 8001ed8 <find_speed+0x1b0>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fb3b 	bl	80004d8 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <find_speed+0x1e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fada 	bl	8000428 <__aeabi_f2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4620      	mov	r0, r4
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f7fe fb2c 	bl	80004d8 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <find_speed+0x1ec>)
 8001e8e:	f7fe fc4d 	bl	800072c <__aeabi_ddiv>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fdf5 	bl	8000a88 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f95b 	bl	800115c <abs_>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <find_speed+0x1f4>)
 8001eaa:	6013      	str	r3, [r2, #0]
	vtb = (v_A+v_B)/2; //m/s
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <find_speed+0x1f0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <find_speed+0x1f4>)
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fe3c 	bl	8000b34 <__addsf3>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fff2 	bl	8000eac <__aeabi_fdiv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <find_speed+0x1f8>)
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	2e48e8a7 	.word	0x2e48e8a7
 8001edc:	400921ff 	.word	0x400921ff
 8001ee0:	20000304 	.word	0x20000304
 8001ee4:	200004d4 	.word	0x200004d4
 8001ee8:	2000034c 	.word	0x2000034c
 8001eec:	200004dc 	.word	0x200004dc
 8001ef0:	200004d8 	.word	0x200004d8
 8001ef4:	42700000 	.word	0x42700000
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	44bb0000 	.word	0x44bb0000
 8001f00:	200004e4 	.word	0x200004e4
 8001f04:	200004e0 	.word	0x200004e0
 8001f08:	c2700000 	.word	0xc2700000
 8001f0c:	200004e8 	.word	0x200004e8
 8001f10:	20000020 	.word	0x20000020
 8001f14:	404e0000 	.word	0x404e0000
 8001f18:	200004ec 	.word	0x200004ec
 8001f1c:	200004f0 	.word	0x200004f0
 8001f20:	20000540 	.word	0x20000540

08001f24 <control_motor_A>:

float control_motor_A(float rpm_motor, float expected_rpm){ //dc1
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
	er_A_pre_pre = er_A_pre;
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <control_motor_A+0x194>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a62      	ldr	r2, [pc, #392]	; (80020bc <control_motor_A+0x198>)
 8001f34:	6013      	str	r3, [r2, #0]
	er_A_pre = er_A;
 8001f36:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <control_motor_A+0x19c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5f      	ldr	r2, [pc, #380]	; (80020b8 <control_motor_A+0x194>)
 8001f3c:	6013      	str	r3, [r2, #0]
	er_A = expected_rpm - rpm_motor;
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6838      	ldr	r0, [r7, #0]
 8001f42:	f7fe fdf5 	bl	8000b30 <__aeabi_fsub>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <control_motor_A+0x19c>)
 8001f4c:	601a      	str	r2, [r3, #0]
	duty_cycle_pre_1 = duty_cycle_1;
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <control_motor_A+0x1a0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <control_motor_A+0x1a4>)
 8001f54:	6013      	str	r3, [r2, #0]
	P_part_A = kp_A*(er_A - er_A_pre);
 8001f56:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <control_motor_A+0x19c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <control_motor_A+0x194>)
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fde5 	bl	8000b30 <__aeabi_fsub>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b58      	ldr	r3, [pc, #352]	; (80020cc <control_motor_A+0x1a8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4610      	mov	r0, r2
 8001f72:	f7fe fee7 	bl	8000d44 <__aeabi_fmul>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <control_motor_A+0x1ac>)
 8001f7c:	601a      	str	r2, [r3, #0]
	I_part_A = 0.5*ki_A*Ts*(er_A + er_A_pre);
 8001f7e:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <control_motor_A+0x1b0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa50 	bl	8000428 <__aeabi_f2d>
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <control_motor_A+0x1b4>)
 8001f8e:	f7fe faa3 	bl	80004d8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4614      	mov	r4, r2
 8001f98:	461d      	mov	r5, r3
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <control_motor_A+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa42 	bl	8000428 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	f7fe fa94 	bl	80004d8 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <control_motor_A+0x19c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <control_motor_A+0x194>)
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fdb6 	bl	8000b34 <__addsf3>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa2c 	bl	8000428 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe fa7e 	bl	80004d8 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fd50 	bl	8000a88 <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <control_motor_A+0x1bc>)
 8001fec:	6013      	str	r3, [r2, #0]
	D_part_A = kd_A/Ts*(er_A - 2*er_A_pre + er_A_pre_pre);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <control_motor_A+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <control_motor_A+0x1b8>)
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ff57 	bl	8000eac <__aeabi_fdiv>
 8001ffe:	4603      	mov	r3, r0
 8002000:	461d      	mov	r5, r3
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <control_motor_A+0x19c>)
 8002004:	681c      	ldr	r4, [r3, #0]
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <control_motor_A+0x194>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fd91 	bl	8000b34 <__addsf3>
 8002012:	4603      	mov	r3, r0
 8002014:	4619      	mov	r1, r3
 8002016:	4620      	mov	r0, r4
 8002018:	f7fe fd8a 	bl	8000b30 <__aeabi_fsub>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <control_motor_A+0x198>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7fe fd84 	bl	8000b34 <__addsf3>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	4628      	mov	r0, r5
 8002032:	f7fe fe87 	bl	8000d44 <__aeabi_fmul>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <control_motor_A+0x1c4>)
 800203c:	601a      	str	r2, [r3, #0]
	duty_cycle_1 = duty_cycle_pre_1 + P_part_A + I_part_A + D_part_A;
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <control_motor_A+0x1a4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <control_motor_A+0x1ac>)
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fd73 	bl	8000b34 <__addsf3>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <control_motor_A+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7fe fd6b 	bl	8000b34 <__addsf3>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <control_motor_A+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7fe fd63 	bl	8000b34 <__addsf3>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <control_motor_A+0x1a0>)
 8002074:	601a      	str	r2, [r3, #0]
	if(duty_cycle_1 < 0) duty_cycle_1 = 0;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <control_motor_A+0x1a0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fffe 	bl	8001080 <__aeabi_fcmplt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <control_motor_A+0x16e>
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <control_motor_A+0x1a0>)
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
	if(duty_cycle_1 > 100) duty_cycle_1 = 99;
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <control_motor_A+0x1a0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4915      	ldr	r1, [pc, #84]	; (80020ec <control_motor_A+0x1c8>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f80f 	bl	80010bc <__aeabi_fcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <control_motor_A+0x186>
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <control_motor_A+0x1a0>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <control_motor_A+0x1cc>)
 80020a8:	601a      	str	r2, [r3, #0]
	return duty_cycle_1;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <control_motor_A+0x1a0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdb0      	pop	{r4, r5, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000052c 	.word	0x2000052c
 80020bc:	20000530 	.word	0x20000530
 80020c0:	20000528 	.word	0x20000528
 80020c4:	200004f8 	.word	0x200004f8
 80020c8:	200004fc 	.word	0x200004fc
 80020cc:	20000038 	.word	0x20000038
 80020d0:	20000510 	.word	0x20000510
 80020d4:	2000003c 	.word	0x2000003c
 80020d8:	3fe00000 	.word	0x3fe00000
 80020dc:	20000028 	.word	0x20000028
 80020e0:	20000514 	.word	0x20000514
 80020e4:	20000040 	.word	0x20000040
 80020e8:	20000518 	.word	0x20000518
 80020ec:	42c80000 	.word	0x42c80000
 80020f0:	42c60000 	.word	0x42c60000

080020f4 <control_motor_B>:
float control_motor_B(float rpm_motor, float expected_rpm){ //dc2
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	er_B_pre_pre = er_B_pre;
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <control_motor_B+0x194>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a62      	ldr	r2, [pc, #392]	; (800228c <control_motor_B+0x198>)
 8002104:	6013      	str	r3, [r2, #0]
	er_B_pre = er_B;
 8002106:	4b62      	ldr	r3, [pc, #392]	; (8002290 <control_motor_B+0x19c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5f      	ldr	r2, [pc, #380]	; (8002288 <control_motor_B+0x194>)
 800210c:	6013      	str	r3, [r2, #0]
	er_B = expected_rpm - rpm_motor;
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f7fe fd0d 	bl	8000b30 <__aeabi_fsub>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <control_motor_B+0x19c>)
 800211c:	601a      	str	r2, [r3, #0]
	duty_cycle_pre_2 = duty_cycle_2;
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <control_motor_B+0x1a0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <control_motor_B+0x1a4>)
 8002124:	6013      	str	r3, [r2, #0]
	P_part_B = kp_B*(er_B - er_B_pre);
 8002126:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <control_motor_B+0x19c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a57      	ldr	r2, [pc, #348]	; (8002288 <control_motor_B+0x194>)
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fcfd 	bl	8000b30 <__aeabi_fsub>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	4b58      	ldr	r3, [pc, #352]	; (800229c <control_motor_B+0x1a8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f7fe fdff 	bl	8000d44 <__aeabi_fmul>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <control_motor_B+0x1ac>)
 800214c:	601a      	str	r2, [r3, #0]
	I_part_B = 0.5*ki_B*Ts*(er_B + er_B_pre);
 800214e:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <control_motor_B+0x1b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f968 	bl	8000428 <__aeabi_f2d>
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <control_motor_B+0x1b4>)
 800215e:	f7fe f9bb 	bl	80004d8 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4614      	mov	r4, r2
 8002168:	461d      	mov	r5, r3
 800216a:	4b50      	ldr	r3, [pc, #320]	; (80022ac <control_motor_B+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f95a 	bl	8000428 <__aeabi_f2d>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4620      	mov	r0, r4
 800217a:	4629      	mov	r1, r5
 800217c:	f7fe f9ac 	bl	80004d8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4614      	mov	r4, r2
 8002186:	461d      	mov	r5, r3
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <control_motor_B+0x19c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <control_motor_B+0x194>)
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fcce 	bl	8000b34 <__addsf3>
 8002198:	4603      	mov	r3, r0
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f944 	bl	8000428 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4620      	mov	r0, r4
 80021a6:	4629      	mov	r1, r5
 80021a8:	f7fe f996 	bl	80004d8 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fc68 	bl	8000a88 <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a3d      	ldr	r2, [pc, #244]	; (80022b0 <control_motor_B+0x1bc>)
 80021bc:	6013      	str	r3, [r2, #0]
	D_part_B = kd_A/Ts*(er_B - 2*er_B_pre + er_B_pre_pre);
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <control_motor_B+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <control_motor_B+0x1b8>)
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fe6f 	bl	8000eac <__aeabi_fdiv>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461d      	mov	r5, r3
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <control_motor_B+0x19c>)
 80021d4:	681c      	ldr	r4, [r3, #0]
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <control_motor_B+0x194>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fca9 	bl	8000b34 <__addsf3>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7fe fca2 	bl	8000b30 <__aeabi_fsub>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <control_motor_B+0x198>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4610      	mov	r0, r2
 80021f8:	f7fe fc9c 	bl	8000b34 <__addsf3>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4619      	mov	r1, r3
 8002200:	4628      	mov	r0, r5
 8002202:	f7fe fd9f 	bl	8000d44 <__aeabi_fmul>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <control_motor_B+0x1c4>)
 800220c:	601a      	str	r2, [r3, #0]
	duty_cycle_2 = duty_cycle_pre_2 + P_part_B + I_part_B + D_part_B;
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <control_motor_B+0x1a4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <control_motor_B+0x1ac>)
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fc8b 	bl	8000b34 <__addsf3>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <control_motor_B+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe fc83 	bl	8000b34 <__addsf3>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <control_motor_B+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7fe fc7b 	bl	8000b34 <__addsf3>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <control_motor_B+0x1a0>)
 8002244:	601a      	str	r2, [r3, #0]
	if(duty_cycle_2 < 0) duty_cycle_2 = 0;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <control_motor_B+0x1a0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe ff16 	bl	8001080 <__aeabi_fcmplt>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <control_motor_B+0x16e>
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <control_motor_B+0x1a0>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
	if(duty_cycle_2 > 100) duty_cycle_2 = 99;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <control_motor_B+0x1a0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4915      	ldr	r1, [pc, #84]	; (80022bc <control_motor_B+0x1c8>)
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff27 	bl	80010bc <__aeabi_fcmpgt>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <control_motor_B+0x186>
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <control_motor_B+0x1a0>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <control_motor_B+0x1cc>)
 8002278:	601a      	str	r2, [r3, #0]
	return duty_cycle_2;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <control_motor_B+0x1a0>)
 800227c:	681b      	ldr	r3, [r3, #0]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	bf00      	nop
 8002288:	20000538 	.word	0x20000538
 800228c:	2000053c 	.word	0x2000053c
 8002290:	20000534 	.word	0x20000534
 8002294:	20000500 	.word	0x20000500
 8002298:	20000504 	.word	0x20000504
 800229c:	20000044 	.word	0x20000044
 80022a0:	2000051c 	.word	0x2000051c
 80022a4:	20000048 	.word	0x20000048
 80022a8:	3fe00000 	.word	0x3fe00000
 80022ac:	20000028 	.word	0x20000028
 80022b0:	20000520 	.word	0x20000520
 80022b4:	20000040 	.word	0x20000040
 80022b8:	20000524 	.word	0x20000524
 80022bc:	42c80000 	.word	0x42c80000
 80022c0:	42c60000 	.word	0x42c60000

080022c4 <HAL_TIM_PeriodElapsedCallback>:
//}



//code chuong trinh chinh
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	i++;
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022d4:	6013      	str	r3, [r2, #0]
	if(i == 85) { //tglm la 0.05s 85
 80022d6:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b55      	cmp	r3, #85	; 0x55
 80022dc:	f040 81fc 	bne.w	80026d8 <HAL_TIM_PeriodElapsedCallback+0x414>
		//no line no run and stop to get goods
		stop_or_run(); //den vach tai hang hoac ra khoi line se dung 'stop = 1'
 80022e0:	f7ff f8aa 	bl	8001438 <stop_or_run>
		no_line_no_run();
 80022e4:	f7ff f8d0 	bl	8001488 <no_line_no_run>
		brake();
 80022e8:	f7ff fc9c 	bl	8001c24 <brake>
		//find error
		find_e2_e3();
 80022ec:	f7ff fb46 	bl	800197c <find_e2_e3>
		//find_speed
		find_speed();
 80022f0:	f7ff fd1a 	bl	8001d28 <find_speed>
		//fl tracking (lyapunov)
		Follow_Tracking();
 80022f4:	f7fe ff48 	bl	8001188 <Follow_Tracking>
		//find pwm to provide for motor
		duty_cycle_A = control_motor_A(rpm_A, setpoint_r);  //return pwm dc1
 80022f8:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fe0e 	bl	8001f24 <control_motor_A>
 8002308:	4603      	mov	r3, r0
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800230c:	6013      	str	r3, [r2, #0]
		duty_cycle_B = control_motor_B(rpm_B, setpoint_l);  //return pwm dc2
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff feeb 	bl	80020f4 <control_motor_B>
 800231e:	4603      	mov	r3, r0
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002322:	6013      	str	r3, [r2, #0]
		//setup for next time
		encoder_cnt_pre_A = encoder_cnt_A;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800232a:	6013      	str	r3, [r2, #0]
		encoder_cnt_pre_B = encoder_cnt_B;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002332:	6013      	str	r3, [r2, #0]
		pre_e2 = e2;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800233a:	6013      	str	r3, [r2, #0]
		pre_e3 = e3;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002342:	6013      	str	r3, [r2, #0]
		//run fl pwm
		if(stop == 0) {
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d137      	bne.n	80023bc <HAL_TIM_PeriodElapsedCallback+0xf8>
		  TIM3->CCR1 = (99-(int)duty_cycle_A);
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe febd 	bl	80010d0 <__aeabi_f2iz>
 8002356:	4603      	mov	r3, r0
 8002358:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM3->CCR2 = (99-(int)duty_cycle_B);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe feb3 	bl	80010d0 <__aeabi_f2iz>
 800236a:	4603      	mov	r3, r0
 800236c:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
 8002374:	e028      	b.n	80023c8 <HAL_TIM_PeriodElapsedCallback+0x104>
 8002376:	bf00      	nop
 8002378:	20000564 	.word	0x20000564
 800237c:	200004e4 	.word	0x200004e4
 8002380:	2000055c 	.word	0x2000055c
 8002384:	20000508 	.word	0x20000508
 8002388:	200004e8 	.word	0x200004e8
 800238c:	20000560 	.word	0x20000560
 8002390:	2000050c 	.word	0x2000050c
 8002394:	200004d4 	.word	0x200004d4
 8002398:	200004d8 	.word	0x200004d8
 800239c:	200004dc 	.word	0x200004dc
 80023a0:	200004e0 	.word	0x200004e0
 80023a4:	2000049c 	.word	0x2000049c
 80023a8:	200004a0 	.word	0x200004a0
 80023ac:	200004a4 	.word	0x200004a4
 80023b0:	200004a8 	.word	0x200004a8
 80023b4:	200004f4 	.word	0x200004f4
 80023b8:	40000400 	.word	0x40000400
		}
		else {
		  TIM3->CCR1 = 99;
 80023bc:	4b91      	ldr	r3, [pc, #580]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023be:	2263      	movs	r2, #99	; 0x63
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM3->CCR2 = 99;
 80023c2:	4b90      	ldr	r3, [pc, #576]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023c4:	2263      	movs	r2, #99	; 0x63
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
		}
		s += vtb*Ts*1000;
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a8f      	ldr	r2, [pc, #572]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x348>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fcb6 	bl	8000d44 <__aeabi_fmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	498d      	ldr	r1, [pc, #564]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fcb1 	bl	8000d44 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7fe fba1 	bl	8000b34 <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b87      	ldr	r3, [pc, #540]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80023f8:	601a      	str	r2, [r3, #0]
		if((hangXanh == 1 || hangDo == 1) && outline == 0){
 80023fa:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d004      	beq.n	800240c <HAL_TIM_PeriodElapsedCallback+0x148>
 8002402:	4b86      	ldr	r3, [pc, #536]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	f040 8163 	bne.w	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 815e 	bne.w	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
			stop = 0;
 8002416:	4b83      	ldr	r3, [pc, #524]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
			if(empty == 0 && ((AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] > 2000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //01110
 800241c:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 8156 	bne.w	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 8002426:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242e:	d214      	bcs.n	800245a <HAL_TIM_PeriodElapsedCallback+0x196>
 8002430:	4b7e      	ldr	r3, [pc, #504]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002432:	885b      	ldrh	r3, [r3, #2]
 8002434:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002438:	d90f      	bls.n	800245a <HAL_TIM_PeriodElapsedCallback+0x196>
 800243a:	4b7c      	ldr	r3, [pc, #496]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800243c:	889b      	ldrh	r3, [r3, #4]
 800243e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002442:	d90a      	bls.n	800245a <HAL_TIM_PeriodElapsedCallback+0x196>
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002446:	88db      	ldrh	r3, [r3, #6]
 8002448:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800244c:	d905      	bls.n	800245a <HAL_TIM_PeriodElapsedCallback+0x196>
 800244e:	4b77      	ldr	r3, [pc, #476]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	f0c0 8127 	bcc.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //10001
 800245a:	4b74      	ldr	r3, [pc, #464]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002462:	d914      	bls.n	800248e <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8002464:	4b71      	ldr	r3, [pc, #452]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002466:	885b      	ldrh	r3, [r3, #2]
 8002468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246c:	d20f      	bcs.n	800248e <HAL_TIM_PeriodElapsedCallback+0x1ca>
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002470:	889b      	ldrh	r3, [r3, #4]
 8002472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002476:	d20a      	bcs.n	800248e <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8002478:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800247a:	88db      	ldrh	r3, [r3, #6]
 800247c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002480:	d205      	bcs.n	800248e <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8002482:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002484:	891b      	ldrh	r3, [r3, #8]
 8002486:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800248a:	f200 810d 	bhi.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //01010
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002496:	d214      	bcs.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8002498:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800249a:	885b      	ldrh	r3, [r3, #2]
 800249c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024a0:	d90f      	bls.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 80024a2:	4b62      	ldr	r3, [pc, #392]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024a4:	889b      	ldrh	r3, [r3, #4]
 80024a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024aa:	d20a      	bcs.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024ae:	88db      	ldrh	r3, [r3, #6]
 80024b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024b4:	d905      	bls.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x1fe>
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024b8:	891b      	ldrh	r3, [r3, #8]
 80024ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024be:	f0c0 80f3 	bcc.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //11010
 80024c2:	4b5a      	ldr	r3, [pc, #360]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024ca:	d914      	bls.n	80024f6 <HAL_TIM_PeriodElapsedCallback+0x232>
 80024cc:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024ce:	885b      	ldrh	r3, [r3, #2]
 80024d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024d4:	d90f      	bls.n	80024f6 <HAL_TIM_PeriodElapsedCallback+0x232>
 80024d6:	4b55      	ldr	r3, [pc, #340]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024d8:	889b      	ldrh	r3, [r3, #4]
 80024da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024de:	d20a      	bcs.n	80024f6 <HAL_TIM_PeriodElapsedCallback+0x232>
 80024e0:	4b52      	ldr	r3, [pc, #328]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024e2:	88db      	ldrh	r3, [r3, #6]
 80024e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024e8:	d905      	bls.n	80024f6 <HAL_TIM_PeriodElapsedCallback+0x232>
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024ec:	891b      	ldrh	r3, [r3, #8]
 80024ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024f2:	f0c0 80d9 	bcc.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] > 2000) //11011
 80024f6:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024fe:	d914      	bls.n	800252a <HAL_TIM_PeriodElapsedCallback+0x266>
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002502:	885b      	ldrh	r3, [r3, #2]
 8002504:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002508:	d90f      	bls.n	800252a <HAL_TIM_PeriodElapsedCallback+0x266>
 800250a:	4b48      	ldr	r3, [pc, #288]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800250c:	889b      	ldrh	r3, [r3, #4]
 800250e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002512:	d20a      	bcs.n	800252a <HAL_TIM_PeriodElapsedCallback+0x266>
 8002514:	4b45      	ldr	r3, [pc, #276]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002516:	88db      	ldrh	r3, [r3, #6]
 8002518:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800251c:	d905      	bls.n	800252a <HAL_TIM_PeriodElapsedCallback+0x266>
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002520:	891b      	ldrh	r3, [r3, #8]
 8002522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002526:	f200 80bf 	bhi.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //11001
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002532:	d914      	bls.n	800255e <HAL_TIM_PeriodElapsedCallback+0x29a>
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002536:	885b      	ldrh	r3, [r3, #2]
 8002538:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800253c:	d90f      	bls.n	800255e <HAL_TIM_PeriodElapsedCallback+0x29a>
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002540:	889b      	ldrh	r3, [r3, #4]
 8002542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002546:	d20a      	bcs.n	800255e <HAL_TIM_PeriodElapsedCallback+0x29a>
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800254a:	88db      	ldrh	r3, [r3, #6]
 800254c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002550:	d205      	bcs.n	800255e <HAL_TIM_PeriodElapsedCallback+0x29a>
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002554:	891b      	ldrh	r3, [r3, #8]
 8002556:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800255a:	f200 80a5 	bhi.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] > 2000) //10011
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002566:	d914      	bls.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x2ce>
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800256a:	885b      	ldrh	r3, [r3, #2]
 800256c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002570:	d20f      	bcs.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x2ce>
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002574:	889b      	ldrh	r3, [r3, #4]
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257a:	d20a      	bcs.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x2ce>
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800257e:	88db      	ldrh	r3, [r3, #6]
 8002580:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002584:	d905      	bls.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x2ce>
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002588:	891b      	ldrh	r3, [r3, #8]
 800258a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800258e:	f200 808b 	bhi.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] > 2000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //10110
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800259a:	d913      	bls.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x300>
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 800259e:	885b      	ldrh	r3, [r3, #2]
 80025a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025a4:	d20e      	bcs.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x300>
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025ae:	d909      	bls.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x300>
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025b2:	88db      	ldrh	r3, [r3, #6]
 80025b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025b8:	d904      	bls.n	80025c4 <HAL_TIM_PeriodElapsedCallback+0x300>
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025bc:	891b      	ldrh	r3, [r3, #8]
 80025be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c2:	d371      	bcc.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] > 2000 && AdcValues[3] < 1000 && AdcValues[4] > 2000)
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025cc:	d213      	bcs.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x332>
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025d6:	d90e      	bls.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x332>
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025da:	889b      	ldrh	r3, [r3, #4]
 80025dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025e0:	d909      	bls.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x332>
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025e4:	88db      	ldrh	r3, [r3, #6]
 80025e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ea:	d204      	bcs.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x332>
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025ee:	891b      	ldrh	r3, [r3, #8]
 80025f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025f4:	d858      	bhi.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x368>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025fe:	d926      	bls.n	800264e <HAL_TIM_PeriodElapsedCallback+0x38a>
 8002600:	e016      	b.n	8002630 <HAL_TIM_PeriodElapsedCallback+0x36c>
 8002602:	bf00      	nop
 8002604:	40000400 	.word	0x40000400
 8002608:	20000540 	.word	0x20000540
 800260c:	20000028 	.word	0x20000028
 8002610:	447a0000 	.word	0x447a0000
 8002614:	20000548 	.word	0x20000548
 8002618:	200004c8 	.word	0x200004c8
 800261c:	200004cc 	.word	0x200004cc
 8002620:	200004d0 	.word	0x200004d0
 8002624:	200004f4 	.word	0x200004f4
 8002628:	2000001c 	.word	0x2000001c
 800262c:	2000046c 	.word	0x2000046c
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002638:	d209      	bcs.n	800264e <HAL_TIM_PeriodElapsedCallback+0x38a>
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800263c:	88db      	ldrh	r3, [r3, #6]
 800263e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002642:	d204      	bcs.n	800264e <HAL_TIM_PeriodElapsedCallback+0x38a>
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002646:	891b      	ldrh	r3, [r3, #8]
 8002648:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800264c:	d82c      	bhi.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[1] > 2000 && AdcValues[0] < 1000 && AdcValues[4] < 1000 && AdcValues[3] > 2000)
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002650:	885b      	ldrh	r3, [r3, #2]
 8002652:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002656:	d90e      	bls.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d209      	bcs.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002664:	891b      	ldrh	r3, [r3, #8]
 8002666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800266a:	d204      	bcs.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x3b2>
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800266e:	88db      	ldrh	r3, [r3, #6]
 8002670:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002674:	d818      	bhi.n	80026a8 <HAL_TIM_PeriodElapsedCallback+0x3e4>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[3] > 2000 && AdcValues[4] > 2000 && AdcValues[2] < 1000))){ //01101
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800267e:	d928      	bls.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002682:	885b      	ldrh	r3, [r3, #2]
 8002684:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002688:	d923      	bls.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 800268c:	88db      	ldrh	r3, [r3, #6]
 800268e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002692:	d91e      	bls.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002696:	891b      	ldrh	r3, [r3, #8]
 8002698:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800269c:	d919      	bls.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80026a0:	889b      	ldrh	r3, [r3, #4]
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a6:	d214      	bcs.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
				if(hangXanh == 1) {
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_TIM_PeriodElapsedCallback+0x3fa>
					TIM3->CCR1 = 99;//99
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80026b2:	2263      	movs	r2, #99	; 0x63
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 0;//0
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
 80026bc:	e009      	b.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
				}
				else if(hangDo == 1){
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x428>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_TIM_PeriodElapsedCallback+0x40e>
					TIM3->CCR1 = 0;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 99;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80026ce:	2263      	movs	r2, #99	; 0x63
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
		//code lay mau sai so tra ve qua uart
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//		char str[30];
//		snprintf(str, sizeof(str), "%.2f %.2f\r\n",e2, vtb);
//		HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
		i = 0;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
	}
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000046c 	.word	0x2000046c
 80026e4:	200004c8 	.word	0x200004c8
 80026e8:	40000400 	.word	0x40000400
 80026ec:	200004cc 	.word	0x200004cc
 80026f0:	20000564 	.word	0x20000564

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f8:	f001 f8b0 	bl	800385c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fc:	f000 f9dc 	bl	8002ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002700:	f000 fcd0 	bl	80030a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002704:	f000 fcb0 	bl	8003068 <MX_DMA_Init>
  MX_TIM1_Init();
 8002708:	f000 facc 	bl	8002ca4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800270c:	f000 fb22 	bl	8002d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002710:	f000 fb74 	bl	8002dfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002714:	f000 fbf2 	bl	8002efc <MX_TIM4_Init>
  MX_ADC1_Init();
 8002718:	f000 fa1e 	bl	8002b58 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800271c:	f000 fc7a 	bl	8003014 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002720:	f000 fa92 	bl	8002c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //cảm biến màu
  HAL_GPIO_WritePin(S0_GPIO_Port, S0_Pin, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800272a:	489b      	ldr	r0, [pc, #620]	; (8002998 <main+0x2a4>)
 800272c:	f002 f968 	bl	8004a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002736:	4898      	ldr	r0, [pc, #608]	; (8002998 <main+0x2a4>)
 8002738:	f002 f962 	bl	8004a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002742:	4895      	ldr	r0, [pc, #596]	; (8002998 <main+0x2a4>)
 8002744:	f002 f95c 	bl	8004a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800274e:	4892      	ldr	r0, [pc, #584]	; (8002998 <main+0x2a4>)
 8002750:	f002 f956 	bl	8004a00 <HAL_GPIO_WritePin>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 8002754:	2100      	movs	r1, #0
 8002756:	4891      	ldr	r0, [pc, #580]	; (800299c <main+0x2a8>)
 8002758:	f003 f968 	bl	8005a2c <HAL_TIM_IC_Start>

  //dò line
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)AdcValues,5);
 800275c:	2205      	movs	r2, #5
 800275e:	4990      	ldr	r1, [pc, #576]	; (80029a0 <main+0x2ac>)
 8002760:	4890      	ldr	r0, [pc, #576]	; (80029a4 <main+0x2b0>)
 8002762:	f001 f9d9 	bl	8003b18 <HAL_ADC_Start_DMA>
  CalibSensorDependOnEnvironment();
 8002766:	f7ff f84b 	bl	8001800 <CalibSensorDependOnEnvironment>
  CaculatorFuntionSensor();
 800276a:	f7fe feeb 	bl	8001544 <CaculatorFuntionSensor>

  //động cơ
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800276e:	2104      	movs	r1, #4
 8002770:	488d      	ldr	r0, [pc, #564]	; (80029a8 <main+0x2b4>)
 8002772:	f003 fabd 	bl	8005cf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8002776:	2104      	movs	r1, #4
 8002778:	488c      	ldr	r0, [pc, #560]	; (80029ac <main+0x2b8>)
 800277a:	f003 fab9 	bl	8005cf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800277e:	2100      	movs	r1, #0
 8002780:	488b      	ldr	r0, [pc, #556]	; (80029b0 <main+0x2bc>)
 8002782:	f003 f859 	bl	8005838 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002786:	2104      	movs	r1, #4
 8002788:	4889      	ldr	r0, [pc, #548]	; (80029b0 <main+0x2bc>)
 800278a:	f003 f855 	bl	8005838 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800278e:	4888      	ldr	r0, [pc, #544]	; (80029b0 <main+0x2bc>)
 8002790:	f002 ffa8 	bl	80056e4 <HAL_TIM_Base_Start_IT>
  TIM3->CCR1 = 99;
 8002794:	4b87      	ldr	r3, [pc, #540]	; (80029b4 <main+0x2c0>)
 8002796:	2263      	movs	r2, #99	; 0x63
 8002798:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 99;
 800279a:	4b86      	ldr	r3, [pc, #536]	; (80029b4 <main+0x2c0>)
 800279c:	2263      	movs	r2, #99	; 0x63
 800279e:	639a      	str	r2, [r3, #56]	; 0x38

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//no line no run and stop to get goods
		stop_or_run(); //den vach tai hang hoac ra khoi line se dung 'stop = 1'
 80027a0:	f7fe fe4a 	bl	8001438 <stop_or_run>
		no_line_no_run();
 80027a4:	f7fe fe70 	bl	8001488 <no_line_no_run>
		//nhan dien mau hang
		color_recognize();
 80027a8:	f7ff f944 	bl	8001a34 <color_recognize>
		//check is there good or not
		yes_or_no_good();
 80027ac:	f7fe fe98 	bl	80014e0 <yes_or_no_good>
		//giam toc
		brake();
 80027b0:	f7ff fa38 	bl	8001c24 <brake>
		if((hangXanh == 1 || hangDo == 1) && outline == 0){
 80027b4:	4b80      	ldr	r3, [pc, #512]	; (80029b8 <main+0x2c4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d003      	beq.n	80027c4 <main+0xd0>
 80027bc:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <main+0x2c8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d1ed      	bne.n	80027a0 <main+0xac>
 80027c4:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <main+0x2cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e9      	bne.n	80027a0 <main+0xac>
			stop = 0;
 80027cc:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <main+0x2d0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
			if(empty == 0 && ((AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] > 2000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //01110
 80027d2:	4b7d      	ldr	r3, [pc, #500]	; (80029c8 <main+0x2d4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e2      	bne.n	80027a0 <main+0xac>
 80027da:	4b71      	ldr	r3, [pc, #452]	; (80029a0 <main+0x2ac>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e2:	d214      	bcs.n	800280e <main+0x11a>
 80027e4:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <main+0x2ac>)
 80027e6:	885b      	ldrh	r3, [r3, #2]
 80027e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027ec:	d90f      	bls.n	800280e <main+0x11a>
 80027ee:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <main+0x2ac>)
 80027f0:	889b      	ldrh	r3, [r3, #4]
 80027f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027f6:	d90a      	bls.n	800280e <main+0x11a>
 80027f8:	4b69      	ldr	r3, [pc, #420]	; (80029a0 <main+0x2ac>)
 80027fa:	88db      	ldrh	r3, [r3, #6]
 80027fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002800:	d905      	bls.n	800280e <main+0x11a>
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <main+0x2ac>)
 8002804:	891b      	ldrh	r3, [r3, #8]
 8002806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280a:	f0c0 8130 	bcc.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //10001
 800280e:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <main+0x2ac>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002816:	d914      	bls.n	8002842 <main+0x14e>
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <main+0x2ac>)
 800281a:	885b      	ldrh	r3, [r3, #2]
 800281c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002820:	d20f      	bcs.n	8002842 <main+0x14e>
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <main+0x2ac>)
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800282a:	d20a      	bcs.n	8002842 <main+0x14e>
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <main+0x2ac>)
 800282e:	88db      	ldrh	r3, [r3, #6]
 8002830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002834:	d205      	bcs.n	8002842 <main+0x14e>
 8002836:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <main+0x2ac>)
 8002838:	891b      	ldrh	r3, [r3, #8]
 800283a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800283e:	f200 8116 	bhi.w	8002a6e <main+0x37a>
					|| (AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //01010
 8002842:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <main+0x2ac>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800284a:	d214      	bcs.n	8002876 <main+0x182>
 800284c:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <main+0x2ac>)
 800284e:	885b      	ldrh	r3, [r3, #2]
 8002850:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002854:	d90f      	bls.n	8002876 <main+0x182>
 8002856:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <main+0x2ac>)
 8002858:	889b      	ldrh	r3, [r3, #4]
 800285a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800285e:	d20a      	bcs.n	8002876 <main+0x182>
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <main+0x2ac>)
 8002862:	88db      	ldrh	r3, [r3, #6]
 8002864:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002868:	d905      	bls.n	8002876 <main+0x182>
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <main+0x2ac>)
 800286c:	891b      	ldrh	r3, [r3, #8]
 800286e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002872:	f0c0 80fc 	bcc.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //11010
 8002876:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <main+0x2ac>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800287e:	d914      	bls.n	80028aa <main+0x1b6>
 8002880:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <main+0x2ac>)
 8002882:	885b      	ldrh	r3, [r3, #2]
 8002884:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002888:	d90f      	bls.n	80028aa <main+0x1b6>
 800288a:	4b45      	ldr	r3, [pc, #276]	; (80029a0 <main+0x2ac>)
 800288c:	889b      	ldrh	r3, [r3, #4]
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002892:	d20a      	bcs.n	80028aa <main+0x1b6>
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <main+0x2ac>)
 8002896:	88db      	ldrh	r3, [r3, #6]
 8002898:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800289c:	d905      	bls.n	80028aa <main+0x1b6>
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <main+0x2ac>)
 80028a0:	891b      	ldrh	r3, [r3, #8]
 80028a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a6:	f0c0 80e2 	bcc.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] > 2000) //11011
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <main+0x2ac>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028b2:	d914      	bls.n	80028de <main+0x1ea>
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <main+0x2ac>)
 80028b6:	885b      	ldrh	r3, [r3, #2]
 80028b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028bc:	d90f      	bls.n	80028de <main+0x1ea>
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <main+0x2ac>)
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c6:	d20a      	bcs.n	80028de <main+0x1ea>
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <main+0x2ac>)
 80028ca:	88db      	ldrh	r3, [r3, #6]
 80028cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028d0:	d905      	bls.n	80028de <main+0x1ea>
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <main+0x2ac>)
 80028d4:	891b      	ldrh	r3, [r3, #8]
 80028d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028da:	f200 80c8 	bhi.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[2] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //11001
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <main+0x2ac>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028e6:	d914      	bls.n	8002912 <main+0x21e>
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <main+0x2ac>)
 80028ea:	885b      	ldrh	r3, [r3, #2]
 80028ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028f0:	d90f      	bls.n	8002912 <main+0x21e>
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <main+0x2ac>)
 80028f4:	889b      	ldrh	r3, [r3, #4]
 80028f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028fa:	d20a      	bcs.n	8002912 <main+0x21e>
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <main+0x2ac>)
 80028fe:	88db      	ldrh	r3, [r3, #6]
 8002900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002904:	d205      	bcs.n	8002912 <main+0x21e>
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <main+0x2ac>)
 8002908:	891b      	ldrh	r3, [r3, #8]
 800290a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800290e:	f200 80ae 	bhi.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] < 1000 && AdcValues[3] > 2000 && AdcValues[4] > 2000) //10011
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <main+0x2ac>)
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800291a:	d914      	bls.n	8002946 <main+0x252>
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <main+0x2ac>)
 800291e:	885b      	ldrh	r3, [r3, #2]
 8002920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002924:	d20f      	bcs.n	8002946 <main+0x252>
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <main+0x2ac>)
 8002928:	889b      	ldrh	r3, [r3, #4]
 800292a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800292e:	d20a      	bcs.n	8002946 <main+0x252>
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <main+0x2ac>)
 8002932:	88db      	ldrh	r3, [r3, #6]
 8002934:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002938:	d905      	bls.n	8002946 <main+0x252>
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <main+0x2ac>)
 800293c:	891b      	ldrh	r3, [r3, #8]
 800293e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002942:	f200 8094 	bhi.w	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[2] > 2000 && AdcValues[3] > 2000 && AdcValues[4] < 1000) //10110
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <main+0x2ac>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800294e:	d913      	bls.n	8002978 <main+0x284>
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <main+0x2ac>)
 8002952:	885b      	ldrh	r3, [r3, #2]
 8002954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002958:	d20e      	bcs.n	8002978 <main+0x284>
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <main+0x2ac>)
 800295c:	889b      	ldrh	r3, [r3, #4]
 800295e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002962:	d909      	bls.n	8002978 <main+0x284>
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <main+0x2ac>)
 8002966:	88db      	ldrh	r3, [r3, #6]
 8002968:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800296c:	d904      	bls.n	8002978 <main+0x284>
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <main+0x2ac>)
 8002970:	891b      	ldrh	r3, [r3, #8]
 8002972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002976:	d37a      	bcc.n	8002a6e <main+0x37a>
					|| (AdcValues[0] < 1000 && AdcValues[1] > 2000 && AdcValues[2] > 2000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //01101
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <main+0x2ac>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002980:	d22f      	bcs.n	80029e2 <main+0x2ee>
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <main+0x2ac>)
 8002984:	885b      	ldrh	r3, [r3, #2]
 8002986:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800298a:	d92a      	bls.n	80029e2 <main+0x2ee>
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <main+0x2ac>)
 800298e:	889b      	ldrh	r3, [r3, #4]
 8002990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002994:	e01a      	b.n	80029cc <main+0x2d8>
 8002996:	bf00      	nop
 8002998:	40010c00 	.word	0x40010c00
 800299c:	200003dc 	.word	0x200003dc
 80029a0:	2000046c 	.word	0x2000046c
 80029a4:	2000023c 	.word	0x2000023c
 80029a8:	20000304 	.word	0x20000304
 80029ac:	2000034c 	.word	0x2000034c
 80029b0:	20000394 	.word	0x20000394
 80029b4:	40000400 	.word	0x40000400
 80029b8:	200004c8 	.word	0x200004c8
 80029bc:	200004cc 	.word	0x200004cc
 80029c0:	200004d0 	.word	0x200004d0
 80029c4:	200004f4 	.word	0x200004f4
 80029c8:	2000001c 	.word	0x2000001c
 80029cc:	d909      	bls.n	80029e2 <main+0x2ee>
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <main+0x3b4>)
 80029d0:	88db      	ldrh	r3, [r3, #6]
 80029d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d6:	d204      	bcs.n	80029e2 <main+0x2ee>
 80029d8:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <main+0x3b4>)
 80029da:	891b      	ldrh	r3, [r3, #8]
 80029dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80029e0:	d845      	bhi.n	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] < 1000 && AdcValues[3] < 1000 && AdcValues[4] > 2000) //10_01
 80029e2:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <main+0x3b4>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80029ea:	d90e      	bls.n	8002a0a <main+0x316>
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <main+0x3b4>)
 80029ee:	885b      	ldrh	r3, [r3, #2]
 80029f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029f4:	d209      	bcs.n	8002a0a <main+0x316>
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <main+0x3b4>)
 80029f8:	88db      	ldrh	r3, [r3, #6]
 80029fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029fe:	d204      	bcs.n	8002a0a <main+0x316>
 8002a00:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <main+0x3b4>)
 8002a02:	891b      	ldrh	r3, [r3, #8]
 8002a04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a08:	d831      	bhi.n	8002a6e <main+0x37a>
					|| (AdcValues[1] > 2000 && AdcValues[0] < 1000 && AdcValues[4] < 1000 && AdcValues[3] > 2000) //01_10
 8002a0a:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <main+0x3b4>)
 8002a0c:	885b      	ldrh	r3, [r3, #2]
 8002a0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a12:	d90e      	bls.n	8002a32 <main+0x33e>
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <main+0x3b4>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a1c:	d209      	bcs.n	8002a32 <main+0x33e>
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <main+0x3b4>)
 8002a20:	891b      	ldrh	r3, [r3, #8]
 8002a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a26:	d204      	bcs.n	8002a32 <main+0x33e>
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <main+0x3b4>)
 8002a2a:	88db      	ldrh	r3, [r3, #6]
 8002a2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a30:	d81d      	bhi.n	8002a6e <main+0x37a>
					|| (AdcValues[0] > 2000 && AdcValues[1] > 2000 && AdcValues[3] > 2000 && AdcValues[4] > 2000 && AdcValues[2] < 1000))){ //11011
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <main+0x3b4>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a3a:	f67f aeb1 	bls.w	80027a0 <main+0xac>
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <main+0x3b4>)
 8002a40:	885b      	ldrh	r3, [r3, #2]
 8002a42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a46:	f67f aeab 	bls.w	80027a0 <main+0xac>
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <main+0x3b4>)
 8002a4c:	88db      	ldrh	r3, [r3, #6]
 8002a4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a52:	f67f aea5 	bls.w	80027a0 <main+0xac>
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <main+0x3b4>)
 8002a58:	891b      	ldrh	r3, [r3, #8]
 8002a5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a5e:	f67f ae9f 	bls.w	80027a0 <main+0xac>
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <main+0x3b4>)
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6a:	f4bf ae99 	bcs.w	80027a0 <main+0xac>
				if(hangXanh == 1) {
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <main+0x3b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d109      	bne.n	8002a8a <main+0x396>
					TIM3->CCR1 = 99;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <main+0x3bc>)
 8002a78:	2263      	movs	r2, #99	; 0x63
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 0;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <main+0x3bc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
					HAL_Delay(10);
 8002a82:	200a      	movs	r0, #10
 8002a84:	f000 ff4c 	bl	8003920 <HAL_Delay>
 8002a88:	e68a      	b.n	80027a0 <main+0xac>
				}
				else if(hangDo == 1){
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <main+0x3c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	f47f ae86 	bne.w	80027a0 <main+0xac>
					TIM3->CCR1 = 0;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <main+0x3bc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 99;
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <main+0x3bc>)
 8002a9c:	2263      	movs	r2, #99	; 0x63
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
					HAL_Delay(10);
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f000 ff3d 	bl	8003920 <HAL_Delay>
		stop_or_run(); //den vach tai hang hoac ra khoi line se dung 'stop = 1'
 8002aa6:	e67b      	b.n	80027a0 <main+0xac>
 8002aa8:	2000046c 	.word	0x2000046c
 8002aac:	200004c8 	.word	0x200004c8
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	200004cc 	.word	0x200004cc

08002ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b094      	sub	sp, #80	; 0x50
 8002abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ac2:	2228      	movs	r2, #40	; 0x28
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f005 f86d 	bl	8007ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aec:	2301      	movs	r3, #1
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002af0:	2310      	movs	r3, #16
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 f8db 	bl	8004cb8 <HAL_RCC_OscConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002b08:	f000 fb20 	bl	800314c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 fb48 	bl	80051bc <HAL_RCC_ClockConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002b32:	f000 fb0b 	bl	800314c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b36:	2302      	movs	r3, #2
 8002b38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 fcc9 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b4c:	f000 fafe 	bl	800314c <Error_Handler>
  }
}
 8002b50:	bf00      	nop
 8002b52:	3750      	adds	r7, #80	; 0x50
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b6a:	4a36      	ldr	r2, [pc, #216]	; (8002c44 <MX_ADC1_Init+0xec>)
 8002b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b6e:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b76:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b84:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b92:	2205      	movs	r2, #5
 8002b94:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b96:	482a      	ldr	r0, [pc, #168]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002b98:	f000 fee6 	bl	8003968 <HAL_ADC_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002ba2:	f000 fad3 	bl	800314c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002bae:	2307      	movs	r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4822      	ldr	r0, [pc, #136]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002bb8:	f001 f8a8 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002bc2:	f000 fac3 	bl	800314c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	481b      	ldr	r0, [pc, #108]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002bd4:	f001 f89a 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002bde:	f000 fab5 	bl	800314c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002be2:	2303      	movs	r3, #3
 8002be4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002be6:	2303      	movs	r3, #3
 8002be8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	4814      	ldr	r0, [pc, #80]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002bf0:	f001 f88c 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002bfa:	f000 faa7 	bl	800314c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c02:	2304      	movs	r3, #4
 8002c04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002c0c:	f001 f87e 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002c16:	f000 fa99 	bl	800314c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c1e:	2305      	movs	r3, #5
 8002c20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <MX_ADC1_Init+0xe8>)
 8002c28:	f001 f870 	bl	8003d0c <HAL_ADC_ConfigChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002c32:	f000 fa8b 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000023c 	.word	0x2000023c
 8002c44:	40012400 	.word	0x40012400

08002c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <MX_I2C1_Init+0x54>)
 8002c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <MX_I2C1_Init+0x58>)
 8002c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <MX_I2C1_Init+0x50>)
 8002c86:	f001 fed3 	bl	8004a30 <HAL_I2C_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c90:	f000 fa5c 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200002b0 	.word	0x200002b0
 8002c9c:	40005400 	.word	0x40005400
 8002ca0:	000186a0 	.word	0x000186a0

08002ca4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 ff77 	bl	8007ba6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <MX_TIM1_Init+0xac>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cec:	2303      	movs	r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d04:	2301      	movs	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4619      	mov	r1, r3
 8002d16:	480d      	ldr	r0, [pc, #52]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002d18:	f002 ff48 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002d22:	f000 fa13 	bl	800314c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4806      	ldr	r0, [pc, #24]	; (8002d4c <MX_TIM1_Init+0xa8>)
 8002d34:	f004 f886 	bl	8006e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002d3e:	f000 fa05 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000304 	.word	0x20000304
 8002d50:	40012c00 	.word	0x40012c00

08002d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 ff1f 	bl	8007ba6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002da0:	2301      	movs	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002dbc:	f107 030c 	add.w	r3, r7, #12
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002dc4:	f002 fef2 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002dce:	f000 f9bd 	bl	800314c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4806      	ldr	r0, [pc, #24]	; (8002df8 <MX_TIM2_Init+0xa4>)
 8002de0:	f004 f830 	bl	8006e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002dea:	f000 f9af 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	; 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000034c 	.word	0x2000034c

08002dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	f107 0320 	add.w	r3, r7, #32
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e2e:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <MX_TIM3_Init+0xfc>)
 8002e30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e38:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e40:	2263      	movs	r2, #99	; 0x63
 8002e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e50:	4828      	ldr	r0, [pc, #160]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e52:	f002 fbf7 	bl	8005644 <HAL_TIM_Base_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002e5c:	f000 f976 	bl	800314c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4821      	ldr	r0, [pc, #132]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e6e:	f003 fa33 	bl	80062d8 <HAL_TIM_ConfigClockSource>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002e78:	f000 f968 	bl	800314c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e7c:	481d      	ldr	r0, [pc, #116]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e7e:	f002 fc83 	bl	8005788 <HAL_TIM_PWM_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002e88:	f000 f960 	bl	800314c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e94:	f107 0320 	add.w	r3, r7, #32
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4816      	ldr	r0, [pc, #88]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002e9c:	f003 ffd2 	bl	8006e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002ea6:	f000 f951 	bl	800314c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eaa:	2360      	movs	r3, #96	; 0x60
 8002eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002ec2:	f003 f947 	bl	8006154 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002ecc:	f000 f93e 	bl	800314c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002ed8:	f003 f93c 	bl	8006154 <HAL_TIM_PWM_ConfigChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8002ee2:	f000 f933 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ee6:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <MX_TIM3_Init+0xf8>)
 8002ee8:	f000 fb12 	bl	8003510 <HAL_TIM_MspPostInit>

}
 8002eec:	bf00      	nop
 8002eee:	3738      	adds	r7, #56	; 0x38
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000394 	.word	0x20000394
 8002ef8:	40000400 	.word	0x40000400

08002efc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b090      	sub	sp, #64	; 0x40
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <MX_TIM4_Init+0x110>)
 8002f38:	4a35      	ldr	r2, [pc, #212]	; (8003010 <MX_TIM4_Init+0x114>)
 8002f3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <MX_TIM4_Init+0x110>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <MX_TIM4_Init+0x110>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <MX_TIM4_Init+0x110>)
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <MX_TIM4_Init+0x110>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <MX_TIM4_Init+0x110>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f5c:	482b      	ldr	r0, [pc, #172]	; (800300c <MX_TIM4_Init+0x110>)
 8002f5e:	f002 fb71 	bl	8005644 <HAL_TIM_Base_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002f68:	f000 f8f0 	bl	800314c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f76:	4619      	mov	r1, r3
 8002f78:	4824      	ldr	r0, [pc, #144]	; (800300c <MX_TIM4_Init+0x110>)
 8002f7a:	f003 f9ad 	bl	80062d8 <HAL_TIM_ConfigClockSource>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f84:	f000 f8e2 	bl	800314c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002f88:	4820      	ldr	r0, [pc, #128]	; (800300c <MX_TIM4_Init+0x110>)
 8002f8a:	f002 fcf7 	bl	800597c <HAL_TIM_IC_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f94:	f000 f8da 	bl	800314c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002f9c:	2350      	movs	r3, #80	; 0x50
 8002f9e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	4817      	ldr	r0, [pc, #92]	; (800300c <MX_TIM4_Init+0x110>)
 8002fb0:	f003 fa59 	bl	8006466 <HAL_TIM_SlaveConfigSynchro>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8002fba:	f000 f8c7 	bl	800314c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480f      	ldr	r0, [pc, #60]	; (800300c <MX_TIM4_Init+0x110>)
 8002fce:	f003 ff39 	bl	8006e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002fd8:	f000 f8b8 	bl	800314c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4806      	ldr	r0, [pc, #24]	; (800300c <MX_TIM4_Init+0x110>)
 8002ff4:	f003 f812 	bl	800601c <HAL_TIM_IC_ConfigChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8002ffe:	f000 f8a5 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	3740      	adds	r7, #64	; 0x40
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200003dc 	.word	0x200003dc
 8003010:	40000800 	.word	0x40000800

08003014 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <MX_USART3_UART_Init+0x50>)
 800301c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <MX_USART3_UART_Init+0x4c>)
 800304c:	f003 ff6a 	bl	8006f24 <HAL_UART_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003056:	f000 f879 	bl	800314c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000424 	.word	0x20000424
 8003064:	40004800 	.word	0x40004800

08003068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <MX_DMA_Init+0x38>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <MX_DMA_Init+0x38>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6153      	str	r3, [r2, #20]
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <MX_DMA_Init+0x38>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	200b      	movs	r0, #11
 800308c:	f001 f90f 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003090:	200b      	movs	r0, #11
 8003092:	f001 f928 	bl	80042e6 <HAL_NVIC_EnableIRQ>

}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000

080030a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <MX_GPIO_Init+0x9c>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2101      	movs	r1, #1
 80030ec:	4815      	ldr	r0, [pc, #84]	; (8003144 <MX_GPIO_Init+0xa0>)
 80030ee:	f001 fc87 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_Pin|S0_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80030f8:	4813      	ldr	r0, [pc, #76]	; (8003148 <MX_GPIO_Init+0xa4>)
 80030fa:	f001 fc81 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030fe:	2301      	movs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2302      	movs	r3, #2
 800310c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4619      	mov	r1, r3
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <MX_GPIO_Init+0xa0>)
 8003116:	f001 faef 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S0_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S0_Pin|S2_Pin|S3_Pin;
 800311a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800311e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003120:	2301      	movs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2302      	movs	r3, #2
 800312a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	4619      	mov	r1, r3
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <MX_GPIO_Init+0xa4>)
 8003134:	f001 fae0 	bl	80046f8 <HAL_GPIO_Init>

}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	40010800 	.word	0x40010800
 8003148:	40010c00 	.word	0x40010c00

0800314c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003150:	b672      	cpsid	i
}
 8003152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003154:	e7fe      	b.n	8003154 <Error_Handler+0x8>
	...

08003158 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_MspInit+0x5c>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_MspInit+0x5c>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6193      	str	r3, [r2, #24]
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_MspInit+0x5c>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_MspInit+0x5c>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <HAL_MspInit+0x5c>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003180:	61d3      	str	r3, [r2, #28]
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_MspInit+0x5c>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_MspInit+0x60>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_MspInit+0x60>)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010000 	.word	0x40010000

080031bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_ADC_MspInit+0xbc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d149      	bne.n	8003270 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <HAL_ADC_MspInit+0xc0>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <HAL_ADC_MspInit+0xc0>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6193      	str	r3, [r2, #24]
 80031e8:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_ADC_MspInit+0xc0>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f4:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_ADC_MspInit+0xc0>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_ADC_MspInit+0xc0>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6193      	str	r3, [r2, #24]
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_ADC_MspInit+0xc0>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800320c:	233e      	movs	r3, #62	; 0x3e
 800320e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003210:	2303      	movs	r3, #3
 8003212:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 0310 	add.w	r3, r7, #16
 8003218:	4619      	mov	r1, r3
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <HAL_ADC_MspInit+0xc4>)
 800321c:	f001 fa6c 	bl	80046f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003222:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_ADC_MspInit+0xcc>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003234:	2280      	movs	r2, #128	; 0x80
 8003236:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 800323a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800323e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003246:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 800324a:	2220      	movs	r2, #32
 800324c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003256:	f001 f861 	bl	800431c <HAL_DMA_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003260:	f7ff ff74 	bl	800314c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 8003268:	621a      	str	r2, [r3, #32]
 800326a:	4a06      	ldr	r2, [pc, #24]	; (8003284 <HAL_ADC_MspInit+0xc8>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40012400 	.word	0x40012400
 800327c:	40021000 	.word	0x40021000
 8003280:	40010800 	.word	0x40010800
 8003284:	2000026c 	.word	0x2000026c
 8003288:	40020008 	.word	0x40020008

0800328c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_I2C_MspInit+0x90>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d132      	bne.n	8003312 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_I2C_MspInit+0x94>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_I2C_MspInit+0x94>)
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_I2C_MspInit+0x94>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ca:	2312      	movs	r3, #18
 80032cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	4812      	ldr	r0, [pc, #72]	; (8003324 <HAL_I2C_MspInit+0x98>)
 80032da:	f001 fa0d 	bl	80046f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_I2C_MspInit+0x9c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_I2C_MspInit+0x9c>)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_I2C_MspInit+0x94>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <HAL_I2C_MspInit+0x94>)
 8003300:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003304:	61d3      	str	r3, [r2, #28]
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_I2C_MspInit+0x94>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40005400 	.word	0x40005400
 8003320:	40021000 	.word	0x40021000
 8003324:	40010c00 	.word	0x40010c00
 8003328:	40010000 	.word	0x40010000

0800332c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d125      	bne.n	8003398 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800334c:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	4a3e      	ldr	r2, [pc, #248]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 8003352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003356:	6193      	str	r3, [r2, #24]
 8003358:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	4a38      	ldr	r2, [pc, #224]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6193      	str	r3, [r2, #24]
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800337c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003386:	2301      	movs	r3, #1
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	482f      	ldr	r0, [pc, #188]	; (8003450 <HAL_TIM_Encoder_MspInit+0x124>)
 8003392:	f001 f9b1 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003396:	e053      	b.n	8003440 <HAL_TIM_Encoder_MspInit+0x114>
  else if(htim_encoder->Instance==TIM2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d14e      	bne.n	8003440 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6193      	str	r3, [r2, #24]
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d2:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	6193      	str	r3, [r2, #24]
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_TIM_Encoder_MspInit+0x120>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	4619      	mov	r1, r3
 80033fe:	4814      	ldr	r0, [pc, #80]	; (8003450 <HAL_TIM_Encoder_MspInit+0x124>)
 8003400:	f001 f97a 	bl	80046f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003404:	2308      	movs	r3, #8
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800340c:	2301      	movs	r3, #1
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	480f      	ldr	r0, [pc, #60]	; (8003454 <HAL_TIM_Encoder_MspInit+0x128>)
 8003418:	f001 f96e 	bl	80046f8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_TIM_Encoder_MspInit+0x12c>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343a:	4a07      	ldr	r2, [pc, #28]	; (8003458 <HAL_TIM_Encoder_MspInit+0x12c>)
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	6053      	str	r3, [r2, #4]
}
 8003440:	bf00      	nop
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40021000 	.word	0x40021000
 8003450:	40010800 	.word	0x40010800
 8003454:	40010c00 	.word	0x40010c00
 8003458:	40010000 	.word	0x40010000

0800345c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0318 	add.w	r3, r7, #24
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_TIM_Base_MspInit+0xa4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d114      	bne.n	80034a6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	61d3      	str	r3, [r2, #28]
 8003488:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2101      	movs	r1, #1
 8003498:	201d      	movs	r0, #29
 800349a:	f000 ff08 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800349e:	201d      	movs	r0, #29
 80034a0:	f000 ff21 	bl	80042e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034a4:	e028      	b.n	80034f8 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_TIM_Base_MspInit+0xac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d123      	bne.n	80034f8 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_TIM_Base_MspInit+0xa8>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034e0:	2340      	movs	r3, #64	; 0x40
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0318 	add.w	r3, r7, #24
 80034f0:	4619      	mov	r1, r3
 80034f2:	4806      	ldr	r0, [pc, #24]	; (800350c <HAL_TIM_Base_MspInit+0xb0>)
 80034f4:	f001 f900 	bl	80046f8 <HAL_GPIO_Init>
}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40000400 	.word	0x40000400
 8003504:	40021000 	.word	0x40021000
 8003508:	40000800 	.word	0x40000800
 800350c:	40010c00 	.word	0x40010c00

08003510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_TIM_MspPostInit+0x58>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d117      	bne.n	8003560 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_TIM_MspPostInit+0x5c>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_TIM_MspPostInit+0x5c>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6193      	str	r3, [r2, #24]
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_TIM_MspPostInit+0x5c>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003548:	23c0      	movs	r3, #192	; 0xc0
 800354a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2302      	movs	r3, #2
 8003552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	f107 0310 	add.w	r3, r7, #16
 8003558:	4619      	mov	r1, r3
 800355a:	4805      	ldr	r0, [pc, #20]	; (8003570 <HAL_TIM_MspPostInit+0x60>)
 800355c:	f001 f8cc 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003560:	bf00      	nop
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40000400 	.word	0x40000400
 800356c:	40021000 	.word	0x40021000
 8003570:	40010800 	.word	0x40010800

08003574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_UART_MspInit+0x8c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d131      	bne.n	80035f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_UART_MspInit+0x90>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_UART_MspInit+0x90>)
 800359a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359e:	61d3      	str	r3, [r2, #28]
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_UART_MspInit+0x90>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_UART_MspInit+0x90>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_UART_MspInit+0x90>)
 80035b2:	f043 0308 	orr.w	r3, r3, #8
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_UART_MspInit+0x90>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 0310 	add.w	r3, r7, #16
 80035d6:	4619      	mov	r1, r3
 80035d8:	480b      	ldr	r0, [pc, #44]	; (8003608 <HAL_UART_MspInit+0x94>)
 80035da:	f001 f88d 	bl	80046f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	4619      	mov	r1, r3
 80035f2:	4805      	ldr	r0, [pc, #20]	; (8003608 <HAL_UART_MspInit+0x94>)
 80035f4:	f001 f880 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035f8:	bf00      	nop
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40004800 	.word	0x40004800
 8003604:	40021000 	.word	0x40021000
 8003608:	40010c00 	.word	0x40010c00

0800360c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <NMI_Handler+0x4>

08003612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <HardFault_Handler+0x4>

08003618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <MemManage_Handler+0x4>

0800361e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <BusFault_Handler+0x4>

08003624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <UsageFault_Handler+0x4>

0800362a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003652:	f000 f949 	bl	80038e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMA1_Channel1_IRQHandler+0x10>)
 8003662:	f000 ff15 	bl	8004490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000026c 	.word	0x2000026c

08003670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM3_IRQHandler+0x10>)
 8003676:	f002 fbc9 	bl	8005e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000394 	.word	0x20000394

08003684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return 1;
 8003688:	2301      	movs	r3, #1
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <_kill>:

int _kill(int pid, int sig)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800369c:	f004 fad6 	bl	8007c4c <__errno>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2216      	movs	r2, #22
 80036a4:	601a      	str	r2, [r3, #0]
  return -1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_exit>:

void _exit (int status)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036ba:	f04f 31ff 	mov.w	r1, #4294967295
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffe7 	bl	8003692 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036c4:	e7fe      	b.n	80036c4 <_exit+0x12>

080036c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e00a      	b.n	80036ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036d8:	f3af 8000 	nop.w
 80036dc:	4601      	mov	r1, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	60ba      	str	r2, [r7, #8]
 80036e4:	b2ca      	uxtb	r2, r1
 80036e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3301      	adds	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dbf0      	blt.n	80036d8 <_read+0x12>
  }

  return len;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e009      	b.n	8003726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	60ba      	str	r2, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3301      	adds	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	dbf1      	blt.n	8003712 <_write+0x12>
  }
  return len;
 800372e:	687b      	ldr	r3, [r7, #4]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_close>:

int _close(int file)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800375e:	605a      	str	r2, [r3, #4]
  return 0;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <_isatty>:

int _isatty(int file)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003774:	2301      	movs	r3, #1
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <_sbrk+0x5c>)
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <_sbrk+0x60>)
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x64>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <_sbrk+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_sbrk+0x64>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c8:	f004 fa40 	bl	8007c4c <__errno>
 80037cc:	4603      	mov	r3, r0
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e009      	b.n	80037ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <_sbrk+0x64>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <_sbrk+0x64>)
 80037e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20005000 	.word	0x20005000
 80037f8:	00000400 	.word	0x00000400
 80037fc:	20000568 	.word	0x20000568
 8003800:	200006c0 	.word	0x200006c0

08003804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr

08003810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003810:	f7ff fff8 	bl	8003804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003814:	480b      	ldr	r0, [pc, #44]	; (8003844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003816:	490c      	ldr	r1, [pc, #48]	; (8003848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <LoopFillZerobss+0x16>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800381c:	e002      	b.n	8003824 <LoopCopyDataInit>

0800381e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003822:	3304      	adds	r3, #4

08003824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003828:	d3f9      	bcc.n	800381e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800382c:	4c09      	ldr	r4, [pc, #36]	; (8003854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003830:	e001      	b.n	8003836 <LoopFillZerobss>

08003832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003834:	3204      	adds	r2, #4

08003836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003838:	d3fb      	bcc.n	8003832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800383a:	f004 fa0d 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800383e:	f7fe ff59 	bl	80026f4 <main>
  bx lr
 8003842:	4770      	bx	lr
  ldr r0, =_sdata
 8003844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003848:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 800384c:	0800b390 	.word	0x0800b390
  ldr r2, =_sbss
 8003850:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003854:	200006bc 	.word	0x200006bc

08003858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003858:	e7fe      	b.n	8003858 <ADC1_2_IRQHandler>
	...

0800385c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_Init+0x28>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_Init+0x28>)
 8003866:	f043 0310 	orr.w	r3, r3, #16
 800386a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800386c:	2003      	movs	r0, #3
 800386e:	f000 fd13 	bl	8004298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003872:	200f      	movs	r0, #15
 8003874:	f000 f808 	bl	8003888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003878:	f7ff fc6e 	bl	8003158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000

08003888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_InitTick+0x54>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_InitTick+0x58>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389e:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fd2b 	bl	8004302 <HAL_SYSTICK_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00e      	b.n	80038d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0f      	cmp	r3, #15
 80038ba:	d80a      	bhi.n	80038d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038bc:	2200      	movs	r2, #0
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f000 fcf3 	bl	80042ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c8:	4a06      	ldr	r2, [pc, #24]	; (80038e4 <HAL_InitTick+0x5c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2000004c 	.word	0x2000004c
 80038e0:	20000054 	.word	0x20000054
 80038e4:	20000050 	.word	0x20000050

080038e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_IncTick+0x1c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_IncTick+0x20>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a03      	ldr	r2, [pc, #12]	; (8003908 <HAL_IncTick+0x20>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000054 	.word	0x20000054
 8003908:	2000056c 	.word	0x2000056c

0800390c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return uwTick;
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <HAL_GetTick+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	2000056c 	.word	0x2000056c

08003920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7ff fff0 	bl	800390c <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d005      	beq.n	8003946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_Delay+0x44>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003946:	bf00      	nop
 8003948:	f7ff ffe0 	bl	800390c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d8f7      	bhi.n	8003948 <HAL_Delay+0x28>
  {
  }
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000054 	.word	0x20000054

08003968 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0be      	b.n	8003b08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fc08 	bl	80031bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 faff 	bl	8003fb0 <ADC_ConversionStop_Disable>
 80039b2:	4603      	mov	r3, r0
 80039b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f040 8099 	bne.w	8003af6 <HAL_ADC_Init+0x18e>
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8095 	bne.w	8003af6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039d4:	f023 0302 	bic.w	r3, r3, #2
 80039d8:	f043 0202 	orr.w	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7b1b      	ldrb	r3, [r3, #12]
 80039ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80039f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a00:	d003      	beq.n	8003a0a <HAL_ADC_Init+0xa2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_ADC_Init+0xa8>
 8003a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0e:	e000      	b.n	8003a12 <HAL_ADC_Init+0xaa>
 8003a10:	2300      	movs	r3, #0
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7d1b      	ldrb	r3, [r3, #20]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d119      	bne.n	8003a54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	7b1b      	ldrb	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	035a      	lsls	r2, r3, #13
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e00b      	b.n	8003a54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	f043 0201 	orr.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <HAL_ADC_Init+0x1a8>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a84:	d003      	beq.n	8003a8e <HAL_ADC_Init+0x126>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d104      	bne.n	8003a98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	051b      	lsls	r3, r3, #20
 8003a96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_ADC_Init+0x1ac>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d10b      	bne.n	8003ad4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ad2:	e018      	b.n	8003b06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	f023 0312 	bic.w	r3, r3, #18
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003af4:	e007      	b.n	8003b06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	ffe1f7fd 	.word	0xffe1f7fd
 8003b14:	ff1f0efe 	.word	0xff1f0efe

08003b18 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a64      	ldr	r2, [pc, #400]	; (8003cc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_Start_DMA+0x24>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a63      	ldr	r2, [pc, #396]	; (8003cc4 <HAL_ADC_Start_DMA+0x1ac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d106      	bne.n	8003b4a <HAL_ADC_Start_DMA+0x32>
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 80b3 	bne.w	8003cb0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_Start_DMA+0x40>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0ae      	b.n	8003cb6 <HAL_ADC_Start_DMA+0x19e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f9cb 	bl	8003efc <ADC_Enable>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f040 809a 	bne.w	8003ca6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4e      	ldr	r2, [pc, #312]	; (8003cc4 <HAL_ADC_Start_DMA+0x1ac>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d105      	bne.n	8003b9c <HAL_ADC_Start_DMA+0x84>
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d115      	bne.n	8003bc8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d026      	beq.n	8003c04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bc6:	e01d      	b.n	8003c04 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a39      	ldr	r2, [pc, #228]	; (8003cc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_Start_DMA+0xd0>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <HAL_ADC_Start_DMA+0x1ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <HAL_ADC_Start_DMA+0xec>
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <HAL_ADC_Start_DMA+0x1a8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f023 0206 	bic.w	r2, r3, #6
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c1c:	e002      	b.n	8003c24 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_ADC_Start_DMA+0x1b0>)
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_ADC_Start_DMA+0x1b4>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <HAL_ADC_Start_DMA+0x1b8>)
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0202 	mvn.w	r2, #2
 8003c4c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a18      	ldr	r0, [r3, #32]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f000 fbaf 	bl	80043d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c80:	d108      	bne.n	8003c94 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003c90:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003c92:	e00f      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ca2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003ca4:	e006      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003cae:	e001      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40012400 	.word	0x40012400
 8003cc4:	40012800 	.word	0x40012800
 8003cc8:	08004033 	.word	0x08004033
 8003ccc:	080040af 	.word	0x080040af
 8003cd0:	080040cb 	.word	0x080040cb

08003cd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x20>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e0dc      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x1da>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b06      	cmp	r3, #6
 8003d3a:	d81c      	bhi.n	8003d76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b05      	subs	r3, #5
 8003d4e:	221f      	movs	r2, #31
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	4019      	ands	r1, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	3b05      	subs	r3, #5
 8003d68:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
 8003d74:	e03c      	b.n	8003df0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d81c      	bhi.n	8003db8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3b23      	subs	r3, #35	; 0x23
 8003d90:	221f      	movs	r2, #31
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	4019      	ands	r1, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	3b23      	subs	r3, #35	; 0x23
 8003daa:	fa00 f203 	lsl.w	r2, r0, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
 8003db6:	e01b      	b.n	8003df0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b41      	subs	r3, #65	; 0x41
 8003dca:	221f      	movs	r2, #31
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	4019      	ands	r1, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	3b41      	subs	r3, #65	; 0x41
 8003de4:	fa00 f203 	lsl.w	r2, r0, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	d91c      	bls.n	8003e32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68d9      	ldr	r1, [r3, #12]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	3b1e      	subs	r3, #30
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	4019      	ands	r1, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6898      	ldr	r0, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	3b1e      	subs	r3, #30
 8003e24:	fa00 f203 	lsl.w	r2, r0, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e019      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6919      	ldr	r1, [r3, #16]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	2207      	movs	r2, #7
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	4019      	ands	r1, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6898      	ldr	r0, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d003      	beq.n	8003e76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e72:	2b11      	cmp	r3, #17
 8003e74:	d132      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d125      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d126      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d11a      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_ADC_ConfigChannel+0x1ec>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	0c9a      	lsrs	r2, r3, #18
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ebc:	e002      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f9      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x1b2>
 8003eca:	e007      	b.n	8003edc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	f043 0220 	orr.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	40012400 	.word	0x40012400
 8003ef4:	2000004c 	.word	0x2000004c
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d040      	beq.n	8003f9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <ADC_Enable+0xac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <ADC_Enable+0xb0>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f38:	e002      	b.n	8003f40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f9      	bne.n	8003f3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f46:	f7ff fce1 	bl	800390c <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f4c:	e01f      	b.n	8003f8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f4e:	f7ff fcdd 	bl	800390c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d918      	bls.n	8003f8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d011      	beq.n	8003f8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e007      	b.n	8003f9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d1d8      	bne.n	8003f4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000004c 	.word	0x2000004c
 8003fac:	431bde83 	.word	0x431bde83

08003fb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d12e      	bne.n	8004028 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fda:	f7ff fc97 	bl	800390c <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003fe0:	e01b      	b.n	800401a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fe2:	f7ff fc93 	bl	800390c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d914      	bls.n	800401a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d0dc      	beq.n	8003fe2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004048:	2b00      	cmp	r3, #0
 800404a:	d127      	bne.n	800409c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004062:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004066:	d115      	bne.n	8004094 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fe1d 	bl	8003cd4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800409a:	e004      	b.n	80040a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff fe12 	bl	8003ce6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f043 0204 	orr.w	r2, r3, #4
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fe01 	bl	8003cf8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4906      	ldr	r1, [pc, #24]	; (8004198 <__NVIC_EnableIRQ+0x34>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	e000e100 	.word	0xe000e100

0800419c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	db0a      	blt.n	80041c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	490c      	ldr	r1, [pc, #48]	; (80041e8 <__NVIC_SetPriority+0x4c>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	0112      	lsls	r2, r2, #4
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	440b      	add	r3, r1
 80041c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c4:	e00a      	b.n	80041dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4908      	ldr	r1, [pc, #32]	; (80041ec <__NVIC_SetPriority+0x50>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	3b04      	subs	r3, #4
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	440b      	add	r3, r1
 80041da:	761a      	strb	r2, [r3, #24]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	bf28      	it	cs
 800420e:	2304      	movcs	r3, #4
 8004210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3304      	adds	r3, #4
 8004216:	2b06      	cmp	r3, #6
 8004218:	d902      	bls.n	8004220 <NVIC_EncodePriority+0x30>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3b03      	subs	r3, #3
 800421e:	e000      	b.n	8004222 <NVIC_EncodePriority+0x32>
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	401a      	ands	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004238:	f04f 31ff 	mov.w	r1, #4294967295
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	43d9      	mvns	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	4313      	orrs	r3, r2
         );
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004264:	d301      	bcc.n	800426a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <SysTick_Config+0x40>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004272:	210f      	movs	r1, #15
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	f7ff ff90 	bl	800419c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <SysTick_Config+0x40>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <SysTick_Config+0x40>)
 8004284:	2207      	movs	r2, #7
 8004286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000e010 	.word	0xe000e010

08004298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff2d 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c0:	f7ff ff42 	bl	8004148 <__NVIC_GetPriorityGrouping>
 80042c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff ff90 	bl	80041f0 <NVIC_EncodePriority>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff5f 	bl	800419c <__NVIC_SetPriority>
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff35 	bl	8004164 <__NVIC_EnableIRQ>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffa2 	bl	8004254 <SysTick_Config>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e043      	b.n	80043ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_DMA_Init+0xa8>)
 800433a:	4413      	add	r3, r2
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_DMA_Init+0xac>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_DMA_Init+0xb0>)
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004366:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800436a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	bffdfff8 	.word	0xbffdfff8
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	40020000 	.word	0x40020000

080043d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Start_IT+0x20>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e04b      	b.n	8004488 <HAL_DMA_Start_IT+0xb8>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d13a      	bne.n	800447a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f937 	bl	800469c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 020e 	orr.w	r2, r2, #14
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e00f      	b.n	8004468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 020a 	orr.w	r2, r2, #10
 8004466:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e005      	b.n	8004486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	2204      	movs	r2, #4
 80044ae:	409a      	lsls	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d04f      	beq.n	8004558 <HAL_DMA_IRQHandler+0xc8>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04a      	beq.n	8004558 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d107      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0204 	bic.w	r2, r2, #4
 80044de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a66      	ldr	r2, [pc, #408]	; (8004680 <HAL_DMA_IRQHandler+0x1f0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d029      	beq.n	800453e <HAL_DMA_IRQHandler+0xae>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a65      	ldr	r2, [pc, #404]	; (8004684 <HAL_DMA_IRQHandler+0x1f4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_DMA_IRQHandler+0xaa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a63      	ldr	r2, [pc, #396]	; (8004688 <HAL_DMA_IRQHandler+0x1f8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01a      	beq.n	8004534 <HAL_DMA_IRQHandler+0xa4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a62      	ldr	r2, [pc, #392]	; (800468c <HAL_DMA_IRQHandler+0x1fc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d012      	beq.n	800452e <HAL_DMA_IRQHandler+0x9e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a60      	ldr	r2, [pc, #384]	; (8004690 <HAL_DMA_IRQHandler+0x200>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00a      	beq.n	8004528 <HAL_DMA_IRQHandler+0x98>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5f      	ldr	r2, [pc, #380]	; (8004694 <HAL_DMA_IRQHandler+0x204>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d102      	bne.n	8004522 <HAL_DMA_IRQHandler+0x92>
 800451c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004520:	e00e      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 8004522:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004526:	e00b      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 8004528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800452c:	e008      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 800452e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004532:	e005      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	e002      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 800453a:	2340      	movs	r3, #64	; 0x40
 800453c:	e000      	b.n	8004540 <HAL_DMA_IRQHandler+0xb0>
 800453e:	2304      	movs	r3, #4
 8004540:	4a55      	ldr	r2, [pc, #340]	; (8004698 <HAL_DMA_IRQHandler+0x208>)
 8004542:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8094 	beq.w	8004676 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004556:	e08e      	b.n	8004676 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	2202      	movs	r2, #2
 800455e:	409a      	lsls	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d056      	beq.n	8004616 <HAL_DMA_IRQHandler+0x186>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d051      	beq.n	8004616 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 020a 	bic.w	r2, r2, #10
 800458e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a38      	ldr	r2, [pc, #224]	; (8004680 <HAL_DMA_IRQHandler+0x1f0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d029      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x166>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a37      	ldr	r2, [pc, #220]	; (8004684 <HAL_DMA_IRQHandler+0x1f4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x162>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a35      	ldr	r2, [pc, #212]	; (8004688 <HAL_DMA_IRQHandler+0x1f8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01a      	beq.n	80045ec <HAL_DMA_IRQHandler+0x15c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a34      	ldr	r2, [pc, #208]	; (800468c <HAL_DMA_IRQHandler+0x1fc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d012      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x156>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_DMA_IRQHandler+0x200>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00a      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x150>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a31      	ldr	r2, [pc, #196]	; (8004694 <HAL_DMA_IRQHandler+0x204>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d102      	bne.n	80045da <HAL_DMA_IRQHandler+0x14a>
 80045d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045d8:	e00e      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045de:	e00b      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e4:	e008      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ea:	e005      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f0:	e002      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045f2:	2320      	movs	r3, #32
 80045f4:	e000      	b.n	80045f8 <HAL_DMA_IRQHandler+0x168>
 80045f6:	2302      	movs	r3, #2
 80045f8:	4a27      	ldr	r2, [pc, #156]	; (8004698 <HAL_DMA_IRQHandler+0x208>)
 80045fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d034      	beq.n	8004676 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004614:	e02f      	b.n	8004676 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2208      	movs	r2, #8
 800461c:	409a      	lsls	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d028      	beq.n	8004678 <HAL_DMA_IRQHandler+0x1e8>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d023      	beq.n	8004678 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020e 	bic.w	r2, r2, #14
 800463e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f202 	lsl.w	r2, r1, r2
 800464e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
    }
  }
  return;
 8004676:	bf00      	nop
 8004678:	bf00      	nop
}
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40020008 	.word	0x40020008
 8004684:	4002001c 	.word	0x4002001c
 8004688:	40020030 	.word	0x40020030
 800468c:	40020044 	.word	0x40020044
 8004690:	40020058 	.word	0x40020058
 8004694:	4002006c 	.word	0x4002006c
 8004698:	40020000 	.word	0x40020000

0800469c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d108      	bne.n	80046dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046da:	e007      	b.n	80046ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b08b      	sub	sp, #44	; 0x2c
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470a:	e169      	b.n	80049e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800470c:	2201      	movs	r2, #1
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	f040 8158 	bne.w	80049da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4a9a      	ldr	r2, [pc, #616]	; (8004998 <HAL_GPIO_Init+0x2a0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d05e      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
 8004734:	4a98      	ldr	r2, [pc, #608]	; (8004998 <HAL_GPIO_Init+0x2a0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d875      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 800473a:	4a98      	ldr	r2, [pc, #608]	; (800499c <HAL_GPIO_Init+0x2a4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d058      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
 8004740:	4a96      	ldr	r2, [pc, #600]	; (800499c <HAL_GPIO_Init+0x2a4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d86f      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 8004746:	4a96      	ldr	r2, [pc, #600]	; (80049a0 <HAL_GPIO_Init+0x2a8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d052      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
 800474c:	4a94      	ldr	r2, [pc, #592]	; (80049a0 <HAL_GPIO_Init+0x2a8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d869      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 8004752:	4a94      	ldr	r2, [pc, #592]	; (80049a4 <HAL_GPIO_Init+0x2ac>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d04c      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
 8004758:	4a92      	ldr	r2, [pc, #584]	; (80049a4 <HAL_GPIO_Init+0x2ac>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d863      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 800475e:	4a92      	ldr	r2, [pc, #584]	; (80049a8 <HAL_GPIO_Init+0x2b0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d046      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
 8004764:	4a90      	ldr	r2, [pc, #576]	; (80049a8 <HAL_GPIO_Init+0x2b0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d85d      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 800476a:	2b12      	cmp	r3, #18
 800476c:	d82a      	bhi.n	80047c4 <HAL_GPIO_Init+0xcc>
 800476e:	2b12      	cmp	r3, #18
 8004770:	d859      	bhi.n	8004826 <HAL_GPIO_Init+0x12e>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_GPIO_Init+0x80>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047f3 	.word	0x080047f3
 800477c:	080047cd 	.word	0x080047cd
 8004780:	080047df 	.word	0x080047df
 8004784:	08004821 	.word	0x08004821
 8004788:	08004827 	.word	0x08004827
 800478c:	08004827 	.word	0x08004827
 8004790:	08004827 	.word	0x08004827
 8004794:	08004827 	.word	0x08004827
 8004798:	08004827 	.word	0x08004827
 800479c:	08004827 	.word	0x08004827
 80047a0:	08004827 	.word	0x08004827
 80047a4:	08004827 	.word	0x08004827
 80047a8:	08004827 	.word	0x08004827
 80047ac:	08004827 	.word	0x08004827
 80047b0:	08004827 	.word	0x08004827
 80047b4:	08004827 	.word	0x08004827
 80047b8:	08004827 	.word	0x08004827
 80047bc:	080047d5 	.word	0x080047d5
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	4a79      	ldr	r2, [pc, #484]	; (80049ac <HAL_GPIO_Init+0x2b4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047ca:	e02c      	b.n	8004826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	623b      	str	r3, [r7, #32]
          break;
 80047d2:	e029      	b.n	8004828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	3304      	adds	r3, #4
 80047da:	623b      	str	r3, [r7, #32]
          break;
 80047dc:	e024      	b.n	8004828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	3308      	adds	r3, #8
 80047e4:	623b      	str	r3, [r7, #32]
          break;
 80047e6:	e01f      	b.n	8004828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	330c      	adds	r3, #12
 80047ee:	623b      	str	r3, [r7, #32]
          break;
 80047f0:	e01a      	b.n	8004828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047fa:	2304      	movs	r3, #4
 80047fc:	623b      	str	r3, [r7, #32]
          break;
 80047fe:	e013      	b.n	8004828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004808:	2308      	movs	r3, #8
 800480a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	611a      	str	r2, [r3, #16]
          break;
 8004812:	e009      	b.n	8004828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004814:	2308      	movs	r3, #8
 8004816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	615a      	str	r2, [r3, #20]
          break;
 800481e:	e003      	b.n	8004828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
          break;
 8004824:	e000      	b.n	8004828 <HAL_GPIO_Init+0x130>
          break;
 8004826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	d801      	bhi.n	8004832 <HAL_GPIO_Init+0x13a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	e001      	b.n	8004836 <HAL_GPIO_Init+0x13e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d802      	bhi.n	8004844 <HAL_GPIO_Init+0x14c>
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	e002      	b.n	800484a <HAL_GPIO_Init+0x152>
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	3b08      	subs	r3, #8
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	210f      	movs	r1, #15
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	401a      	ands	r2, r3
 800485c:	6a39      	ldr	r1, [r7, #32]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	431a      	orrs	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80b1 	beq.w	80049da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004878:	4b4d      	ldr	r3, [pc, #308]	; (80049b0 <HAL_GPIO_Init+0x2b8>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	4a4c      	ldr	r2, [pc, #304]	; (80049b0 <HAL_GPIO_Init+0x2b8>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6193      	str	r3, [r2, #24]
 8004884:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_GPIO_Init+0x2b8>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004890:	4a48      	ldr	r2, [pc, #288]	; (80049b4 <HAL_GPIO_Init+0x2bc>)
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	220f      	movs	r2, #15
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <HAL_GPIO_Init+0x2c0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_GPIO_Init+0x1ec>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3f      	ldr	r2, [pc, #252]	; (80049bc <HAL_GPIO_Init+0x2c4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00d      	beq.n	80048e0 <HAL_GPIO_Init+0x1e8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3e      	ldr	r2, [pc, #248]	; (80049c0 <HAL_GPIO_Init+0x2c8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d007      	beq.n	80048dc <HAL_GPIO_Init+0x1e4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <HAL_GPIO_Init+0x2cc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <HAL_GPIO_Init+0x1e0>
 80048d4:	2303      	movs	r3, #3
 80048d6:	e006      	b.n	80048e6 <HAL_GPIO_Init+0x1ee>
 80048d8:	2304      	movs	r3, #4
 80048da:	e004      	b.n	80048e6 <HAL_GPIO_Init+0x1ee>
 80048dc:	2302      	movs	r3, #2
 80048de:	e002      	b.n	80048e6 <HAL_GPIO_Init+0x1ee>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_GPIO_Init+0x1ee>
 80048e4:	2300      	movs	r3, #0
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	f002 0203 	and.w	r2, r2, #3
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	4093      	lsls	r3, r2
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048f6:	492f      	ldr	r1, [pc, #188]	; (80049b4 <HAL_GPIO_Init+0x2bc>)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	3302      	adds	r3, #2
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	492c      	ldr	r1, [pc, #176]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	43db      	mvns	r3, r3
 8004926:	4928      	ldr	r1, [pc, #160]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004928:	4013      	ands	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004938:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	4922      	ldr	r1, [pc, #136]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
 8004944:	e006      	b.n	8004954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	43db      	mvns	r3, r3
 800494e:	491e      	ldr	r1, [pc, #120]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004950:	4013      	ands	r3, r2
 8004952:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4918      	ldr	r1, [pc, #96]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e006      	b.n	800497c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	43db      	mvns	r3, r3
 8004976:	4914      	ldr	r1, [pc, #80]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 8004978:	4013      	ands	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_GPIO_Init+0x2d0>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	e021      	b.n	80049da <HAL_GPIO_Init+0x2e2>
 8004996:	bf00      	nop
 8004998:	10320000 	.word	0x10320000
 800499c:	10310000 	.word	0x10310000
 80049a0:	10220000 	.word	0x10220000
 80049a4:	10210000 	.word	0x10210000
 80049a8:	10120000 	.word	0x10120000
 80049ac:	10110000 	.word	0x10110000
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40010800 	.word	0x40010800
 80049bc:	40010c00 	.word	0x40010c00
 80049c0:	40011000 	.word	0x40011000
 80049c4:	40011400 	.word	0x40011400
 80049c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_GPIO_Init+0x304>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	4909      	ldr	r1, [pc, #36]	; (80049fc <HAL_GPIO_Init+0x304>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	3301      	adds	r3, #1
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f ae8e 	bne.w	800470c <HAL_GPIO_Init+0x14>
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	372c      	adds	r7, #44	; 0x2c
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	40010400 	.word	0x40010400

08004a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a10:	787b      	ldrb	r3, [r7, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a1c:	e003      	b.n	8004a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	041a      	lsls	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e12b      	b.n	8004c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe fc18 	bl	800328c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a94:	f000 fcda 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8004a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4a81      	ldr	r2, [pc, #516]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d807      	bhi.n	8004ab4 <HAL_I2C_Init+0x84>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <HAL_I2C_Init+0x278>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e006      	b.n	8004ac2 <HAL_I2C_Init+0x92>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a7d      	ldr	r2, [pc, #500]	; (8004cac <HAL_I2C_Init+0x27c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0e7      	b.n	8004c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a78      	ldr	r2, [pc, #480]	; (8004cb0 <HAL_I2C_Init+0x280>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0c9b      	lsrs	r3, r3, #18
 8004ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a6a      	ldr	r2, [pc, #424]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d802      	bhi.n	8004b04 <HAL_I2C_Init+0xd4>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3301      	adds	r3, #1
 8004b02:	e009      	b.n	8004b18 <HAL_I2C_Init+0xe8>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	4a69      	ldr	r2, [pc, #420]	; (8004cb4 <HAL_I2C_Init+0x284>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	3301      	adds	r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	495c      	ldr	r1, [pc, #368]	; (8004ca4 <HAL_I2C_Init+0x274>)
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d819      	bhi.n	8004b6c <HAL_I2C_Init+0x13c>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e59      	subs	r1, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b4c:	400b      	ands	r3, r1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_I2C_Init+0x138>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1e59      	subs	r1, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	e051      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e04f      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d111      	bne.n	8004b98 <HAL_I2C_Init+0x168>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	440b      	add	r3, r1
 8004b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b86:	3301      	adds	r3, #1
 8004b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e012      	b.n	8004bbe <HAL_I2C_Init+0x18e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	0099      	lsls	r1, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Init+0x196>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e022      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10e      	bne.n	8004bec <HAL_I2C_Init+0x1bc>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e58      	subs	r0, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	440b      	add	r3, r1
 8004bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bea:	e00f      	b.n	8004c0c <HAL_I2C_Init+0x1dc>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1e58      	subs	r0, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	0099      	lsls	r1, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	6809      	ldr	r1, [r1, #0]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6911      	ldr	r1, [r2, #16]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68d2      	ldr	r2, [r2, #12]
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	000186a0 	.word	0x000186a0
 8004ca8:	001e847f 	.word	0x001e847f
 8004cac:	003d08ff 	.word	0x003d08ff
 8004cb0:	431bde83 	.word	0x431bde83
 8004cb4:	10624dd3 	.word	0x10624dd3

08004cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e272      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8087 	beq.w	8004de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd8:	4b92      	ldr	r3, [pc, #584]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d112      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d06c      	beq.n	8004de4 <HAL_RCC_OscConfig+0x12c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d168      	bne.n	8004de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e24c      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x76>
 8004d20:	4b80      	ldr	r3, [pc, #512]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7f      	ldr	r2, [pc, #508]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e02e      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x98>
 8004d36:	4b7b      	ldr	r3, [pc, #492]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7a      	ldr	r2, [pc, #488]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b78      	ldr	r3, [pc, #480]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a77      	ldr	r2, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e01d      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0xbc>
 8004d5a:	4b72      	ldr	r3, [pc, #456]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a71      	ldr	r2, [pc, #452]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b6f      	ldr	r3, [pc, #444]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6e      	ldr	r2, [pc, #440]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d74:	4b6b      	ldr	r3, [pc, #428]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a6a      	ldr	r2, [pc, #424]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a67      	ldr	r2, [pc, #412]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fe fdba 	bl	800390c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fe fdb6 	bl	800390c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e200      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0xe4>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fda6 	bl	800390c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fe fda2 	bl	800390c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	; 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1ec      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x10c>
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004df2:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d11c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
 8004e0a:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e1c0      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4939      	ldr	r1, [pc, #228]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e03a      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fe fd5b 	bl	800390c <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7fe fd57 	bl	800390c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e1a1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4927      	ldr	r1, [pc, #156]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fe fd3a 	bl	800390c <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9c:	f7fe fd36 	bl	800390c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e180      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03a      	beq.n	8004f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fe fd1a 	bl	800390c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fe fd16 	bl	800390c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e160      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004efa:	2001      	movs	r0, #1
 8004efc:	f000 face 	bl	800549c <RCC_Delay>
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fe fd00 	bl	800390c <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0e:	e00f      	b.n	8004f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fe fcfc 	bl	800390c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e146      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	42420000 	.word	0x42420000
 8004f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e9      	bne.n	8004f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a6 	beq.w	8005096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4a87      	ldr	r2, [pc, #540]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	61d3      	str	r3, [r2, #28]
 8004f66:	4b85      	ldr	r3, [pc, #532]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7e      	ldr	r2, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fe fcbd 	bl	800390c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fe fcb9 	bl	800390c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b64      	cmp	r3, #100	; 0x64
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e103      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b75      	ldr	r3, [pc, #468]	; (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x312>
 8004fbc:	4b6f      	ldr	r3, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a6e      	ldr	r2, [pc, #440]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	e02d      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x334>
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4a69      	ldr	r2, [pc, #420]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6213      	str	r3, [r2, #32]
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4a66      	ldr	r2, [pc, #408]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	e01c      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x356>
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4a60      	ldr	r2, [pc, #384]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	6213      	str	r3, [r2, #32]
 8005000:	4b5e      	ldr	r3, [pc, #376]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4a5d      	ldr	r2, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6213      	str	r3, [r2, #32]
 800500c:	e00b      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a5a      	ldr	r2, [pc, #360]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	4b58      	ldr	r3, [pc, #352]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a57      	ldr	r2, [pc, #348]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d015      	beq.n	800505a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fe fc6d 	bl	800390c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fe fc69 	bl	800390c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0b1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ee      	beq.n	8005036 <HAL_RCC_OscConfig+0x37e>
 8005058:	e014      	b.n	8005084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505a:	f7fe fc57 	bl	800390c <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fe fc53 	bl	800390c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e09b      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005078:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ee      	bne.n	8005062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d105      	bne.n	8005096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4b3c      	ldr	r3, [pc, #240]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4a3b      	ldr	r2, [pc, #236]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8087 	beq.w	80051ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 030c 	and.w	r3, r3, #12
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d061      	beq.n	8005170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d146      	bne.n	8005142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fe fc27 	bl	800390c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fe fc23 	bl	800390c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e06d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d4:	4b29      	ldr	r3, [pc, #164]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ea:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4921      	ldr	r1, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a19      	ldr	r1, [r3, #32]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	430b      	orrs	r3, r1
 800510e:	491b      	ldr	r1, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511a:	f7fe fbf7 	bl	800390c <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fe fbf3 	bl	800390c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e03d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x46a>
 8005140:	e035      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fe fbe0 	bl	800390c <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005150:	f7fe fbdc 	bl	800390c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e026      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x498>
 800516e:	e01e      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d107      	bne.n	8005188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e019      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_OscConfig+0x500>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000

080051bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0d0      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b67      	ldr	r3, [pc, #412]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0207 	bic.w	r2, r3, #7
 80051e6:	4965      	ldr	r1, [pc, #404]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b63      	ldr	r3, [pc, #396]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0b8      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005230:	4b53      	ldr	r3, [pc, #332]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800523a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b50      	ldr	r3, [pc, #320]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	494d      	ldr	r1, [pc, #308]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07f      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e073      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528a:	4b3d      	ldr	r3, [pc, #244]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06b      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4936      	ldr	r1, [pc, #216]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fe fb2e 	bl	800390c <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fe fb2a 	bl	800390c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e053      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d210      	bcs.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4922      	ldr	r1, [pc, #136]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e032      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4916      	ldr	r1, [pc, #88]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534a:	f000 f821 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490a      	ldr	r1, [pc, #40]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fa8c 	bl	8003888 <HAL_InitTick>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
 8005384:	0800add0 	.word	0x0800add0
 8005388:	2000004c 	.word	0x2000004c
 800538c:	20000050 	.word	0x20000050

08005390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCC_GetSysClockFreq+0x94>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d002      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x30>
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d003      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x36>
 80053be:	e027      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c0:	4b19      	ldr	r3, [pc, #100]	; (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 80053c2:	613b      	str	r3, [r7, #16]
      break;
 80053c4:	e027      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	0c9b      	lsrs	r3, r3, #18
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053de:	4b11      	ldr	r3, [pc, #68]	; (8005424 <HAL_RCC_GetSysClockFreq+0x94>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0c5b      	lsrs	r3, r3, #17
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 80053f2:	fb03 f202 	mul.w	r2, r3, r2
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e004      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	613b      	str	r3, [r7, #16]
      break;
 800540e:	e002      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 8005412:	613b      	str	r3, [r7, #16]
      break;
 8005414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005416:	693b      	ldr	r3, [r7, #16]
}
 8005418:	4618      	mov	r0, r3
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	007a1200 	.word	0x007a1200
 800542c:	0800ade8 	.word	0x0800ade8
 8005430:	0800adf8 	.word	0x0800adf8
 8005434:	003d0900 	.word	0x003d0900

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <HAL_RCC_GetHCLKFreq+0x10>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	2000004c 	.word	0x2000004c

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff2 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	0800ade0 	.word	0x0800ade0

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffde 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	0adb      	lsrs	r3, r3, #11
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	0800ade0 	.word	0x0800ade0

0800549c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <RCC_Delay+0x34>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <RCC_Delay+0x38>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	0a5b      	lsrs	r3, r3, #9
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054b8:	bf00      	nop
  }
  while (Delay --);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f9      	bne.n	80054b8 <RCC_Delay+0x1c>
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	2000004c 	.word	0x2000004c
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07d      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f8:	4b4f      	ldr	r3, [pc, #316]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4a4b      	ldr	r2, [pc, #300]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	61d3      	str	r3, [r2, #28]
 8005510:	4b49      	ldr	r3, [pc, #292]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	4b46      	ldr	r3, [pc, #280]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d118      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552c:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a42      	ldr	r2, [pc, #264]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005538:	f7fe f9e8 	bl	800390c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005540:	f7fe f9e4 	bl	800390c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e06d      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b3a      	ldr	r3, [pc, #232]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02e      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d027      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800557c:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005586:	4b2e      	ldr	r3, [pc, #184]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800558c:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005592:	4a29      	ldr	r2, [pc, #164]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d014      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a2:	f7fe f9b3 	bl	800390c <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fe f9af 	bl	800390c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e036      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c0:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ee      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4917      	ldr	r1, [pc, #92]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	490b      	ldr	r1, [pc, #44]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4904      	ldr	r1, [pc, #16]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	40007000 	.word	0x40007000
 8005640:	42420440 	.word	0x42420440

08005644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e041      	b.n	80056da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fd fef6 	bl	800345c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 ff9a 	bl	80065bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d001      	beq.n	80056fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e03a      	b.n	8005772 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_TIM_Base_Start_IT+0x98>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x58>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d009      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x58>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <HAL_TIM_Base_Start_IT+0x9c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x58>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a13      	ldr	r2, [pc, #76]	; (8005784 <HAL_TIM_Base_Start_IT+0xa0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d111      	bne.n	8005760 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d010      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	e007      	b.n	8005770 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40000400 	.word	0x40000400
 8005784:	40000800 	.word	0x40000800

08005788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e041      	b.n	800581e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f839 	bl	8005826 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 fef8 	bl	80065bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_TIM_PWM_Start+0x24>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e022      	b.n	80058a2 <HAL_TIM_PWM_Start+0x6a>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d109      	bne.n	8005876 <HAL_TIM_PWM_Start+0x3e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	bf14      	ite	ne
 800586e:	2301      	movne	r3, #1
 8005870:	2300      	moveq	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	e015      	b.n	80058a2 <HAL_TIM_PWM_Start+0x6a>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d109      	bne.n	8005890 <HAL_TIM_PWM_Start+0x58>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e008      	b.n	80058a2 <HAL_TIM_PWM_Start+0x6a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e05e      	b.n	8005968 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0x82>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b8:	e013      	b.n	80058e2 <HAL_TIM_PWM_Start+0xaa>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0x92>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	e00b      	b.n	80058e2 <HAL_TIM_PWM_Start+0xaa>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d8:	e003      	b.n	80058e2 <HAL_TIM_PWM_Start+0xaa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2201      	movs	r2, #1
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 fa85 	bl	8006dfa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <HAL_TIM_PWM_Start+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d107      	bne.n	800590a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <HAL_TIM_PWM_Start+0x138>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_TIM_PWM_Start+0xfa>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d009      	beq.n	8005932 <HAL_TIM_PWM_Start+0xfa>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a14      	ldr	r2, [pc, #80]	; (8005974 <HAL_TIM_PWM_Start+0x13c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIM_PWM_Start+0xfa>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a12      	ldr	r2, [pc, #72]	; (8005978 <HAL_TIM_PWM_Start+0x140>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d111      	bne.n	8005956 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b06      	cmp	r3, #6
 8005942:	d010      	beq.n	8005966 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005954:	e007      	b.n	8005966 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800

0800597c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e041      	b.n	8005a12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f839 	bl	8005a1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f000 fdfe 	bl	80065bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_IC_Start+0x1a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e013      	b.n	8005a6e <HAL_TIM_IC_Start+0x42>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_IC_Start+0x2a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e00b      	b.n	8005a6e <HAL_TIM_IC_Start+0x42>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_IC_Start+0x3a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e003      	b.n	8005a6e <HAL_TIM_IC_Start+0x42>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_TIM_IC_Start+0x54>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e013      	b.n	8005aa8 <HAL_TIM_IC_Start+0x7c>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d104      	bne.n	8005a90 <HAL_TIM_IC_Start+0x64>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e00b      	b.n	8005aa8 <HAL_TIM_IC_Start+0x7c>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_IC_Start+0x74>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e003      	b.n	8005aa8 <HAL_TIM_IC_Start+0x7c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e06d      	b.n	8005b96 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start+0x9e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	e013      	b.n	8005af2 <HAL_TIM_IC_Start+0xc6>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start+0xae>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_IC_Start+0xc6>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start+0xbe>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	e003      	b.n	8005af2 <HAL_TIM_IC_Start+0xc6>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_IC_Start+0xd6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b00:	e013      	b.n	8005b2a <HAL_TIM_IC_Start+0xfe>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_IC_Start+0xe6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b10:	e00b      	b.n	8005b2a <HAL_TIM_IC_Start+0xfe>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_IC_Start+0xf6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	e003      	b.n	8005b2a <HAL_TIM_IC_Start+0xfe>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f961 	bl	8006dfa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <HAL_TIM_IC_Start+0x174>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_TIM_IC_Start+0x134>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIM_IC_Start+0x134>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <HAL_TIM_IC_Start+0x178>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_IC_Start+0x134>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_TIM_IC_Start+0x17c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d010      	beq.n	8005b94 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e007      	b.n	8005b94 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800

08005bac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e093      	b.n	8005ce8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fd fba9 	bl	800332c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 fcdb 	bl	80065bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c4c:	f023 030c 	bic.w	r3, r3, #12
 8005c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	031b      	lsls	r3, r3, #12
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4313      	orrs	r3, r2
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d110      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d26:	7b7b      	ldrb	r3, [r7, #13]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e069      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	e031      	b.n	8005da6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d110      	bne.n	8005d6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d102      	bne.n	8005d54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d4e:	7b3b      	ldrb	r3, [r7, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e055      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d68:	e01d      	b.n	8005da6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d108      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d76:	7b7b      	ldrb	r3, [r7, #13]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d7c:	7b3b      	ldrb	r3, [r7, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e03e      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_Encoder_Start+0xc4>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d008      	beq.n	8005dc4 <HAL_TIM_Encoder_Start+0xd4>
 8005db2:	e00f      	b.n	8005dd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f81c 	bl	8006dfa <TIM_CCxChannelCmd>
      break;
 8005dc2:	e016      	b.n	8005df2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	2104      	movs	r1, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f814 	bl	8006dfa <TIM_CCxChannelCmd>
      break;
 8005dd2:	e00e      	b.n	8005df2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f80c 	bl	8006dfa <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	2104      	movs	r1, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f001 f805 	bl	8006dfa <TIM_CCxChannelCmd>
      break;
 8005df0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0202 	mvn.w	r2, #2
 8005e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb99 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb8c 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fb9b 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0204 	mvn.w	r2, #4
 8005e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fb6f 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fb62 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fb71 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fb45 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb38 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fb47 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0210 	mvn.w	r2, #16
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fb1b 	bl	8006586 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb0e 	bl	8006574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fb1d 	bl	8006598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0201 	mvn.w	r2, #1
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fc f99a 	bl	80022c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d10e      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b80      	cmp	r3, #128	; 0x80
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ffab 	bl	8006f12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fae1 	bl	80065aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b20      	cmp	r3, #32
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0220 	mvn.w	r2, #32
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 ff76 	bl	8006f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006036:	2302      	movs	r3, #2
 8006038:	e088      	b.n	800614c <HAL_TIM_IC_ConfigChannel+0x130>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006058:	f000 fd2c 	bl	8006ab4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 020c 	bic.w	r2, r2, #12
 800606a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	619a      	str	r2, [r3, #24]
 800607e:	e060      	b.n	8006142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d11c      	bne.n	80060c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006096:	f000 fd95 	bl	8006bc4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6999      	ldr	r1, [r3, #24]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	021a      	lsls	r2, r3, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e040      	b.n	8006142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11b      	bne.n	80060fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060d6:	f000 fde0 	bl	8006c9a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 020c 	bic.w	r2, r2, #12
 80060e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
 80060fc:	e021      	b.n	8006142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d11c      	bne.n	800613e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006114:	f000 fdfc 	bl	8006d10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006126:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69d9      	ldr	r1, [r3, #28]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	61da      	str	r2, [r3, #28]
 800613c:	e001      	b.n	8006142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800616e:	2302      	movs	r3, #2
 8006170:	e0ae      	b.n	80062d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	f200 809f 	bhi.w	80062c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080062c1 	.word	0x080062c1
 8006190:	080062c1 	.word	0x080062c1
 8006194:	080062c1 	.word	0x080062c1
 8006198:	080061fd 	.word	0x080061fd
 800619c:	080062c1 	.word	0x080062c1
 80061a0:	080062c1 	.word	0x080062c1
 80061a4:	080062c1 	.word	0x080062c1
 80061a8:	0800623f 	.word	0x0800623f
 80061ac:	080062c1 	.word	0x080062c1
 80061b0:	080062c1 	.word	0x080062c1
 80061b4:	080062c1 	.word	0x080062c1
 80061b8:	0800627f 	.word	0x0800627f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa5c 	bl	8006680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
      break;
 80061fa:	e064      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 faa2 	bl	800674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]
      break;
 800623c:	e043      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 faeb 	bl	8006820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0204 	bic.w	r2, r2, #4
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	61da      	str	r2, [r3, #28]
      break;
 800627c:	e023      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fb35 	bl	80068f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69d9      	ldr	r1, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	61da      	str	r2, [r3, #28]
      break;
 80062be:	e002      	b.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	75fb      	strb	r3, [r7, #23]
      break;
 80062c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIM_ConfigClockSource+0x1c>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e0b4      	b.n	800645e <HAL_TIM_ConfigClockSource+0x186>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800631a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632c:	d03e      	beq.n	80063ac <HAL_TIM_ConfigClockSource+0xd4>
 800632e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006332:	f200 8087 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	f000 8086 	beq.w	800644a <HAL_TIM_ConfigClockSource+0x172>
 800633e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006342:	d87f      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 8006344:	2b70      	cmp	r3, #112	; 0x70
 8006346:	d01a      	beq.n	800637e <HAL_TIM_ConfigClockSource+0xa6>
 8006348:	2b70      	cmp	r3, #112	; 0x70
 800634a:	d87b      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 800634c:	2b60      	cmp	r3, #96	; 0x60
 800634e:	d050      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006350:	2b60      	cmp	r3, #96	; 0x60
 8006352:	d877      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b50      	cmp	r3, #80	; 0x50
 8006356:	d03c      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006358:	2b50      	cmp	r3, #80	; 0x50
 800635a:	d873      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d058      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x13a>
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d86f      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d064      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x15a>
 8006368:	2b30      	cmp	r3, #48	; 0x30
 800636a:	d86b      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b20      	cmp	r3, #32
 800636e:	d060      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x15a>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d867      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d05c      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	2b10      	cmp	r3, #16
 800637a:	d05a      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x15a>
 800637c:	e062      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	f000 fd15 	bl	8006dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	609a      	str	r2, [r3, #8]
      break;
 80063aa:	e04f      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	f000 fcfe 	bl	8006dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ce:	609a      	str	r2, [r3, #8]
      break;
 80063d0:	e03c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	461a      	mov	r2, r3
 80063e0:	f000 fbc2 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2150      	movs	r1, #80	; 0x50
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fccc 	bl	8006d88 <TIM_ITRx_SetConfig>
      break;
 80063f0:	e02c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 fc1c 	bl	8006c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2160      	movs	r1, #96	; 0x60
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fcbc 	bl	8006d88 <TIM_ITRx_SetConfig>
      break;
 8006410:	e01c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	461a      	mov	r2, r3
 8006420:	f000 fba2 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2140      	movs	r1, #64	; 0x40
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fcac 	bl	8006d88 <TIM_ITRx_SetConfig>
      break;
 8006430:	e00c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f000 fca3 	bl	8006d88 <TIM_ITRx_SetConfig>
      break;
 8006442:	e003      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e000      	b.n	800644c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800644a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_SlaveConfigSynchro+0x18>
 800647a:	2302      	movs	r3, #2
 800647c:	e031      	b.n	80064e2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa7d 	bl	8006990 <TIM_SlaveTimer_SetConfig>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e018      	b.n	80064e2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064be:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064ce:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d831      	bhi.n	8006564 <HAL_TIM_ReadCapturedValue+0x78>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006565 	.word	0x08006565
 8006510:	08006565 	.word	0x08006565
 8006514:	08006565 	.word	0x08006565
 8006518:	08006547 	.word	0x08006547
 800651c:	08006565 	.word	0x08006565
 8006520:	08006565 	.word	0x08006565
 8006524:	08006565 	.word	0x08006565
 8006528:	08006551 	.word	0x08006551
 800652c:	08006565 	.word	0x08006565
 8006530:	08006565 	.word	0x08006565
 8006534:	08006565 	.word	0x08006565
 8006538:	0800655b 	.word	0x0800655b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006542:	60fb      	str	r3, [r7, #12]

      break;
 8006544:	e00f      	b.n	8006566 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	60fb      	str	r3, [r7, #12]

      break;
 800654e:	e00a      	b.n	8006566 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	60fb      	str	r3, [r7, #12]

      break;
 8006558:	e005      	b.n	8006566 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	60fb      	str	r3, [r7, #12]

      break;
 8006562:	e000      	b.n	8006566 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006564:	bf00      	nop
  }

  return tmpreg;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop

08006574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr

080065bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a29      	ldr	r2, [pc, #164]	; (8006674 <TIM_Base_SetConfig+0xb8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00b      	beq.n	80065ec <TIM_Base_SetConfig+0x30>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065da:	d007      	beq.n	80065ec <TIM_Base_SetConfig+0x30>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a26      	ldr	r2, [pc, #152]	; (8006678 <TIM_Base_SetConfig+0xbc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0x30>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <TIM_Base_SetConfig+0xc0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <TIM_Base_SetConfig+0xb8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_Base_SetConfig+0x62>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d007      	beq.n	800661e <TIM_Base_SetConfig+0x62>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <TIM_Base_SetConfig+0xbc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_Base_SetConfig+0x62>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a18      	ldr	r2, [pc, #96]	; (800667c <TIM_Base_SetConfig+0xc0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d108      	bne.n	8006630 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a07      	ldr	r2, [pc, #28]	; (8006674 <TIM_Base_SetConfig+0xb8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800

08006680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 0302 	bic.w	r3, r3, #2
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <TIM_OC1_SetConfig+0xc8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d10c      	bne.n	80066f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f023 0308 	bic.w	r3, r3, #8
 80066e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0304 	bic.w	r3, r3, #4
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <TIM_OC1_SetConfig+0xc8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d111      	bne.n	8006722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800670c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40012c00 	.word	0x40012c00

0800674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 0210 	bic.w	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0320 	bic.w	r3, r3, #32
 8006796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <TIM_OC2_SetConfig+0xd0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d10d      	bne.n	80067c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <TIM_OC2_SetConfig+0xd0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d113      	bne.n	80067f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	40012c00 	.word	0x40012c00

08006820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <TIM_OC3_SetConfig+0xd0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10d      	bne.n	800689a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <TIM_OC3_SetConfig+0xd0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d113      	bne.n	80068ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00

080068f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	031b      	lsls	r3, r3, #12
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	4313      	orrs	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a0f      	ldr	r2, [pc, #60]	; (800698c <TIM_OC4_SetConfig+0x98>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d109      	bne.n	8006968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	019b      	lsls	r3, r3, #6
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00

08006990 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b70      	cmp	r3, #112	; 0x70
 80069d8:	d01a      	beq.n	8006a10 <TIM_SlaveTimer_SetConfig+0x80>
 80069da:	2b70      	cmp	r3, #112	; 0x70
 80069dc:	d860      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 80069de:	2b60      	cmp	r3, #96	; 0x60
 80069e0:	d054      	beq.n	8006a8c <TIM_SlaveTimer_SetConfig+0xfc>
 80069e2:	2b60      	cmp	r3, #96	; 0x60
 80069e4:	d85c      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 80069e6:	2b50      	cmp	r3, #80	; 0x50
 80069e8:	d046      	beq.n	8006a78 <TIM_SlaveTimer_SetConfig+0xe8>
 80069ea:	2b50      	cmp	r3, #80	; 0x50
 80069ec:	d858      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d019      	beq.n	8006a26 <TIM_SlaveTimer_SetConfig+0x96>
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d854      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 80069f6:	2b30      	cmp	r3, #48	; 0x30
 80069f8:	d055      	beq.n	8006aa6 <TIM_SlaveTimer_SetConfig+0x116>
 80069fa:	2b30      	cmp	r3, #48	; 0x30
 80069fc:	d850      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d051      	beq.n	8006aa6 <TIM_SlaveTimer_SetConfig+0x116>
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	d84c      	bhi.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d04d      	beq.n	8006aa6 <TIM_SlaveTimer_SetConfig+0x116>
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d04b      	beq.n	8006aa6 <TIM_SlaveTimer_SetConfig+0x116>
 8006a0e:	e047      	b.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006a20:	f000 f9cc 	bl	8006dbc <TIM_ETR_SetConfig>
      break;
 8006a24:	e040      	b.n	8006aa8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d101      	bne.n	8006a32 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e03b      	b.n	8006aaa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a58:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
      break;
 8006a76:	e017      	b.n	8006aa8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a84:	461a      	mov	r2, r3
 8006a86:	f000 f86f 	bl	8006b68 <TIM_TI1_ConfigInputStage>
      break;
 8006a8a:	e00d      	b.n	8006aa8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f000 f8cf 	bl	8006c3c <TIM_TI2_ConfigInputStage>
      break;
 8006a9e:	e003      	b.n	8006aa8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa4:	e000      	b.n	8006aa8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006aa6:	bf00      	nop
  }

  return status;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f023 0201 	bic.w	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <TIM_TI1_SetConfig+0xa8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_TI1_SetConfig+0x46>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d007      	beq.n	8006afa <TIM_TI1_SetConfig+0x46>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a1c      	ldr	r2, [pc, #112]	; (8006b60 <TIM_TI1_SetConfig+0xac>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_TI1_SetConfig+0x46>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <TIM_TI1_SetConfig+0xb0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d101      	bne.n	8006afe <TIM_TI1_SetConfig+0x4a>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <TIM_TI1_SetConfig+0x4c>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e003      	b.n	8006b1e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f023 030a 	bic.w	r3, r3, #10
 8006b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 030a 	and.w	r3, r3, #10
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800

08006b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 030a 	bic.w	r3, r3, #10
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f023 0210 	bic.w	r2, r3, #16
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	031b      	lsls	r3, r3, #12
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f023 0210 	bic.w	r2, r3, #16
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	031b      	lsls	r3, r3, #12
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	031b      	lsls	r3, r3, #12
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	031b      	lsls	r3, r3, #12
 8006d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f043 0307 	orr.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	609a      	str	r2, [r3, #8]
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1a      	ldr	r2, [r3, #32]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	401a      	ands	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e046      	b.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d009      	beq.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a10      	ldr	r2, [pc, #64]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800

08006f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bc80      	pop	{r7}
 8006f22:	4770      	bx	lr

08006f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fc fb12 	bl	8003574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2224      	movs	r2, #36	; 0x24
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f82b 	bl	8006fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	695a      	ldr	r2, [r3, #20]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ffe:	f023 030c 	bic.w	r3, r3, #12
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	430b      	orrs	r3, r1
 800700a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <UART_SetConfig+0x114>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d103      	bne.n	8007034 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fe fa22 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	e002      	b.n	800703a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007034:	f7fe fa0a 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8007038:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009a      	lsls	r2, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	4a22      	ldr	r2, [pc, #136]	; (80070dc <UART_SetConfig+0x118>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	0119      	lsls	r1, r3, #4
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009a      	lsls	r2, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007070:	4b1a      	ldr	r3, [pc, #104]	; (80070dc <UART_SetConfig+0x118>)
 8007072:	fba3 0302 	umull	r0, r3, r3, r2
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2064      	movs	r0, #100	; 0x64
 800707a:	fb00 f303 	mul.w	r3, r0, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	3332      	adds	r3, #50	; 0x32
 8007084:	4a15      	ldr	r2, [pc, #84]	; (80070dc <UART_SetConfig+0x118>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007090:	4419      	add	r1, r3
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009a      	lsls	r2, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <UART_SetConfig+0x118>)
 80070aa:	fba3 0302 	umull	r0, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	2064      	movs	r0, #100	; 0x64
 80070b2:	fb00 f303 	mul.w	r3, r0, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	3332      	adds	r3, #50	; 0x32
 80070bc:	4a07      	ldr	r2, [pc, #28]	; (80070dc <UART_SetConfig+0x118>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f003 020f 	and.w	r2, r3, #15
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	440a      	add	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40013800 	.word	0x40013800
 80070dc:	51eb851f 	.word	0x51eb851f

080070e0 <__cvt>:
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e6:	461f      	mov	r7, r3
 80070e8:	bfbb      	ittet	lt
 80070ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	461f      	movlt	r7, r3
 80070f0:	2300      	movge	r3, #0
 80070f2:	232d      	movlt	r3, #45	; 0x2d
 80070f4:	b088      	sub	sp, #32
 80070f6:	4614      	mov	r4, r2
 80070f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070fc:	7013      	strb	r3, [r2, #0]
 80070fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007100:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007104:	f023 0820 	bic.w	r8, r3, #32
 8007108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800710c:	d005      	beq.n	800711a <__cvt+0x3a>
 800710e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007112:	d100      	bne.n	8007116 <__cvt+0x36>
 8007114:	3501      	adds	r5, #1
 8007116:	2302      	movs	r3, #2
 8007118:	e000      	b.n	800711c <__cvt+0x3c>
 800711a:	2303      	movs	r3, #3
 800711c:	aa07      	add	r2, sp, #28
 800711e:	9204      	str	r2, [sp, #16]
 8007120:	aa06      	add	r2, sp, #24
 8007122:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007126:	e9cd 3500 	strd	r3, r5, [sp]
 800712a:	4622      	mov	r2, r4
 800712c:	463b      	mov	r3, r7
 800712e:	f000 fe53 	bl	8007dd8 <_dtoa_r>
 8007132:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007136:	4606      	mov	r6, r0
 8007138:	d102      	bne.n	8007140 <__cvt+0x60>
 800713a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713c:	07db      	lsls	r3, r3, #31
 800713e:	d522      	bpl.n	8007186 <__cvt+0xa6>
 8007140:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007144:	eb06 0905 	add.w	r9, r6, r5
 8007148:	d110      	bne.n	800716c <__cvt+0x8c>
 800714a:	7833      	ldrb	r3, [r6, #0]
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d10a      	bne.n	8007166 <__cvt+0x86>
 8007150:	2200      	movs	r2, #0
 8007152:	2300      	movs	r3, #0
 8007154:	4620      	mov	r0, r4
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800715c:	b918      	cbnz	r0, 8007166 <__cvt+0x86>
 800715e:	f1c5 0501 	rsb	r5, r5, #1
 8007162:	f8ca 5000 	str.w	r5, [sl]
 8007166:	f8da 3000 	ldr.w	r3, [sl]
 800716a:	4499      	add	r9, r3
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4620      	mov	r0, r4
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8007178:	b108      	cbz	r0, 800717e <__cvt+0x9e>
 800717a:	f8cd 901c 	str.w	r9, [sp, #28]
 800717e:	2230      	movs	r2, #48	; 0x30
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	454b      	cmp	r3, r9
 8007184:	d307      	bcc.n	8007196 <__cvt+0xb6>
 8007186:	4630      	mov	r0, r6
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	b008      	add	sp, #32
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	9107      	str	r1, [sp, #28]
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e7f0      	b.n	8007180 <__cvt+0xa0>

0800719e <__exponent>:
 800719e:	4603      	mov	r3, r0
 80071a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071a2:	2900      	cmp	r1, #0
 80071a4:	f803 2b02 	strb.w	r2, [r3], #2
 80071a8:	bfb6      	itet	lt
 80071aa:	222d      	movlt	r2, #45	; 0x2d
 80071ac:	222b      	movge	r2, #43	; 0x2b
 80071ae:	4249      	neglt	r1, r1
 80071b0:	2909      	cmp	r1, #9
 80071b2:	7042      	strb	r2, [r0, #1]
 80071b4:	dd2a      	ble.n	800720c <__exponent+0x6e>
 80071b6:	f10d 0207 	add.w	r2, sp, #7
 80071ba:	4617      	mov	r7, r2
 80071bc:	260a      	movs	r6, #10
 80071be:	fb91 f5f6 	sdiv	r5, r1, r6
 80071c2:	4694      	mov	ip, r2
 80071c4:	fb06 1415 	mls	r4, r6, r5, r1
 80071c8:	3430      	adds	r4, #48	; 0x30
 80071ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80071ce:	460c      	mov	r4, r1
 80071d0:	2c63      	cmp	r4, #99	; 0x63
 80071d2:	4629      	mov	r1, r5
 80071d4:	f102 32ff 	add.w	r2, r2, #4294967295
 80071d8:	dcf1      	bgt.n	80071be <__exponent+0x20>
 80071da:	3130      	adds	r1, #48	; 0x30
 80071dc:	f1ac 0402 	sub.w	r4, ip, #2
 80071e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071e4:	4622      	mov	r2, r4
 80071e6:	1c41      	adds	r1, r0, #1
 80071e8:	42ba      	cmp	r2, r7
 80071ea:	d30a      	bcc.n	8007202 <__exponent+0x64>
 80071ec:	f10d 0209 	add.w	r2, sp, #9
 80071f0:	eba2 020c 	sub.w	r2, r2, ip
 80071f4:	42bc      	cmp	r4, r7
 80071f6:	bf88      	it	hi
 80071f8:	2200      	movhi	r2, #0
 80071fa:	4413      	add	r3, r2
 80071fc:	1a18      	subs	r0, r3, r0
 80071fe:	b003      	add	sp, #12
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007202:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007206:	f801 5f01 	strb.w	r5, [r1, #1]!
 800720a:	e7ed      	b.n	80071e8 <__exponent+0x4a>
 800720c:	2330      	movs	r3, #48	; 0x30
 800720e:	3130      	adds	r1, #48	; 0x30
 8007210:	7083      	strb	r3, [r0, #2]
 8007212:	70c1      	strb	r1, [r0, #3]
 8007214:	1d03      	adds	r3, r0, #4
 8007216:	e7f1      	b.n	80071fc <__exponent+0x5e>

08007218 <_printf_float>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	b091      	sub	sp, #68	; 0x44
 800721e:	460c      	mov	r4, r1
 8007220:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007224:	4616      	mov	r6, r2
 8007226:	461f      	mov	r7, r3
 8007228:	4605      	mov	r5, r0
 800722a:	f000 fcc5 	bl	8007bb8 <_localeconv_r>
 800722e:	6803      	ldr	r3, [r0, #0]
 8007230:	4618      	mov	r0, r3
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	f7f8 ff8c 	bl	8000150 <strlen>
 8007238:	2300      	movs	r3, #0
 800723a:	930e      	str	r3, [sp, #56]	; 0x38
 800723c:	f8d8 3000 	ldr.w	r3, [r8]
 8007240:	900a      	str	r0, [sp, #40]	; 0x28
 8007242:	3307      	adds	r3, #7
 8007244:	f023 0307 	bic.w	r3, r3, #7
 8007248:	f103 0208 	add.w	r2, r3, #8
 800724c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007250:	f8d4 b000 	ldr.w	fp, [r4]
 8007254:	f8c8 2000 	str.w	r2, [r8]
 8007258:	e9d3 a800 	ldrd	sl, r8, [r3]
 800725c:	4652      	mov	r2, sl
 800725e:	4643      	mov	r3, r8
 8007260:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007264:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007268:	930b      	str	r3, [sp, #44]	; 0x2c
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	4650      	mov	r0, sl
 8007270:	4b9c      	ldr	r3, [pc, #624]	; (80074e4 <_printf_float+0x2cc>)
 8007272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007274:	f7f9 fbca 	bl	8000a0c <__aeabi_dcmpun>
 8007278:	bb70      	cbnz	r0, 80072d8 <_printf_float+0xc0>
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	4650      	mov	r0, sl
 8007280:	4b98      	ldr	r3, [pc, #608]	; (80074e4 <_printf_float+0x2cc>)
 8007282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007284:	f7f9 fba4 	bl	80009d0 <__aeabi_dcmple>
 8007288:	bb30      	cbnz	r0, 80072d8 <_printf_float+0xc0>
 800728a:	2200      	movs	r2, #0
 800728c:	2300      	movs	r3, #0
 800728e:	4650      	mov	r0, sl
 8007290:	4641      	mov	r1, r8
 8007292:	f7f9 fb93 	bl	80009bc <__aeabi_dcmplt>
 8007296:	b110      	cbz	r0, 800729e <_printf_float+0x86>
 8007298:	232d      	movs	r3, #45	; 0x2d
 800729a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729e:	4a92      	ldr	r2, [pc, #584]	; (80074e8 <_printf_float+0x2d0>)
 80072a0:	4b92      	ldr	r3, [pc, #584]	; (80074ec <_printf_float+0x2d4>)
 80072a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072a6:	bf94      	ite	ls
 80072a8:	4690      	movls	r8, r2
 80072aa:	4698      	movhi	r8, r3
 80072ac:	2303      	movs	r3, #3
 80072ae:	f04f 0a00 	mov.w	sl, #0
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	f02b 0304 	bic.w	r3, fp, #4
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	4633      	mov	r3, r6
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	9700      	str	r7, [sp, #0]
 80072c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80072c4:	f000 f9d6 	bl	8007674 <_printf_common>
 80072c8:	3001      	adds	r0, #1
 80072ca:	f040 8090 	bne.w	80073ee <_printf_float+0x1d6>
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	b011      	add	sp, #68	; 0x44
 80072d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d8:	4652      	mov	r2, sl
 80072da:	4643      	mov	r3, r8
 80072dc:	4650      	mov	r0, sl
 80072de:	4641      	mov	r1, r8
 80072e0:	f7f9 fb94 	bl	8000a0c <__aeabi_dcmpun>
 80072e4:	b148      	cbz	r0, 80072fa <_printf_float+0xe2>
 80072e6:	f1b8 0f00 	cmp.w	r8, #0
 80072ea:	bfb8      	it	lt
 80072ec:	232d      	movlt	r3, #45	; 0x2d
 80072ee:	4a80      	ldr	r2, [pc, #512]	; (80074f0 <_printf_float+0x2d8>)
 80072f0:	bfb8      	it	lt
 80072f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072f6:	4b7f      	ldr	r3, [pc, #508]	; (80074f4 <_printf_float+0x2dc>)
 80072f8:	e7d3      	b.n	80072a2 <_printf_float+0x8a>
 80072fa:	6863      	ldr	r3, [r4, #4]
 80072fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	d142      	bne.n	800738a <_printf_float+0x172>
 8007304:	2306      	movs	r3, #6
 8007306:	6063      	str	r3, [r4, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	9206      	str	r2, [sp, #24]
 800730c:	aa0e      	add	r2, sp, #56	; 0x38
 800730e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007312:	aa0d      	add	r2, sp, #52	; 0x34
 8007314:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007318:	9203      	str	r2, [sp, #12]
 800731a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800731e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	6863      	ldr	r3, [r4, #4]
 8007326:	4652      	mov	r2, sl
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4628      	mov	r0, r5
 800732c:	4643      	mov	r3, r8
 800732e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007330:	f7ff fed6 	bl	80070e0 <__cvt>
 8007334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007336:	4680      	mov	r8, r0
 8007338:	2947      	cmp	r1, #71	; 0x47
 800733a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800733c:	d108      	bne.n	8007350 <_printf_float+0x138>
 800733e:	1cc8      	adds	r0, r1, #3
 8007340:	db02      	blt.n	8007348 <_printf_float+0x130>
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	4299      	cmp	r1, r3
 8007346:	dd40      	ble.n	80073ca <_printf_float+0x1b2>
 8007348:	f1a9 0902 	sub.w	r9, r9, #2
 800734c:	fa5f f989 	uxtb.w	r9, r9
 8007350:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007354:	d81f      	bhi.n	8007396 <_printf_float+0x17e>
 8007356:	464a      	mov	r2, r9
 8007358:	3901      	subs	r1, #1
 800735a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800735e:	910d      	str	r1, [sp, #52]	; 0x34
 8007360:	f7ff ff1d 	bl	800719e <__exponent>
 8007364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007366:	4682      	mov	sl, r0
 8007368:	1813      	adds	r3, r2, r0
 800736a:	2a01      	cmp	r2, #1
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	dc02      	bgt.n	8007376 <_printf_float+0x15e>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	07d2      	lsls	r2, r2, #31
 8007374:	d501      	bpl.n	800737a <_printf_float+0x162>
 8007376:	3301      	adds	r3, #1
 8007378:	6123      	str	r3, [r4, #16]
 800737a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800737e:	2b00      	cmp	r3, #0
 8007380:	d09b      	beq.n	80072ba <_printf_float+0xa2>
 8007382:	232d      	movs	r3, #45	; 0x2d
 8007384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007388:	e797      	b.n	80072ba <_printf_float+0xa2>
 800738a:	2947      	cmp	r1, #71	; 0x47
 800738c:	d1bc      	bne.n	8007308 <_printf_float+0xf0>
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1ba      	bne.n	8007308 <_printf_float+0xf0>
 8007392:	2301      	movs	r3, #1
 8007394:	e7b7      	b.n	8007306 <_printf_float+0xee>
 8007396:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800739a:	d118      	bne.n	80073ce <_printf_float+0x1b6>
 800739c:	2900      	cmp	r1, #0
 800739e:	6863      	ldr	r3, [r4, #4]
 80073a0:	dd0b      	ble.n	80073ba <_printf_float+0x1a2>
 80073a2:	6121      	str	r1, [r4, #16]
 80073a4:	b913      	cbnz	r3, 80073ac <_printf_float+0x194>
 80073a6:	6822      	ldr	r2, [r4, #0]
 80073a8:	07d0      	lsls	r0, r2, #31
 80073aa:	d502      	bpl.n	80073b2 <_printf_float+0x19a>
 80073ac:	3301      	adds	r3, #1
 80073ae:	440b      	add	r3, r1
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	f04f 0a00 	mov.w	sl, #0
 80073b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80073b8:	e7df      	b.n	800737a <_printf_float+0x162>
 80073ba:	b913      	cbnz	r3, 80073c2 <_printf_float+0x1aa>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	07d2      	lsls	r2, r2, #31
 80073c0:	d501      	bpl.n	80073c6 <_printf_float+0x1ae>
 80073c2:	3302      	adds	r3, #2
 80073c4:	e7f4      	b.n	80073b0 <_printf_float+0x198>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e7f2      	b.n	80073b0 <_printf_float+0x198>
 80073ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d0:	4299      	cmp	r1, r3
 80073d2:	db05      	blt.n	80073e0 <_printf_float+0x1c8>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	6121      	str	r1, [r4, #16]
 80073d8:	07d8      	lsls	r0, r3, #31
 80073da:	d5ea      	bpl.n	80073b2 <_printf_float+0x19a>
 80073dc:	1c4b      	adds	r3, r1, #1
 80073de:	e7e7      	b.n	80073b0 <_printf_float+0x198>
 80073e0:	2900      	cmp	r1, #0
 80073e2:	bfcc      	ite	gt
 80073e4:	2201      	movgt	r2, #1
 80073e6:	f1c1 0202 	rsble	r2, r1, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	e7e0      	b.n	80073b0 <_printf_float+0x198>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	055a      	lsls	r2, r3, #21
 80073f2:	d407      	bmi.n	8007404 <_printf_float+0x1ec>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	4642      	mov	r2, r8
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d12b      	bne.n	800745a <_printf_float+0x242>
 8007402:	e764      	b.n	80072ce <_printf_float+0xb6>
 8007404:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007408:	f240 80dd 	bls.w	80075c6 <_printf_float+0x3ae>
 800740c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	f7f9 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8007418:	2800      	cmp	r0, #0
 800741a:	d033      	beq.n	8007484 <_printf_float+0x26c>
 800741c:	2301      	movs	r3, #1
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	4a35      	ldr	r2, [pc, #212]	; (80074f8 <_printf_float+0x2e0>)
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	f43f af51 	beq.w	80072ce <_printf_float+0xb6>
 800742c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007430:	429a      	cmp	r2, r3
 8007432:	db02      	blt.n	800743a <_printf_float+0x222>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	07d8      	lsls	r0, r3, #31
 8007438:	d50f      	bpl.n	800745a <_printf_float+0x242>
 800743a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800743e:	4631      	mov	r1, r6
 8007440:	4628      	mov	r0, r5
 8007442:	47b8      	blx	r7
 8007444:	3001      	adds	r0, #1
 8007446:	f43f af42 	beq.w	80072ce <_printf_float+0xb6>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	f104 091a 	add.w	r9, r4, #26
 8007452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007454:	3b01      	subs	r3, #1
 8007456:	4543      	cmp	r3, r8
 8007458:	dc09      	bgt.n	800746e <_printf_float+0x256>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	079b      	lsls	r3, r3, #30
 800745e:	f100 8104 	bmi.w	800766a <_printf_float+0x452>
 8007462:	68e0      	ldr	r0, [r4, #12]
 8007464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007466:	4298      	cmp	r0, r3
 8007468:	bfb8      	it	lt
 800746a:	4618      	movlt	r0, r3
 800746c:	e731      	b.n	80072d2 <_printf_float+0xba>
 800746e:	2301      	movs	r3, #1
 8007470:	464a      	mov	r2, r9
 8007472:	4631      	mov	r1, r6
 8007474:	4628      	mov	r0, r5
 8007476:	47b8      	blx	r7
 8007478:	3001      	adds	r0, #1
 800747a:	f43f af28 	beq.w	80072ce <_printf_float+0xb6>
 800747e:	f108 0801 	add.w	r8, r8, #1
 8007482:	e7e6      	b.n	8007452 <_printf_float+0x23a>
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	2b00      	cmp	r3, #0
 8007488:	dc38      	bgt.n	80074fc <_printf_float+0x2e4>
 800748a:	2301      	movs	r3, #1
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <_printf_float+0x2e0>)
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f af1a 	beq.w	80072ce <_printf_float+0xb6>
 800749a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800749e:	4313      	orrs	r3, r2
 80074a0:	d102      	bne.n	80074a8 <_printf_float+0x290>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	07d9      	lsls	r1, r3, #31
 80074a6:	d5d8      	bpl.n	800745a <_printf_float+0x242>
 80074a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	47b8      	blx	r7
 80074b2:	3001      	adds	r0, #1
 80074b4:	f43f af0b 	beq.w	80072ce <_printf_float+0xb6>
 80074b8:	f04f 0900 	mov.w	r9, #0
 80074bc:	f104 0a1a 	add.w	sl, r4, #26
 80074c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c2:	425b      	negs	r3, r3
 80074c4:	454b      	cmp	r3, r9
 80074c6:	dc01      	bgt.n	80074cc <_printf_float+0x2b4>
 80074c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ca:	e794      	b.n	80073f6 <_printf_float+0x1de>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4652      	mov	r2, sl
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f aef9 	beq.w	80072ce <_printf_float+0xb6>
 80074dc:	f109 0901 	add.w	r9, r9, #1
 80074e0:	e7ee      	b.n	80074c0 <_printf_float+0x2a8>
 80074e2:	bf00      	nop
 80074e4:	7fefffff 	.word	0x7fefffff
 80074e8:	0800adfa 	.word	0x0800adfa
 80074ec:	0800adfe 	.word	0x0800adfe
 80074f0:	0800ae02 	.word	0x0800ae02
 80074f4:	0800ae06 	.word	0x0800ae06
 80074f8:	0800ae0a 	.word	0x0800ae0a
 80074fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007500:	429a      	cmp	r2, r3
 8007502:	bfa8      	it	ge
 8007504:	461a      	movge	r2, r3
 8007506:	2a00      	cmp	r2, #0
 8007508:	4691      	mov	r9, r2
 800750a:	dc37      	bgt.n	800757c <_printf_float+0x364>
 800750c:	f04f 0b00 	mov.w	fp, #0
 8007510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007514:	f104 021a 	add.w	r2, r4, #26
 8007518:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800751c:	ebaa 0309 	sub.w	r3, sl, r9
 8007520:	455b      	cmp	r3, fp
 8007522:	dc33      	bgt.n	800758c <_printf_float+0x374>
 8007524:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007528:	429a      	cmp	r2, r3
 800752a:	db3b      	blt.n	80075a4 <_printf_float+0x38c>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	07da      	lsls	r2, r3, #31
 8007530:	d438      	bmi.n	80075a4 <_printf_float+0x38c>
 8007532:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007536:	eba2 0903 	sub.w	r9, r2, r3
 800753a:	eba2 020a 	sub.w	r2, r2, sl
 800753e:	4591      	cmp	r9, r2
 8007540:	bfa8      	it	ge
 8007542:	4691      	movge	r9, r2
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	dc34      	bgt.n	80075b4 <_printf_float+0x39c>
 800754a:	f04f 0800 	mov.w	r8, #0
 800754e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007552:	f104 0a1a 	add.w	sl, r4, #26
 8007556:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	eba3 0309 	sub.w	r3, r3, r9
 8007560:	4543      	cmp	r3, r8
 8007562:	f77f af7a 	ble.w	800745a <_printf_float+0x242>
 8007566:	2301      	movs	r3, #1
 8007568:	4652      	mov	r2, sl
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f aeac 	beq.w	80072ce <_printf_float+0xb6>
 8007576:	f108 0801 	add.w	r8, r8, #1
 800757a:	e7ec      	b.n	8007556 <_printf_float+0x33e>
 800757c:	4613      	mov	r3, r2
 800757e:	4631      	mov	r1, r6
 8007580:	4642      	mov	r2, r8
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	d1c0      	bne.n	800750c <_printf_float+0x2f4>
 800758a:	e6a0      	b.n	80072ce <_printf_float+0xb6>
 800758c:	2301      	movs	r3, #1
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	920b      	str	r2, [sp, #44]	; 0x2c
 8007594:	47b8      	blx	r7
 8007596:	3001      	adds	r0, #1
 8007598:	f43f ae99 	beq.w	80072ce <_printf_float+0xb6>
 800759c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800759e:	f10b 0b01 	add.w	fp, fp, #1
 80075a2:	e7b9      	b.n	8007518 <_printf_float+0x300>
 80075a4:	4631      	mov	r1, r6
 80075a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	d1bf      	bne.n	8007532 <_printf_float+0x31a>
 80075b2:	e68c      	b.n	80072ce <_printf_float+0xb6>
 80075b4:	464b      	mov	r3, r9
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	eb08 020a 	add.w	r2, r8, sl
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	d1c2      	bne.n	800754a <_printf_float+0x332>
 80075c4:	e683      	b.n	80072ce <_printf_float+0xb6>
 80075c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c8:	2a01      	cmp	r2, #1
 80075ca:	dc01      	bgt.n	80075d0 <_printf_float+0x3b8>
 80075cc:	07db      	lsls	r3, r3, #31
 80075ce:	d539      	bpl.n	8007644 <_printf_float+0x42c>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4642      	mov	r2, r8
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b8      	blx	r7
 80075da:	3001      	adds	r0, #1
 80075dc:	f43f ae77 	beq.w	80072ce <_printf_float+0xb6>
 80075e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f ae6f 	beq.w	80072ce <_printf_float+0xb6>
 80075f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80075fc:	f7f9 f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8007600:	b9d8      	cbnz	r0, 800763a <_printf_float+0x422>
 8007602:	f109 33ff 	add.w	r3, r9, #4294967295
 8007606:	f108 0201 	add.w	r2, r8, #1
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d10e      	bne.n	8007632 <_printf_float+0x41a>
 8007614:	e65b      	b.n	80072ce <_printf_float+0xb6>
 8007616:	2301      	movs	r3, #1
 8007618:	464a      	mov	r2, r9
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f ae54 	beq.w	80072ce <_printf_float+0xb6>
 8007626:	f108 0801 	add.w	r8, r8, #1
 800762a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800762c:	3b01      	subs	r3, #1
 800762e:	4543      	cmp	r3, r8
 8007630:	dcf1      	bgt.n	8007616 <_printf_float+0x3fe>
 8007632:	4653      	mov	r3, sl
 8007634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007638:	e6de      	b.n	80073f8 <_printf_float+0x1e0>
 800763a:	f04f 0800 	mov.w	r8, #0
 800763e:	f104 091a 	add.w	r9, r4, #26
 8007642:	e7f2      	b.n	800762a <_printf_float+0x412>
 8007644:	2301      	movs	r3, #1
 8007646:	4642      	mov	r2, r8
 8007648:	e7df      	b.n	800760a <_printf_float+0x3f2>
 800764a:	2301      	movs	r3, #1
 800764c:	464a      	mov	r2, r9
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae3a 	beq.w	80072ce <_printf_float+0xb6>
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007662:	1a5b      	subs	r3, r3, r1
 8007664:	4543      	cmp	r3, r8
 8007666:	dcf0      	bgt.n	800764a <_printf_float+0x432>
 8007668:	e6fb      	b.n	8007462 <_printf_float+0x24a>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	f104 0919 	add.w	r9, r4, #25
 8007672:	e7f4      	b.n	800765e <_printf_float+0x446>

08007674 <_printf_common>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	4616      	mov	r6, r2
 800767a:	4699      	mov	r9, r3
 800767c:	688a      	ldr	r2, [r1, #8]
 800767e:	690b      	ldr	r3, [r1, #16]
 8007680:	4607      	mov	r7, r0
 8007682:	4293      	cmp	r3, r2
 8007684:	bfb8      	it	lt
 8007686:	4613      	movlt	r3, r2
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800768e:	460c      	mov	r4, r1
 8007690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007694:	b10a      	cbz	r2, 800769a <_printf_common+0x26>
 8007696:	3301      	adds	r3, #1
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	0699      	lsls	r1, r3, #26
 800769e:	bf42      	ittt	mi
 80076a0:	6833      	ldrmi	r3, [r6, #0]
 80076a2:	3302      	addmi	r3, #2
 80076a4:	6033      	strmi	r3, [r6, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	f015 0506 	ands.w	r5, r5, #6
 80076ac:	d106      	bne.n	80076bc <_printf_common+0x48>
 80076ae:	f104 0a19 	add.w	sl, r4, #25
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dc2b      	bgt.n	8007714 <_printf_common+0xa0>
 80076bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c0:	1e13      	subs	r3, r2, #0
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	0692      	lsls	r2, r2, #26
 80076ca:	d430      	bmi.n	800772e <_printf_common+0xba>
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d023      	beq.n	8007722 <_printf_common+0xae>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	f003 0306 	and.w	r3, r3, #6
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	bf14      	ite	ne
 80076e6:	2500      	movne	r5, #0
 80076e8:	6833      	ldreq	r3, [r6, #0]
 80076ea:	f04f 0600 	mov.w	r6, #0
 80076ee:	bf08      	it	eq
 80076f0:	68e5      	ldreq	r5, [r4, #12]
 80076f2:	f104 041a 	add.w	r4, r4, #26
 80076f6:	bf08      	it	eq
 80076f8:	1aed      	subeq	r5, r5, r3
 80076fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076fe:	bf08      	it	eq
 8007700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007704:	4293      	cmp	r3, r2
 8007706:	bfc4      	itt	gt
 8007708:	1a9b      	subgt	r3, r3, r2
 800770a:	18ed      	addgt	r5, r5, r3
 800770c:	42b5      	cmp	r5, r6
 800770e:	d11a      	bne.n	8007746 <_printf_common+0xd2>
 8007710:	2000      	movs	r0, #0
 8007712:	e008      	b.n	8007726 <_printf_common+0xb2>
 8007714:	2301      	movs	r3, #1
 8007716:	4652      	mov	r2, sl
 8007718:	4649      	mov	r1, r9
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	3001      	adds	r0, #1
 8007720:	d103      	bne.n	800772a <_printf_common+0xb6>
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	3501      	adds	r5, #1
 800772c:	e7c1      	b.n	80076b2 <_printf_common+0x3e>
 800772e:	2030      	movs	r0, #48	; 0x30
 8007730:	18e1      	adds	r1, r4, r3
 8007732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800773c:	4422      	add	r2, r4
 800773e:	3302      	adds	r3, #2
 8007740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007744:	e7c2      	b.n	80076cc <_printf_common+0x58>
 8007746:	2301      	movs	r3, #1
 8007748:	4622      	mov	r2, r4
 800774a:	4649      	mov	r1, r9
 800774c:	4638      	mov	r0, r7
 800774e:	47c0      	blx	r8
 8007750:	3001      	adds	r0, #1
 8007752:	d0e6      	beq.n	8007722 <_printf_common+0xae>
 8007754:	3601      	adds	r6, #1
 8007756:	e7d9      	b.n	800770c <_printf_common+0x98>

08007758 <_printf_i>:
 8007758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	7e0f      	ldrb	r7, [r1, #24]
 800775e:	4691      	mov	r9, r2
 8007760:	2f78      	cmp	r7, #120	; 0x78
 8007762:	4680      	mov	r8, r0
 8007764:	460c      	mov	r4, r1
 8007766:	469a      	mov	sl, r3
 8007768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800776a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800776e:	d807      	bhi.n	8007780 <_printf_i+0x28>
 8007770:	2f62      	cmp	r7, #98	; 0x62
 8007772:	d80a      	bhi.n	800778a <_printf_i+0x32>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f000 80d5 	beq.w	8007924 <_printf_i+0x1cc>
 800777a:	2f58      	cmp	r7, #88	; 0x58
 800777c:	f000 80c1 	beq.w	8007902 <_printf_i+0x1aa>
 8007780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007788:	e03a      	b.n	8007800 <_printf_i+0xa8>
 800778a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800778e:	2b15      	cmp	r3, #21
 8007790:	d8f6      	bhi.n	8007780 <_printf_i+0x28>
 8007792:	a101      	add	r1, pc, #4	; (adr r1, 8007798 <_printf_i+0x40>)
 8007794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007798:	080077f1 	.word	0x080077f1
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007781 	.word	0x08007781
 80077a4:	08007781 	.word	0x08007781
 80077a8:	08007781 	.word	0x08007781
 80077ac:	08007781 	.word	0x08007781
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007781 	.word	0x08007781
 80077b8:	08007781 	.word	0x08007781
 80077bc:	08007781 	.word	0x08007781
 80077c0:	08007781 	.word	0x08007781
 80077c4:	0800790b 	.word	0x0800790b
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080078c5 	.word	0x080078c5
 80077d0:	08007781 	.word	0x08007781
 80077d4:	08007781 	.word	0x08007781
 80077d8:	0800792d 	.word	0x0800792d
 80077dc:	08007781 	.word	0x08007781
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007781 	.word	0x08007781
 80077e8:	08007781 	.word	0x08007781
 80077ec:	080078cd 	.word	0x080078cd
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	602a      	str	r2, [r5, #0]
 80077f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007800:	2301      	movs	r3, #1
 8007802:	e0a0      	b.n	8007946 <_printf_i+0x1ee>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	0607      	lsls	r7, r0, #24
 800780a:	f103 0104 	add.w	r1, r3, #4
 800780e:	6029      	str	r1, [r5, #0]
 8007810:	d501      	bpl.n	8007816 <_printf_i+0xbe>
 8007812:	681e      	ldr	r6, [r3, #0]
 8007814:	e003      	b.n	800781e <_printf_i+0xc6>
 8007816:	0646      	lsls	r6, r0, #25
 8007818:	d5fb      	bpl.n	8007812 <_printf_i+0xba>
 800781a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800781e:	2e00      	cmp	r6, #0
 8007820:	da03      	bge.n	800782a <_printf_i+0xd2>
 8007822:	232d      	movs	r3, #45	; 0x2d
 8007824:	4276      	negs	r6, r6
 8007826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782a:	230a      	movs	r3, #10
 800782c:	4859      	ldr	r0, [pc, #356]	; (8007994 <_printf_i+0x23c>)
 800782e:	e012      	b.n	8007856 <_printf_i+0xfe>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	6029      	str	r1, [r5, #0]
 8007838:	0605      	lsls	r5, r0, #24
 800783a:	d501      	bpl.n	8007840 <_printf_i+0xe8>
 800783c:	681e      	ldr	r6, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0xee>
 8007840:	0641      	lsls	r1, r0, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0xe4>
 8007844:	881e      	ldrh	r6, [r3, #0]
 8007846:	2f6f      	cmp	r7, #111	; 0x6f
 8007848:	bf0c      	ite	eq
 800784a:	2308      	moveq	r3, #8
 800784c:	230a      	movne	r3, #10
 800784e:	4851      	ldr	r0, [pc, #324]	; (8007994 <_printf_i+0x23c>)
 8007850:	2100      	movs	r1, #0
 8007852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007856:	6865      	ldr	r5, [r4, #4]
 8007858:	2d00      	cmp	r5, #0
 800785a:	bfa8      	it	ge
 800785c:	6821      	ldrge	r1, [r4, #0]
 800785e:	60a5      	str	r5, [r4, #8]
 8007860:	bfa4      	itt	ge
 8007862:	f021 0104 	bicge.w	r1, r1, #4
 8007866:	6021      	strge	r1, [r4, #0]
 8007868:	b90e      	cbnz	r6, 800786e <_printf_i+0x116>
 800786a:	2d00      	cmp	r5, #0
 800786c:	d04b      	beq.n	8007906 <_printf_i+0x1ae>
 800786e:	4615      	mov	r5, r2
 8007870:	fbb6 f1f3 	udiv	r1, r6, r3
 8007874:	fb03 6711 	mls	r7, r3, r1, r6
 8007878:	5dc7      	ldrb	r7, [r0, r7]
 800787a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800787e:	4637      	mov	r7, r6
 8007880:	42bb      	cmp	r3, r7
 8007882:	460e      	mov	r6, r1
 8007884:	d9f4      	bls.n	8007870 <_printf_i+0x118>
 8007886:	2b08      	cmp	r3, #8
 8007888:	d10b      	bne.n	80078a2 <_printf_i+0x14a>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	07de      	lsls	r6, r3, #31
 800788e:	d508      	bpl.n	80078a2 <_printf_i+0x14a>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6861      	ldr	r1, [r4, #4]
 8007894:	4299      	cmp	r1, r3
 8007896:	bfde      	ittt	le
 8007898:	2330      	movle	r3, #48	; 0x30
 800789a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800789e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a2:	1b52      	subs	r2, r2, r5
 80078a4:	6122      	str	r2, [r4, #16]
 80078a6:	464b      	mov	r3, r9
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	aa03      	add	r2, sp, #12
 80078b2:	f7ff fedf 	bl	8007674 <_printf_common>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d14a      	bne.n	8007950 <_printf_i+0x1f8>
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	b004      	add	sp, #16
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	2778      	movs	r7, #120	; 0x78
 80078ce:	4832      	ldr	r0, [pc, #200]	; (8007998 <_printf_i+0x240>)
 80078d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	6829      	ldr	r1, [r5, #0]
 80078d8:	061f      	lsls	r7, r3, #24
 80078da:	f851 6b04 	ldr.w	r6, [r1], #4
 80078de:	d402      	bmi.n	80078e6 <_printf_i+0x18e>
 80078e0:	065f      	lsls	r7, r3, #25
 80078e2:	bf48      	it	mi
 80078e4:	b2b6      	uxthmi	r6, r6
 80078e6:	07df      	lsls	r7, r3, #31
 80078e8:	bf48      	it	mi
 80078ea:	f043 0320 	orrmi.w	r3, r3, #32
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	bf48      	it	mi
 80078f2:	6023      	strmi	r3, [r4, #0]
 80078f4:	b91e      	cbnz	r6, 80078fe <_printf_i+0x1a6>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f023 0320 	bic.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2310      	movs	r3, #16
 8007900:	e7a6      	b.n	8007850 <_printf_i+0xf8>
 8007902:	4824      	ldr	r0, [pc, #144]	; (8007994 <_printf_i+0x23c>)
 8007904:	e7e4      	b.n	80078d0 <_printf_i+0x178>
 8007906:	4615      	mov	r5, r2
 8007908:	e7bd      	b.n	8007886 <_printf_i+0x12e>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	6826      	ldr	r6, [r4, #0]
 800790e:	1d18      	adds	r0, r3, #4
 8007910:	6961      	ldr	r1, [r4, #20]
 8007912:	6028      	str	r0, [r5, #0]
 8007914:	0635      	lsls	r5, r6, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	d501      	bpl.n	800791e <_printf_i+0x1c6>
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0x1cc>
 800791e:	0670      	lsls	r0, r6, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0x1c2>
 8007922:	8019      	strh	r1, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	4615      	mov	r5, r2
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	e7bc      	b.n	80078a6 <_printf_i+0x14e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	2100      	movs	r1, #0
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	602a      	str	r2, [r5, #0]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f9b4 	bl	8007ca6 <memchr>
 800793e:	b108      	cbz	r0, 8007944 <_printf_i+0x1ec>
 8007940:	1b40      	subs	r0, r0, r5
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794e:	e7aa      	b.n	80078a6 <_printf_i+0x14e>
 8007950:	462a      	mov	r2, r5
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	47d0      	blx	sl
 800795a:	3001      	adds	r0, #1
 800795c:	d0ad      	beq.n	80078ba <_printf_i+0x162>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	079b      	lsls	r3, r3, #30
 8007962:	d413      	bmi.n	800798c <_printf_i+0x234>
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	4298      	cmp	r0, r3
 800796a:	bfb8      	it	lt
 800796c:	4618      	movlt	r0, r3
 800796e:	e7a6      	b.n	80078be <_printf_i+0x166>
 8007970:	2301      	movs	r3, #1
 8007972:	4632      	mov	r2, r6
 8007974:	4649      	mov	r1, r9
 8007976:	4640      	mov	r0, r8
 8007978:	47d0      	blx	sl
 800797a:	3001      	adds	r0, #1
 800797c:	d09d      	beq.n	80078ba <_printf_i+0x162>
 800797e:	3501      	adds	r5, #1
 8007980:	68e3      	ldr	r3, [r4, #12]
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	1a5b      	subs	r3, r3, r1
 8007986:	42ab      	cmp	r3, r5
 8007988:	dcf2      	bgt.n	8007970 <_printf_i+0x218>
 800798a:	e7eb      	b.n	8007964 <_printf_i+0x20c>
 800798c:	2500      	movs	r5, #0
 800798e:	f104 0619 	add.w	r6, r4, #25
 8007992:	e7f5      	b.n	8007980 <_printf_i+0x228>
 8007994:	0800ae0c 	.word	0x0800ae0c
 8007998:	0800ae1d 	.word	0x0800ae1d

0800799c <std>:
 800799c:	2300      	movs	r3, #0
 800799e:	b510      	push	{r4, lr}
 80079a0:	4604      	mov	r4, r0
 80079a2:	e9c0 3300 	strd	r3, r3, [r0]
 80079a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079aa:	6083      	str	r3, [r0, #8]
 80079ac:	8181      	strh	r1, [r0, #12]
 80079ae:	6643      	str	r3, [r0, #100]	; 0x64
 80079b0:	81c2      	strh	r2, [r0, #14]
 80079b2:	6183      	str	r3, [r0, #24]
 80079b4:	4619      	mov	r1, r3
 80079b6:	2208      	movs	r2, #8
 80079b8:	305c      	adds	r0, #92	; 0x5c
 80079ba:	f000 f8f4 	bl	8007ba6 <memset>
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <std+0x58>)
 80079c0:	6224      	str	r4, [r4, #32]
 80079c2:	6263      	str	r3, [r4, #36]	; 0x24
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <std+0x5c>)
 80079c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <std+0x60>)
 80079ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079cc:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <std+0x64>)
 80079ce:	6323      	str	r3, [r4, #48]	; 0x30
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <std+0x68>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d006      	beq.n	80079e4 <std+0x48>
 80079d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80079da:	4294      	cmp	r4, r2
 80079dc:	d002      	beq.n	80079e4 <std+0x48>
 80079de:	33d0      	adds	r3, #208	; 0xd0
 80079e0:	429c      	cmp	r4, r3
 80079e2:	d105      	bne.n	80079f0 <std+0x54>
 80079e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	f000 b958 	b.w	8007ca0 <__retarget_lock_init_recursive>
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	bf00      	nop
 80079f4:	08007b21 	.word	0x08007b21
 80079f8:	08007b43 	.word	0x08007b43
 80079fc:	08007b7b 	.word	0x08007b7b
 8007a00:	08007b9f 	.word	0x08007b9f
 8007a04:	20000570 	.word	0x20000570

08007a08 <stdio_exit_handler>:
 8007a08:	4a02      	ldr	r2, [pc, #8]	; (8007a14 <stdio_exit_handler+0xc>)
 8007a0a:	4903      	ldr	r1, [pc, #12]	; (8007a18 <stdio_exit_handler+0x10>)
 8007a0c:	4803      	ldr	r0, [pc, #12]	; (8007a1c <stdio_exit_handler+0x14>)
 8007a0e:	f000 b869 	b.w	8007ae4 <_fwalk_sglue>
 8007a12:	bf00      	nop
 8007a14:	20000058 	.word	0x20000058
 8007a18:	0800938d 	.word	0x0800938d
 8007a1c:	20000064 	.word	0x20000064

08007a20 <cleanup_stdio>:
 8007a20:	6841      	ldr	r1, [r0, #4]
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <cleanup_stdio+0x34>)
 8007a24:	b510      	push	{r4, lr}
 8007a26:	4299      	cmp	r1, r3
 8007a28:	4604      	mov	r4, r0
 8007a2a:	d001      	beq.n	8007a30 <cleanup_stdio+0x10>
 8007a2c:	f001 fcae 	bl	800938c <_fflush_r>
 8007a30:	68a1      	ldr	r1, [r4, #8]
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <cleanup_stdio+0x38>)
 8007a34:	4299      	cmp	r1, r3
 8007a36:	d002      	beq.n	8007a3e <cleanup_stdio+0x1e>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f001 fca7 	bl	800938c <_fflush_r>
 8007a3e:	68e1      	ldr	r1, [r4, #12]
 8007a40:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <cleanup_stdio+0x3c>)
 8007a42:	4299      	cmp	r1, r3
 8007a44:	d004      	beq.n	8007a50 <cleanup_stdio+0x30>
 8007a46:	4620      	mov	r0, r4
 8007a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a4c:	f001 bc9e 	b.w	800938c <_fflush_r>
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	bf00      	nop
 8007a54:	20000570 	.word	0x20000570
 8007a58:	200005d8 	.word	0x200005d8
 8007a5c:	20000640 	.word	0x20000640

08007a60 <global_stdio_init.part.0>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <global_stdio_init.part.0+0x30>)
 8007a64:	4c0b      	ldr	r4, [pc, #44]	; (8007a94 <global_stdio_init.part.0+0x34>)
 8007a66:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <global_stdio_init.part.0+0x38>)
 8007a68:	4620      	mov	r0, r4
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	2104      	movs	r1, #4
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7ff ff94 	bl	800799c <std>
 8007a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007a78:	2201      	movs	r2, #1
 8007a7a:	2109      	movs	r1, #9
 8007a7c:	f7ff ff8e 	bl	800799c <std>
 8007a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007a84:	2202      	movs	r2, #2
 8007a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8a:	2112      	movs	r1, #18
 8007a8c:	f7ff bf86 	b.w	800799c <std>
 8007a90:	200006a8 	.word	0x200006a8
 8007a94:	20000570 	.word	0x20000570
 8007a98:	08007a09 	.word	0x08007a09

08007a9c <__sfp_lock_acquire>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <__sfp_lock_acquire+0x8>)
 8007a9e:	f000 b900 	b.w	8007ca2 <__retarget_lock_acquire_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	200006b1 	.word	0x200006b1

08007aa8 <__sfp_lock_release>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <__sfp_lock_release+0x8>)
 8007aaa:	f000 b8fb 	b.w	8007ca4 <__retarget_lock_release_recursive>
 8007aae:	bf00      	nop
 8007ab0:	200006b1 	.word	0x200006b1

08007ab4 <__sinit>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f7ff fff0 	bl	8007a9c <__sfp_lock_acquire>
 8007abc:	6a23      	ldr	r3, [r4, #32]
 8007abe:	b11b      	cbz	r3, 8007ac8 <__sinit+0x14>
 8007ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac4:	f7ff bff0 	b.w	8007aa8 <__sfp_lock_release>
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <__sinit+0x28>)
 8007aca:	6223      	str	r3, [r4, #32]
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <__sinit+0x2c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f5      	bne.n	8007ac0 <__sinit+0xc>
 8007ad4:	f7ff ffc4 	bl	8007a60 <global_stdio_init.part.0>
 8007ad8:	e7f2      	b.n	8007ac0 <__sinit+0xc>
 8007ada:	bf00      	nop
 8007adc:	08007a21 	.word	0x08007a21
 8007ae0:	200006a8 	.word	0x200006a8

08007ae4 <_fwalk_sglue>:
 8007ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae8:	4607      	mov	r7, r0
 8007aea:	4688      	mov	r8, r1
 8007aec:	4614      	mov	r4, r2
 8007aee:	2600      	movs	r6, #0
 8007af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007af4:	f1b9 0901 	subs.w	r9, r9, #1
 8007af8:	d505      	bpl.n	8007b06 <_fwalk_sglue+0x22>
 8007afa:	6824      	ldr	r4, [r4, #0]
 8007afc:	2c00      	cmp	r4, #0
 8007afe:	d1f7      	bne.n	8007af0 <_fwalk_sglue+0xc>
 8007b00:	4630      	mov	r0, r6
 8007b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d907      	bls.n	8007b1c <_fwalk_sglue+0x38>
 8007b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b10:	3301      	adds	r3, #1
 8007b12:	d003      	beq.n	8007b1c <_fwalk_sglue+0x38>
 8007b14:	4629      	mov	r1, r5
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c0      	blx	r8
 8007b1a:	4306      	orrs	r6, r0
 8007b1c:	3568      	adds	r5, #104	; 0x68
 8007b1e:	e7e9      	b.n	8007af4 <_fwalk_sglue+0x10>

08007b20 <__sread>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	460c      	mov	r4, r1
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	f000 f86c 	bl	8007c04 <_read_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	bfab      	itete	ge
 8007b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b32:	89a3      	ldrhlt	r3, [r4, #12]
 8007b34:	181b      	addge	r3, r3, r0
 8007b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b3a:	bfac      	ite	ge
 8007b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b3e:	81a3      	strhlt	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__swrite>:
 8007b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b46:	461f      	mov	r7, r3
 8007b48:	898b      	ldrh	r3, [r1, #12]
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	05db      	lsls	r3, r3, #23
 8007b4e:	460c      	mov	r4, r1
 8007b50:	4616      	mov	r6, r2
 8007b52:	d505      	bpl.n	8007b60 <__swrite+0x1e>
 8007b54:	2302      	movs	r3, #2
 8007b56:	2200      	movs	r2, #0
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	f000 f840 	bl	8007be0 <_lseek_r>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	4632      	mov	r2, r6
 8007b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	463b      	mov	r3, r7
 8007b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b76:	f000 b857 	b.w	8007c28 <_write_r>

08007b7a <__sseek>:
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b82:	f000 f82d 	bl	8007be0 <_lseek_r>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	bf15      	itete	ne
 8007b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b96:	81a3      	strheq	r3, [r4, #12]
 8007b98:	bf18      	it	ne
 8007b9a:	81a3      	strhne	r3, [r4, #12]
 8007b9c:	bd10      	pop	{r4, pc}

08007b9e <__sclose>:
 8007b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba2:	f000 b80d 	b.w	8007bc0 <_close_r>

08007ba6 <memset>:
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4402      	add	r2, r0
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d100      	bne.n	8007bb0 <memset+0xa>
 8007bae:	4770      	bx	lr
 8007bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb4:	e7f9      	b.n	8007baa <memset+0x4>
	...

08007bb8 <_localeconv_r>:
 8007bb8:	4800      	ldr	r0, [pc, #0]	; (8007bbc <_localeconv_r+0x4>)
 8007bba:	4770      	bx	lr
 8007bbc:	200001a4 	.word	0x200001a4

08007bc0 <_close_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	4d05      	ldr	r5, [pc, #20]	; (8007bdc <_close_r+0x1c>)
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	f7fb fdb4 	bl	8003738 <_close>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_close_r+0x1a>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_close_r+0x1a>
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	200006ac 	.word	0x200006ac

08007be0 <_lseek_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	2200      	movs	r2, #0
 8007bea:	4d05      	ldr	r5, [pc, #20]	; (8007c00 <_lseek_r+0x20>)
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7fb fdc6 	bl	8003780 <_lseek>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_lseek_r+0x1e>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_lseek_r+0x1e>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	200006ac 	.word	0x200006ac

08007c04 <_read_r>:
 8007c04:	b538      	push	{r3, r4, r5, lr}
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4d05      	ldr	r5, [pc, #20]	; (8007c24 <_read_r+0x20>)
 8007c10:	602a      	str	r2, [r5, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f7fb fd57 	bl	80036c6 <_read>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_read_r+0x1e>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_read_r+0x1e>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	200006ac 	.word	0x200006ac

08007c28 <_write_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	2200      	movs	r2, #0
 8007c32:	4d05      	ldr	r5, [pc, #20]	; (8007c48 <_write_r+0x20>)
 8007c34:	602a      	str	r2, [r5, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f7fb fd62 	bl	8003700 <_write>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_write_r+0x1e>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_write_r+0x1e>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	200006ac 	.word	0x200006ac

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	200000b0 	.word	0x200000b0

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	4d0c      	ldr	r5, [pc, #48]	; (8007c90 <__libc_init_array+0x38>)
 8007c5e:	4c0d      	ldr	r4, [pc, #52]	; (8007c94 <__libc_init_array+0x3c>)
 8007c60:	1b64      	subs	r4, r4, r5
 8007c62:	10a4      	asrs	r4, r4, #2
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	f003 f8a6 	bl	800adb8 <_init>
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	4d0a      	ldr	r5, [pc, #40]	; (8007c98 <__libc_init_array+0x40>)
 8007c70:	4c0a      	ldr	r4, [pc, #40]	; (8007c9c <__libc_init_array+0x44>)
 8007c72:	1b64      	subs	r4, r4, r5
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	0800b388 	.word	0x0800b388
 8007c94:	0800b388 	.word	0x0800b388
 8007c98:	0800b388 	.word	0x0800b388
 8007c9c:	0800b38c 	.word	0x0800b38c

08007ca0 <__retarget_lock_init_recursive>:
 8007ca0:	4770      	bx	lr

08007ca2 <__retarget_lock_acquire_recursive>:
 8007ca2:	4770      	bx	lr

08007ca4 <__retarget_lock_release_recursive>:
 8007ca4:	4770      	bx	lr

08007ca6 <memchr>:
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	b2c9      	uxtb	r1, r1
 8007cac:	4402      	add	r2, r0
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	d101      	bne.n	8007cb8 <memchr+0x12>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e003      	b.n	8007cc0 <memchr+0x1a>
 8007cb8:	7804      	ldrb	r4, [r0, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	428c      	cmp	r4, r1
 8007cbe:	d1f6      	bne.n	8007cae <memchr+0x8>
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <quorem>:
 8007cc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc6:	6903      	ldr	r3, [r0, #16]
 8007cc8:	690c      	ldr	r4, [r1, #16]
 8007cca:	4607      	mov	r7, r0
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	db7f      	blt.n	8007dd0 <quorem+0x10e>
 8007cd0:	3c01      	subs	r4, #1
 8007cd2:	f100 0514 	add.w	r5, r0, #20
 8007cd6:	f101 0814 	add.w	r8, r1, #20
 8007cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	429a      	cmp	r2, r3
 8007cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cf8:	d331      	bcc.n	8007d5e <quorem+0x9c>
 8007cfa:	f04f 0e00 	mov.w	lr, #0
 8007cfe:	4640      	mov	r0, r8
 8007d00:	46ac      	mov	ip, r5
 8007d02:	46f2      	mov	sl, lr
 8007d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d08:	b293      	uxth	r3, r2
 8007d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d12:	0c1a      	lsrs	r2, r3, #16
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	fb06 220e 	mla	r2, r6, lr, r2
 8007d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d1e:	f8dc a000 	ldr.w	sl, [ip]
 8007d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d26:	fa1f fa8a 	uxth.w	sl, sl
 8007d2a:	4453      	add	r3, sl
 8007d2c:	f8dc a000 	ldr.w	sl, [ip]
 8007d30:	b292      	uxth	r2, r2
 8007d32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d40:	4581      	cmp	r9, r0
 8007d42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d46:	f84c 3b04 	str.w	r3, [ip], #4
 8007d4a:	d2db      	bcs.n	8007d04 <quorem+0x42>
 8007d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d50:	b92b      	cbnz	r3, 8007d5e <quorem+0x9c>
 8007d52:	9b01      	ldr	r3, [sp, #4]
 8007d54:	3b04      	subs	r3, #4
 8007d56:	429d      	cmp	r5, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	d32d      	bcc.n	8007db8 <quorem+0xf6>
 8007d5c:	613c      	str	r4, [r7, #16]
 8007d5e:	4638      	mov	r0, r7
 8007d60:	f001 f994 	bl	800908c <__mcmp>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	db23      	blt.n	8007db0 <quorem+0xee>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d72:	f8d1 c000 	ldr.w	ip, [r1]
 8007d76:	b293      	uxth	r3, r2
 8007d78:	1ac3      	subs	r3, r0, r3
 8007d7a:	0c12      	lsrs	r2, r2, #16
 8007d7c:	fa1f f08c 	uxth.w	r0, ip
 8007d80:	4403      	add	r3, r0
 8007d82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007d86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d90:	45c1      	cmp	r9, r8
 8007d92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d96:	f841 3b04 	str.w	r3, [r1], #4
 8007d9a:	d2e8      	bcs.n	8007d6e <quorem+0xac>
 8007d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da4:	b922      	cbnz	r2, 8007db0 <quorem+0xee>
 8007da6:	3b04      	subs	r3, #4
 8007da8:	429d      	cmp	r5, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	d30a      	bcc.n	8007dc4 <quorem+0x102>
 8007dae:	613c      	str	r4, [r7, #16]
 8007db0:	4630      	mov	r0, r6
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	3b04      	subs	r3, #4
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d1cd      	bne.n	8007d5c <quorem+0x9a>
 8007dc0:	3c01      	subs	r4, #1
 8007dc2:	e7c8      	b.n	8007d56 <quorem+0x94>
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	3b04      	subs	r3, #4
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d1f0      	bne.n	8007dae <quorem+0xec>
 8007dcc:	3c01      	subs	r4, #1
 8007dce:	e7eb      	b.n	8007da8 <quorem+0xe6>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e7ee      	b.n	8007db2 <quorem+0xf0>
 8007dd4:	0000      	movs	r0, r0
	...

08007dd8 <_dtoa_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4616      	mov	r6, r2
 8007dde:	461f      	mov	r7, r3
 8007de0:	69c4      	ldr	r4, [r0, #28]
 8007de2:	b099      	sub	sp, #100	; 0x64
 8007de4:	4605      	mov	r5, r0
 8007de6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007dea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007dee:	b974      	cbnz	r4, 8007e0e <_dtoa_r+0x36>
 8007df0:	2010      	movs	r0, #16
 8007df2:	f000 fe1d 	bl	8008a30 <malloc>
 8007df6:	4602      	mov	r2, r0
 8007df8:	61e8      	str	r0, [r5, #28]
 8007dfa:	b920      	cbnz	r0, 8007e06 <_dtoa_r+0x2e>
 8007dfc:	21ef      	movs	r1, #239	; 0xef
 8007dfe:	4bac      	ldr	r3, [pc, #688]	; (80080b0 <_dtoa_r+0x2d8>)
 8007e00:	48ac      	ldr	r0, [pc, #688]	; (80080b4 <_dtoa_r+0x2dc>)
 8007e02:	f001 fb09 	bl	8009418 <__assert_func>
 8007e06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e0a:	6004      	str	r4, [r0, #0]
 8007e0c:	60c4      	str	r4, [r0, #12]
 8007e0e:	69eb      	ldr	r3, [r5, #28]
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	b151      	cbz	r1, 8007e2a <_dtoa_r+0x52>
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	2301      	movs	r3, #1
 8007e18:	4093      	lsls	r3, r2
 8007e1a:	604a      	str	r2, [r1, #4]
 8007e1c:	608b      	str	r3, [r1, #8]
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 fefa 	bl	8008c18 <_Bfree>
 8007e24:	2200      	movs	r2, #0
 8007e26:	69eb      	ldr	r3, [r5, #28]
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	1e3b      	subs	r3, r7, #0
 8007e2c:	bfaf      	iteee	ge
 8007e2e:	2300      	movge	r3, #0
 8007e30:	2201      	movlt	r2, #1
 8007e32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e36:	9305      	strlt	r3, [sp, #20]
 8007e38:	bfa8      	it	ge
 8007e3a:	f8c8 3000 	strge.w	r3, [r8]
 8007e3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e42:	4b9d      	ldr	r3, [pc, #628]	; (80080b8 <_dtoa_r+0x2e0>)
 8007e44:	bfb8      	it	lt
 8007e46:	f8c8 2000 	strlt.w	r2, [r8]
 8007e4a:	ea33 0309 	bics.w	r3, r3, r9
 8007e4e:	d119      	bne.n	8007e84 <_dtoa_r+0xac>
 8007e50:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e5c:	4333      	orrs	r3, r6
 8007e5e:	f000 8589 	beq.w	8008974 <_dtoa_r+0xb9c>
 8007e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e64:	b953      	cbnz	r3, 8007e7c <_dtoa_r+0xa4>
 8007e66:	4b95      	ldr	r3, [pc, #596]	; (80080bc <_dtoa_r+0x2e4>)
 8007e68:	e023      	b.n	8007eb2 <_dtoa_r+0xda>
 8007e6a:	4b95      	ldr	r3, [pc, #596]	; (80080c0 <_dtoa_r+0x2e8>)
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	9803      	ldr	r0, [sp, #12]
 8007e76:	b019      	add	sp, #100	; 0x64
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	4b8f      	ldr	r3, [pc, #572]	; (80080bc <_dtoa_r+0x2e4>)
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	3303      	adds	r3, #3
 8007e82:	e7f5      	b.n	8007e70 <_dtoa_r+0x98>
 8007e84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f7f8 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8007e98:	4680      	mov	r8, r0
 8007e9a:	b160      	cbz	r0, 8007eb6 <_dtoa_r+0xde>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8562 	beq.w	800896e <_dtoa_r+0xb96>
 8007eaa:	4b86      	ldr	r3, [pc, #536]	; (80080c4 <_dtoa_r+0x2ec>)
 8007eac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	9303      	str	r3, [sp, #12]
 8007eb4:	e7de      	b.n	8007e74 <_dtoa_r+0x9c>
 8007eb6:	ab16      	add	r3, sp, #88	; 0x58
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	ab17      	add	r3, sp, #92	; 0x5c
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ec4:	f001 f98a 	bl	80091dc <__d2b>
 8007ec8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ecc:	4682      	mov	sl, r0
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	d07e      	beq.n	8007fd0 <_dtoa_r+0x1f8>
 8007ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ee4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ee8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007eec:	4619      	mov	r1, r3
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4b75      	ldr	r3, [pc, #468]	; (80080c8 <_dtoa_r+0x2f0>)
 8007ef2:	f7f8 f939 	bl	8000168 <__aeabi_dsub>
 8007ef6:	a368      	add	r3, pc, #416	; (adr r3, 8008098 <_dtoa_r+0x2c0>)
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	a367      	add	r3, pc, #412	; (adr r3, 80080a0 <_dtoa_r+0x2c8>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	f7f8 f931 	bl	800016c <__adddf3>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	460f      	mov	r7, r1
 8007f10:	f7f8 fa78 	bl	8000404 <__aeabi_i2d>
 8007f14:	a364      	add	r3, pc, #400	; (adr r3, 80080a8 <_dtoa_r+0x2d0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 fadd 	bl	80004d8 <__aeabi_dmul>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 f921 	bl	800016c <__adddf3>
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460f      	mov	r7, r1
 8007f2e:	f7f8 fd83 	bl	8000a38 <__aeabi_d2iz>
 8007f32:	2200      	movs	r2, #0
 8007f34:	4683      	mov	fp, r0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 fd3e 	bl	80009bc <__aeabi_dcmplt>
 8007f40:	b148      	cbz	r0, 8007f56 <_dtoa_r+0x17e>
 8007f42:	4658      	mov	r0, fp
 8007f44:	f7f8 fa5e 	bl	8000404 <__aeabi_i2d>
 8007f48:	4632      	mov	r2, r6
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	f7f8 fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8007f50:	b908      	cbnz	r0, 8007f56 <_dtoa_r+0x17e>
 8007f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f56:	f1bb 0f16 	cmp.w	fp, #22
 8007f5a:	d857      	bhi.n	800800c <_dtoa_r+0x234>
 8007f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f60:	4b5a      	ldr	r3, [pc, #360]	; (80080cc <_dtoa_r+0x2f4>)
 8007f62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	f7f8 fd27 	bl	80009bc <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d04e      	beq.n	8008010 <_dtoa_r+0x238>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f78:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f7c:	1b1b      	subs	r3, r3, r4
 8007f7e:	1e5a      	subs	r2, r3, #1
 8007f80:	bf46      	itte	mi
 8007f82:	f1c3 0901 	rsbmi	r9, r3, #1
 8007f86:	2300      	movmi	r3, #0
 8007f88:	f04f 0900 	movpl.w	r9, #0
 8007f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8e:	bf48      	it	mi
 8007f90:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f92:	f1bb 0f00 	cmp.w	fp, #0
 8007f96:	db3d      	blt.n	8008014 <_dtoa_r+0x23c>
 8007f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007f9e:	445b      	add	r3, fp
 8007fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d867      	bhi.n	800807c <_dtoa_r+0x2a4>
 8007fac:	2b05      	cmp	r3, #5
 8007fae:	bfc4      	itt	gt
 8007fb0:	3b04      	subgt	r3, #4
 8007fb2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb6:	bfc8      	it	gt
 8007fb8:	2400      	movgt	r4, #0
 8007fba:	f1a3 0302 	sub.w	r3, r3, #2
 8007fbe:	bfd8      	it	le
 8007fc0:	2401      	movle	r4, #1
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	f200 8086 	bhi.w	80080d4 <_dtoa_r+0x2fc>
 8007fc8:	e8df f003 	tbb	[pc, r3]
 8007fcc:	5637392c 	.word	0x5637392c
 8007fd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007fd4:	441c      	add	r4, r3
 8007fd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	bfc1      	itttt	gt
 8007fde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fe2:	fa09 f903 	lslgt.w	r9, r9, r3
 8007fe6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007fea:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007fee:	bfd6      	itet	le
 8007ff0:	f1c3 0320 	rsble	r3, r3, #32
 8007ff4:	ea49 0003 	orrgt.w	r0, r9, r3
 8007ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ffc:	f7f8 f9f2 	bl	80003e4 <__aeabi_ui2d>
 8008000:	2201      	movs	r2, #1
 8008002:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008006:	3c01      	subs	r4, #1
 8008008:	9213      	str	r2, [sp, #76]	; 0x4c
 800800a:	e76f      	b.n	8007eec <_dtoa_r+0x114>
 800800c:	2301      	movs	r3, #1
 800800e:	e7b3      	b.n	8007f78 <_dtoa_r+0x1a0>
 8008010:	900f      	str	r0, [sp, #60]	; 0x3c
 8008012:	e7b2      	b.n	8007f7a <_dtoa_r+0x1a2>
 8008014:	f1cb 0300 	rsb	r3, fp, #0
 8008018:	930a      	str	r3, [sp, #40]	; 0x28
 800801a:	2300      	movs	r3, #0
 800801c:	eba9 090b 	sub.w	r9, r9, fp
 8008020:	930e      	str	r3, [sp, #56]	; 0x38
 8008022:	e7c0      	b.n	8007fa6 <_dtoa_r+0x1ce>
 8008024:	2300      	movs	r3, #0
 8008026:	930b      	str	r3, [sp, #44]	; 0x2c
 8008028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802a:	2b00      	cmp	r3, #0
 800802c:	dc55      	bgt.n	80080da <_dtoa_r+0x302>
 800802e:	2301      	movs	r3, #1
 8008030:	461a      	mov	r2, r3
 8008032:	9306      	str	r3, [sp, #24]
 8008034:	9308      	str	r3, [sp, #32]
 8008036:	9223      	str	r2, [sp, #140]	; 0x8c
 8008038:	e00b      	b.n	8008052 <_dtoa_r+0x27a>
 800803a:	2301      	movs	r3, #1
 800803c:	e7f3      	b.n	8008026 <_dtoa_r+0x24e>
 800803e:	2300      	movs	r3, #0
 8008040:	930b      	str	r3, [sp, #44]	; 0x2c
 8008042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008044:	445b      	add	r3, fp
 8008046:	9306      	str	r3, [sp, #24]
 8008048:	3301      	adds	r3, #1
 800804a:	2b01      	cmp	r3, #1
 800804c:	9308      	str	r3, [sp, #32]
 800804e:	bfb8      	it	lt
 8008050:	2301      	movlt	r3, #1
 8008052:	2100      	movs	r1, #0
 8008054:	2204      	movs	r2, #4
 8008056:	69e8      	ldr	r0, [r5, #28]
 8008058:	f102 0614 	add.w	r6, r2, #20
 800805c:	429e      	cmp	r6, r3
 800805e:	d940      	bls.n	80080e2 <_dtoa_r+0x30a>
 8008060:	6041      	str	r1, [r0, #4]
 8008062:	4628      	mov	r0, r5
 8008064:	f000 fd98 	bl	8008b98 <_Balloc>
 8008068:	9003      	str	r0, [sp, #12]
 800806a:	2800      	cmp	r0, #0
 800806c:	d13c      	bne.n	80080e8 <_dtoa_r+0x310>
 800806e:	4602      	mov	r2, r0
 8008070:	f240 11af 	movw	r1, #431	; 0x1af
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <_dtoa_r+0x2f8>)
 8008076:	e6c3      	b.n	8007e00 <_dtoa_r+0x28>
 8008078:	2301      	movs	r3, #1
 800807a:	e7e1      	b.n	8008040 <_dtoa_r+0x268>
 800807c:	2401      	movs	r4, #1
 800807e:	2300      	movs	r3, #0
 8008080:	940b      	str	r4, [sp, #44]	; 0x2c
 8008082:	9322      	str	r3, [sp, #136]	; 0x88
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	2200      	movs	r2, #0
 800808a:	9306      	str	r3, [sp, #24]
 800808c:	9308      	str	r3, [sp, #32]
 800808e:	2312      	movs	r3, #18
 8008090:	e7d1      	b.n	8008036 <_dtoa_r+0x25e>
 8008092:	bf00      	nop
 8008094:	f3af 8000 	nop.w
 8008098:	636f4361 	.word	0x636f4361
 800809c:	3fd287a7 	.word	0x3fd287a7
 80080a0:	8b60c8b3 	.word	0x8b60c8b3
 80080a4:	3fc68a28 	.word	0x3fc68a28
 80080a8:	509f79fb 	.word	0x509f79fb
 80080ac:	3fd34413 	.word	0x3fd34413
 80080b0:	0800ae3b 	.word	0x0800ae3b
 80080b4:	0800ae52 	.word	0x0800ae52
 80080b8:	7ff00000 	.word	0x7ff00000
 80080bc:	0800ae37 	.word	0x0800ae37
 80080c0:	0800ae2e 	.word	0x0800ae2e
 80080c4:	0800ae0b 	.word	0x0800ae0b
 80080c8:	3ff80000 	.word	0x3ff80000
 80080cc:	0800af40 	.word	0x0800af40
 80080d0:	0800aeaa 	.word	0x0800aeaa
 80080d4:	2301      	movs	r3, #1
 80080d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d8:	e7d4      	b.n	8008084 <_dtoa_r+0x2ac>
 80080da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080dc:	9306      	str	r3, [sp, #24]
 80080de:	9308      	str	r3, [sp, #32]
 80080e0:	e7b7      	b.n	8008052 <_dtoa_r+0x27a>
 80080e2:	3101      	adds	r1, #1
 80080e4:	0052      	lsls	r2, r2, #1
 80080e6:	e7b7      	b.n	8008058 <_dtoa_r+0x280>
 80080e8:	69eb      	ldr	r3, [r5, #28]
 80080ea:	9a03      	ldr	r2, [sp, #12]
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	9b08      	ldr	r3, [sp, #32]
 80080f0:	2b0e      	cmp	r3, #14
 80080f2:	f200 80a8 	bhi.w	8008246 <_dtoa_r+0x46e>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	f000 80a5 	beq.w	8008246 <_dtoa_r+0x46e>
 80080fc:	f1bb 0f00 	cmp.w	fp, #0
 8008100:	dd34      	ble.n	800816c <_dtoa_r+0x394>
 8008102:	4b9a      	ldr	r3, [pc, #616]	; (800836c <_dtoa_r+0x594>)
 8008104:	f00b 020f 	and.w	r2, fp, #15
 8008108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008110:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008114:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008118:	ea4f 142b 	mov.w	r4, fp, asr #4
 800811c:	d016      	beq.n	800814c <_dtoa_r+0x374>
 800811e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008122:	4b93      	ldr	r3, [pc, #588]	; (8008370 <_dtoa_r+0x598>)
 8008124:	2703      	movs	r7, #3
 8008126:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800812a:	f7f8 faff 	bl	800072c <__aeabi_ddiv>
 800812e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008132:	f004 040f 	and.w	r4, r4, #15
 8008136:	4e8e      	ldr	r6, [pc, #568]	; (8008370 <_dtoa_r+0x598>)
 8008138:	b954      	cbnz	r4, 8008150 <_dtoa_r+0x378>
 800813a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800813e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008142:	f7f8 faf3 	bl	800072c <__aeabi_ddiv>
 8008146:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800814a:	e029      	b.n	80081a0 <_dtoa_r+0x3c8>
 800814c:	2702      	movs	r7, #2
 800814e:	e7f2      	b.n	8008136 <_dtoa_r+0x35e>
 8008150:	07e1      	lsls	r1, r4, #31
 8008152:	d508      	bpl.n	8008166 <_dtoa_r+0x38e>
 8008154:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008158:	e9d6 2300 	ldrd	r2, r3, [r6]
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008164:	3701      	adds	r7, #1
 8008166:	1064      	asrs	r4, r4, #1
 8008168:	3608      	adds	r6, #8
 800816a:	e7e5      	b.n	8008138 <_dtoa_r+0x360>
 800816c:	f000 80a5 	beq.w	80082ba <_dtoa_r+0x4e2>
 8008170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008174:	f1cb 0400 	rsb	r4, fp, #0
 8008178:	4b7c      	ldr	r3, [pc, #496]	; (800836c <_dtoa_r+0x594>)
 800817a:	f004 020f 	and.w	r2, r4, #15
 800817e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f9a7 	bl	80004d8 <__aeabi_dmul>
 800818a:	2702      	movs	r7, #2
 800818c:	2300      	movs	r3, #0
 800818e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008192:	4e77      	ldr	r6, [pc, #476]	; (8008370 <_dtoa_r+0x598>)
 8008194:	1124      	asrs	r4, r4, #4
 8008196:	2c00      	cmp	r4, #0
 8008198:	f040 8084 	bne.w	80082a4 <_dtoa_r+0x4cc>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1d2      	bne.n	8008146 <_dtoa_r+0x36e>
 80081a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8087 	beq.w	80082be <_dtoa_r+0x4e6>
 80081b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081b4:	2200      	movs	r2, #0
 80081b6:	4b6f      	ldr	r3, [pc, #444]	; (8008374 <_dtoa_r+0x59c>)
 80081b8:	f7f8 fc00 	bl	80009bc <__aeabi_dcmplt>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d07e      	beq.n	80082be <_dtoa_r+0x4e6>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d07b      	beq.n	80082be <_dtoa_r+0x4e6>
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dd38      	ble.n	800823e <_dtoa_r+0x466>
 80081cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081d0:	2200      	movs	r2, #0
 80081d2:	4b69      	ldr	r3, [pc, #420]	; (8008378 <_dtoa_r+0x5a0>)
 80081d4:	f7f8 f980 	bl	80004d8 <__aeabi_dmul>
 80081d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081dc:	9c06      	ldr	r4, [sp, #24]
 80081de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80081e2:	3701      	adds	r7, #1
 80081e4:	4638      	mov	r0, r7
 80081e6:	f7f8 f90d 	bl	8000404 <__aeabi_i2d>
 80081ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ee:	f7f8 f973 	bl	80004d8 <__aeabi_dmul>
 80081f2:	2200      	movs	r2, #0
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <_dtoa_r+0x5a4>)
 80081f6:	f7f7 ffb9 	bl	800016c <__adddf3>
 80081fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008202:	9611      	str	r6, [sp, #68]	; 0x44
 8008204:	2c00      	cmp	r4, #0
 8008206:	d15d      	bne.n	80082c4 <_dtoa_r+0x4ec>
 8008208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800820c:	2200      	movs	r2, #0
 800820e:	4b5c      	ldr	r3, [pc, #368]	; (8008380 <_dtoa_r+0x5a8>)
 8008210:	f7f7 ffaa 	bl	8000168 <__aeabi_dsub>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800821c:	4633      	mov	r3, r6
 800821e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008220:	f7f8 fbea 	bl	80009f8 <__aeabi_dcmpgt>
 8008224:	2800      	cmp	r0, #0
 8008226:	f040 8295 	bne.w	8008754 <_dtoa_r+0x97c>
 800822a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800822e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008230:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008234:	f7f8 fbc2 	bl	80009bc <__aeabi_dcmplt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8289 	bne.w	8008750 <_dtoa_r+0x978>
 800823e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008242:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008248:	2b00      	cmp	r3, #0
 800824a:	f2c0 8151 	blt.w	80084f0 <_dtoa_r+0x718>
 800824e:	f1bb 0f0e 	cmp.w	fp, #14
 8008252:	f300 814d 	bgt.w	80084f0 <_dtoa_r+0x718>
 8008256:	4b45      	ldr	r3, [pc, #276]	; (800836c <_dtoa_r+0x594>)
 8008258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800825c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008260:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008264:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008266:	2b00      	cmp	r3, #0
 8008268:	f280 80da 	bge.w	8008420 <_dtoa_r+0x648>
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f300 80d6 	bgt.w	8008420 <_dtoa_r+0x648>
 8008274:	f040 826b 	bne.w	800874e <_dtoa_r+0x976>
 8008278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800827c:	2200      	movs	r2, #0
 800827e:	4b40      	ldr	r3, [pc, #256]	; (8008380 <_dtoa_r+0x5a8>)
 8008280:	f7f8 f92a 	bl	80004d8 <__aeabi_dmul>
 8008284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008288:	f7f8 fbac 	bl	80009e4 <__aeabi_dcmpge>
 800828c:	9c08      	ldr	r4, [sp, #32]
 800828e:	4626      	mov	r6, r4
 8008290:	2800      	cmp	r0, #0
 8008292:	f040 8241 	bne.w	8008718 <_dtoa_r+0x940>
 8008296:	2331      	movs	r3, #49	; 0x31
 8008298:	9f03      	ldr	r7, [sp, #12]
 800829a:	f10b 0b01 	add.w	fp, fp, #1
 800829e:	f807 3b01 	strb.w	r3, [r7], #1
 80082a2:	e23d      	b.n	8008720 <_dtoa_r+0x948>
 80082a4:	07e2      	lsls	r2, r4, #31
 80082a6:	d505      	bpl.n	80082b4 <_dtoa_r+0x4dc>
 80082a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ac:	f7f8 f914 	bl	80004d8 <__aeabi_dmul>
 80082b0:	2301      	movs	r3, #1
 80082b2:	3701      	adds	r7, #1
 80082b4:	1064      	asrs	r4, r4, #1
 80082b6:	3608      	adds	r6, #8
 80082b8:	e76d      	b.n	8008196 <_dtoa_r+0x3be>
 80082ba:	2702      	movs	r7, #2
 80082bc:	e770      	b.n	80081a0 <_dtoa_r+0x3c8>
 80082be:	46d8      	mov	r8, fp
 80082c0:	9c08      	ldr	r4, [sp, #32]
 80082c2:	e78f      	b.n	80081e4 <_dtoa_r+0x40c>
 80082c4:	9903      	ldr	r1, [sp, #12]
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <_dtoa_r+0x594>)
 80082c8:	4421      	add	r1, r4
 80082ca:	9112      	str	r1, [sp, #72]	; 0x48
 80082cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082da:	2900      	cmp	r1, #0
 80082dc:	d054      	beq.n	8008388 <_dtoa_r+0x5b0>
 80082de:	2000      	movs	r0, #0
 80082e0:	4928      	ldr	r1, [pc, #160]	; (8008384 <_dtoa_r+0x5ac>)
 80082e2:	f7f8 fa23 	bl	800072c <__aeabi_ddiv>
 80082e6:	463b      	mov	r3, r7
 80082e8:	4632      	mov	r2, r6
 80082ea:	f7f7 ff3d 	bl	8000168 <__aeabi_dsub>
 80082ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082f2:	9f03      	ldr	r7, [sp, #12]
 80082f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f8:	f7f8 fb9e 	bl	8000a38 <__aeabi_d2iz>
 80082fc:	4604      	mov	r4, r0
 80082fe:	f7f8 f881 	bl	8000404 <__aeabi_i2d>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800830a:	f7f7 ff2d 	bl	8000168 <__aeabi_dsub>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	3430      	adds	r4, #48	; 0x30
 8008314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800831c:	f807 4b01 	strb.w	r4, [r7], #1
 8008320:	f7f8 fb4c 	bl	80009bc <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	d173      	bne.n	8008410 <_dtoa_r+0x638>
 8008328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832c:	2000      	movs	r0, #0
 800832e:	4911      	ldr	r1, [pc, #68]	; (8008374 <_dtoa_r+0x59c>)
 8008330:	f7f7 ff1a 	bl	8000168 <__aeabi_dsub>
 8008334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008338:	f7f8 fb40 	bl	80009bc <__aeabi_dcmplt>
 800833c:	2800      	cmp	r0, #0
 800833e:	f040 80b6 	bne.w	80084ae <_dtoa_r+0x6d6>
 8008342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008344:	429f      	cmp	r7, r3
 8008346:	f43f af7a 	beq.w	800823e <_dtoa_r+0x466>
 800834a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800834e:	2200      	movs	r2, #0
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <_dtoa_r+0x5a0>)
 8008352:	f7f8 f8c1 	bl	80004d8 <__aeabi_dmul>
 8008356:	2200      	movs	r2, #0
 8008358:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800835c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <_dtoa_r+0x5a0>)
 8008362:	f7f8 f8b9 	bl	80004d8 <__aeabi_dmul>
 8008366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800836a:	e7c3      	b.n	80082f4 <_dtoa_r+0x51c>
 800836c:	0800af40 	.word	0x0800af40
 8008370:	0800af18 	.word	0x0800af18
 8008374:	3ff00000 	.word	0x3ff00000
 8008378:	40240000 	.word	0x40240000
 800837c:	401c0000 	.word	0x401c0000
 8008380:	40140000 	.word	0x40140000
 8008384:	3fe00000 	.word	0x3fe00000
 8008388:	4630      	mov	r0, r6
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 f8a4 	bl	80004d8 <__aeabi_dmul>
 8008390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008392:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008396:	9c03      	ldr	r4, [sp, #12]
 8008398:	9314      	str	r3, [sp, #80]	; 0x50
 800839a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800839e:	f7f8 fb4b 	bl	8000a38 <__aeabi_d2iz>
 80083a2:	9015      	str	r0, [sp, #84]	; 0x54
 80083a4:	f7f8 f82e 	bl	8000404 <__aeabi_i2d>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083b0:	f7f7 feda 	bl	8000168 <__aeabi_dsub>
 80083b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b6:	4606      	mov	r6, r0
 80083b8:	3330      	adds	r3, #48	; 0x30
 80083ba:	f804 3b01 	strb.w	r3, [r4], #1
 80083be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083c0:	460f      	mov	r7, r1
 80083c2:	429c      	cmp	r4, r3
 80083c4:	f04f 0200 	mov.w	r2, #0
 80083c8:	d124      	bne.n	8008414 <_dtoa_r+0x63c>
 80083ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ce:	4baf      	ldr	r3, [pc, #700]	; (800868c <_dtoa_r+0x8b4>)
 80083d0:	f7f7 fecc 	bl	800016c <__adddf3>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4630      	mov	r0, r6
 80083da:	4639      	mov	r1, r7
 80083dc:	f7f8 fb0c 	bl	80009f8 <__aeabi_dcmpgt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d163      	bne.n	80084ac <_dtoa_r+0x6d4>
 80083e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083e8:	2000      	movs	r0, #0
 80083ea:	49a8      	ldr	r1, [pc, #672]	; (800868c <_dtoa_r+0x8b4>)
 80083ec:	f7f7 febc 	bl	8000168 <__aeabi_dsub>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fae0 	bl	80009bc <__aeabi_dcmplt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f43f af1e 	beq.w	800823e <_dtoa_r+0x466>
 8008402:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008404:	1e7b      	subs	r3, r7, #1
 8008406:	9314      	str	r3, [sp, #80]	; 0x50
 8008408:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800840c:	2b30      	cmp	r3, #48	; 0x30
 800840e:	d0f8      	beq.n	8008402 <_dtoa_r+0x62a>
 8008410:	46c3      	mov	fp, r8
 8008412:	e03b      	b.n	800848c <_dtoa_r+0x6b4>
 8008414:	4b9e      	ldr	r3, [pc, #632]	; (8008690 <_dtoa_r+0x8b8>)
 8008416:	f7f8 f85f 	bl	80004d8 <__aeabi_dmul>
 800841a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800841e:	e7bc      	b.n	800839a <_dtoa_r+0x5c2>
 8008420:	9f03      	ldr	r7, [sp, #12]
 8008422:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800842a:	4640      	mov	r0, r8
 800842c:	4649      	mov	r1, r9
 800842e:	f7f8 f97d 	bl	800072c <__aeabi_ddiv>
 8008432:	f7f8 fb01 	bl	8000a38 <__aeabi_d2iz>
 8008436:	4604      	mov	r4, r0
 8008438:	f7f7 ffe4 	bl	8000404 <__aeabi_i2d>
 800843c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008440:	f7f8 f84a 	bl	80004d8 <__aeabi_dmul>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f7 fe8c 	bl	8000168 <__aeabi_dsub>
 8008450:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008454:	f807 6b01 	strb.w	r6, [r7], #1
 8008458:	9e03      	ldr	r6, [sp, #12]
 800845a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800845e:	1bbe      	subs	r6, r7, r6
 8008460:	45b4      	cmp	ip, r6
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	d136      	bne.n	80084d6 <_dtoa_r+0x6fe>
 8008468:	f7f7 fe80 	bl	800016c <__adddf3>
 800846c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008470:	4680      	mov	r8, r0
 8008472:	4689      	mov	r9, r1
 8008474:	f7f8 fac0 	bl	80009f8 <__aeabi_dcmpgt>
 8008478:	bb58      	cbnz	r0, 80084d2 <_dtoa_r+0x6fa>
 800847a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f8 fa91 	bl	80009a8 <__aeabi_dcmpeq>
 8008486:	b108      	cbz	r0, 800848c <_dtoa_r+0x6b4>
 8008488:	07e3      	lsls	r3, r4, #31
 800848a:	d422      	bmi.n	80084d2 <_dtoa_r+0x6fa>
 800848c:	4651      	mov	r1, sl
 800848e:	4628      	mov	r0, r5
 8008490:	f000 fbc2 	bl	8008c18 <_Bfree>
 8008494:	2300      	movs	r3, #0
 8008496:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008498:	703b      	strb	r3, [r7, #0]
 800849a:	f10b 0301 	add.w	r3, fp, #1
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f43f ace6 	beq.w	8007e74 <_dtoa_r+0x9c>
 80084a8:	601f      	str	r7, [r3, #0]
 80084aa:	e4e3      	b.n	8007e74 <_dtoa_r+0x9c>
 80084ac:	4627      	mov	r7, r4
 80084ae:	463b      	mov	r3, r7
 80084b0:	461f      	mov	r7, r3
 80084b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084b6:	2a39      	cmp	r2, #57	; 0x39
 80084b8:	d107      	bne.n	80084ca <_dtoa_r+0x6f2>
 80084ba:	9a03      	ldr	r2, [sp, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d1f7      	bne.n	80084b0 <_dtoa_r+0x6d8>
 80084c0:	2230      	movs	r2, #48	; 0x30
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	f108 0801 	add.w	r8, r8, #1
 80084c8:	700a      	strb	r2, [r1, #0]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	3201      	adds	r2, #1
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e79e      	b.n	8008410 <_dtoa_r+0x638>
 80084d2:	46d8      	mov	r8, fp
 80084d4:	e7eb      	b.n	80084ae <_dtoa_r+0x6d6>
 80084d6:	2200      	movs	r2, #0
 80084d8:	4b6d      	ldr	r3, [pc, #436]	; (8008690 <_dtoa_r+0x8b8>)
 80084da:	f7f7 fffd 	bl	80004d8 <__aeabi_dmul>
 80084de:	2200      	movs	r2, #0
 80084e0:	2300      	movs	r3, #0
 80084e2:	4680      	mov	r8, r0
 80084e4:	4689      	mov	r9, r1
 80084e6:	f7f8 fa5f 	bl	80009a8 <__aeabi_dcmpeq>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d09b      	beq.n	8008426 <_dtoa_r+0x64e>
 80084ee:	e7cd      	b.n	800848c <_dtoa_r+0x6b4>
 80084f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	f000 80c4 	beq.w	8008680 <_dtoa_r+0x8a8>
 80084f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084fa:	2a01      	cmp	r2, #1
 80084fc:	f300 80a8 	bgt.w	8008650 <_dtoa_r+0x878>
 8008500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008502:	2a00      	cmp	r2, #0
 8008504:	f000 80a0 	beq.w	8008648 <_dtoa_r+0x870>
 8008508:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800850c:	464f      	mov	r7, r9
 800850e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008512:	2101      	movs	r1, #1
 8008514:	441a      	add	r2, r3
 8008516:	4628      	mov	r0, r5
 8008518:	4499      	add	r9, r3
 800851a:	9209      	str	r2, [sp, #36]	; 0x24
 800851c:	f000 fc32 	bl	8008d84 <__i2b>
 8008520:	4606      	mov	r6, r0
 8008522:	b15f      	cbz	r7, 800853c <_dtoa_r+0x764>
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	dd08      	ble.n	800853c <_dtoa_r+0x764>
 800852a:	42bb      	cmp	r3, r7
 800852c:	bfa8      	it	ge
 800852e:	463b      	movge	r3, r7
 8008530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008532:	eba9 0903 	sub.w	r9, r9, r3
 8008536:	1aff      	subs	r7, r7, r3
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853e:	b1f3      	cbz	r3, 800857e <_dtoa_r+0x7a6>
 8008540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80a0 	beq.w	8008688 <_dtoa_r+0x8b0>
 8008548:	2c00      	cmp	r4, #0
 800854a:	dd10      	ble.n	800856e <_dtoa_r+0x796>
 800854c:	4631      	mov	r1, r6
 800854e:	4622      	mov	r2, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f000 fcd5 	bl	8008f00 <__pow5mult>
 8008556:	4652      	mov	r2, sl
 8008558:	4601      	mov	r1, r0
 800855a:	4606      	mov	r6, r0
 800855c:	4628      	mov	r0, r5
 800855e:	f000 fc27 	bl	8008db0 <__multiply>
 8008562:	4680      	mov	r8, r0
 8008564:	4651      	mov	r1, sl
 8008566:	4628      	mov	r0, r5
 8008568:	f000 fb56 	bl	8008c18 <_Bfree>
 800856c:	46c2      	mov	sl, r8
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	1b1a      	subs	r2, r3, r4
 8008572:	d004      	beq.n	800857e <_dtoa_r+0x7a6>
 8008574:	4651      	mov	r1, sl
 8008576:	4628      	mov	r0, r5
 8008578:	f000 fcc2 	bl	8008f00 <__pow5mult>
 800857c:	4682      	mov	sl, r0
 800857e:	2101      	movs	r1, #1
 8008580:	4628      	mov	r0, r5
 8008582:	f000 fbff 	bl	8008d84 <__i2b>
 8008586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008588:	4604      	mov	r4, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	f340 8082 	ble.w	8008694 <_dtoa_r+0x8bc>
 8008590:	461a      	mov	r2, r3
 8008592:	4601      	mov	r1, r0
 8008594:	4628      	mov	r0, r5
 8008596:	f000 fcb3 	bl	8008f00 <__pow5mult>
 800859a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800859c:	4604      	mov	r4, r0
 800859e:	2b01      	cmp	r3, #1
 80085a0:	dd7b      	ble.n	800869a <_dtoa_r+0x8c2>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085ac:	6918      	ldr	r0, [r3, #16]
 80085ae:	f000 fb9b 	bl	8008ce8 <__hi0bits>
 80085b2:	f1c0 0020 	rsb	r0, r0, #32
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	4418      	add	r0, r3
 80085ba:	f010 001f 	ands.w	r0, r0, #31
 80085be:	f000 8092 	beq.w	80086e6 <_dtoa_r+0x90e>
 80085c2:	f1c0 0320 	rsb	r3, r0, #32
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	f340 8085 	ble.w	80086d6 <_dtoa_r+0x8fe>
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	f1c0 001c 	rsb	r0, r0, #28
 80085d2:	4403      	add	r3, r0
 80085d4:	4481      	add	r9, r0
 80085d6:	4407      	add	r7, r0
 80085d8:	9309      	str	r3, [sp, #36]	; 0x24
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	dd05      	ble.n	80085ec <_dtoa_r+0x814>
 80085e0:	4651      	mov	r1, sl
 80085e2:	464a      	mov	r2, r9
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fce5 	bl	8008fb4 <__lshift>
 80085ea:	4682      	mov	sl, r0
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd05      	ble.n	80085fe <_dtoa_r+0x826>
 80085f2:	4621      	mov	r1, r4
 80085f4:	461a      	mov	r2, r3
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 fcdc 	bl	8008fb4 <__lshift>
 80085fc:	4604      	mov	r4, r0
 80085fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d072      	beq.n	80086ea <_dtoa_r+0x912>
 8008604:	4621      	mov	r1, r4
 8008606:	4650      	mov	r0, sl
 8008608:	f000 fd40 	bl	800908c <__mcmp>
 800860c:	2800      	cmp	r0, #0
 800860e:	da6c      	bge.n	80086ea <_dtoa_r+0x912>
 8008610:	2300      	movs	r3, #0
 8008612:	4651      	mov	r1, sl
 8008614:	220a      	movs	r2, #10
 8008616:	4628      	mov	r0, r5
 8008618:	f000 fb20 	bl	8008c5c <__multadd>
 800861c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800861e:	4682      	mov	sl, r0
 8008620:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 81ac 	beq.w	8008982 <_dtoa_r+0xbaa>
 800862a:	2300      	movs	r3, #0
 800862c:	4631      	mov	r1, r6
 800862e:	220a      	movs	r2, #10
 8008630:	4628      	mov	r0, r5
 8008632:	f000 fb13 	bl	8008c5c <__multadd>
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	4606      	mov	r6, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	f300 8093 	bgt.w	8008766 <_dtoa_r+0x98e>
 8008640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008642:	2b02      	cmp	r3, #2
 8008644:	dc59      	bgt.n	80086fa <_dtoa_r+0x922>
 8008646:	e08e      	b.n	8008766 <_dtoa_r+0x98e>
 8008648:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800864a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800864e:	e75d      	b.n	800850c <_dtoa_r+0x734>
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	1e5c      	subs	r4, r3, #1
 8008654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008656:	42a3      	cmp	r3, r4
 8008658:	bfbf      	itttt	lt
 800865a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800865c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800865e:	1ae3      	sublt	r3, r4, r3
 8008660:	18d2      	addlt	r2, r2, r3
 8008662:	bfa8      	it	ge
 8008664:	1b1c      	subge	r4, r3, r4
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	bfbe      	ittt	lt
 800866a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800866c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800866e:	2400      	movlt	r4, #0
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfb5      	itete	lt
 8008674:	eba9 0703 	sublt.w	r7, r9, r3
 8008678:	464f      	movge	r7, r9
 800867a:	2300      	movlt	r3, #0
 800867c:	9b08      	ldrge	r3, [sp, #32]
 800867e:	e747      	b.n	8008510 <_dtoa_r+0x738>
 8008680:	464f      	mov	r7, r9
 8008682:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008684:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008686:	e74c      	b.n	8008522 <_dtoa_r+0x74a>
 8008688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868a:	e773      	b.n	8008574 <_dtoa_r+0x79c>
 800868c:	3fe00000 	.word	0x3fe00000
 8008690:	40240000 	.word	0x40240000
 8008694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008696:	2b01      	cmp	r3, #1
 8008698:	dc18      	bgt.n	80086cc <_dtoa_r+0x8f4>
 800869a:	9b04      	ldr	r3, [sp, #16]
 800869c:	b9b3      	cbnz	r3, 80086cc <_dtoa_r+0x8f4>
 800869e:	9b05      	ldr	r3, [sp, #20]
 80086a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a4:	b993      	cbnz	r3, 80086cc <_dtoa_r+0x8f4>
 80086a6:	9b05      	ldr	r3, [sp, #20]
 80086a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	0d1b      	lsrs	r3, r3, #20
 80086ae:	051b      	lsls	r3, r3, #20
 80086b0:	b17b      	cbz	r3, 80086d2 <_dtoa_r+0x8fa>
 80086b2:	f04f 0801 	mov.w	r8, #1
 80086b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	3301      	adds	r3, #1
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f47f af6f 	bne.w	80085a6 <_dtoa_r+0x7ce>
 80086c8:	2001      	movs	r0, #1
 80086ca:	e774      	b.n	80085b6 <_dtoa_r+0x7de>
 80086cc:	f04f 0800 	mov.w	r8, #0
 80086d0:	e7f6      	b.n	80086c0 <_dtoa_r+0x8e8>
 80086d2:	4698      	mov	r8, r3
 80086d4:	e7f4      	b.n	80086c0 <_dtoa_r+0x8e8>
 80086d6:	d080      	beq.n	80085da <_dtoa_r+0x802>
 80086d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086da:	331c      	adds	r3, #28
 80086dc:	441a      	add	r2, r3
 80086de:	4499      	add	r9, r3
 80086e0:	441f      	add	r7, r3
 80086e2:	9209      	str	r2, [sp, #36]	; 0x24
 80086e4:	e779      	b.n	80085da <_dtoa_r+0x802>
 80086e6:	4603      	mov	r3, r0
 80086e8:	e7f6      	b.n	80086d8 <_dtoa_r+0x900>
 80086ea:	9b08      	ldr	r3, [sp, #32]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc34      	bgt.n	800875a <_dtoa_r+0x982>
 80086f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	dd31      	ble.n	800875a <_dtoa_r+0x982>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	9306      	str	r3, [sp, #24]
 80086fa:	9b06      	ldr	r3, [sp, #24]
 80086fc:	b963      	cbnz	r3, 8008718 <_dtoa_r+0x940>
 80086fe:	4621      	mov	r1, r4
 8008700:	2205      	movs	r2, #5
 8008702:	4628      	mov	r0, r5
 8008704:	f000 faaa 	bl	8008c5c <__multadd>
 8008708:	4601      	mov	r1, r0
 800870a:	4604      	mov	r4, r0
 800870c:	4650      	mov	r0, sl
 800870e:	f000 fcbd 	bl	800908c <__mcmp>
 8008712:	2800      	cmp	r0, #0
 8008714:	f73f adbf 	bgt.w	8008296 <_dtoa_r+0x4be>
 8008718:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800871a:	9f03      	ldr	r7, [sp, #12]
 800871c:	ea6f 0b03 	mvn.w	fp, r3
 8008720:	f04f 0800 	mov.w	r8, #0
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 fa76 	bl	8008c18 <_Bfree>
 800872c:	2e00      	cmp	r6, #0
 800872e:	f43f aead 	beq.w	800848c <_dtoa_r+0x6b4>
 8008732:	f1b8 0f00 	cmp.w	r8, #0
 8008736:	d005      	beq.n	8008744 <_dtoa_r+0x96c>
 8008738:	45b0      	cmp	r8, r6
 800873a:	d003      	beq.n	8008744 <_dtoa_r+0x96c>
 800873c:	4641      	mov	r1, r8
 800873e:	4628      	mov	r0, r5
 8008740:	f000 fa6a 	bl	8008c18 <_Bfree>
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fa66 	bl	8008c18 <_Bfree>
 800874c:	e69e      	b.n	800848c <_dtoa_r+0x6b4>
 800874e:	2400      	movs	r4, #0
 8008750:	4626      	mov	r6, r4
 8008752:	e7e1      	b.n	8008718 <_dtoa_r+0x940>
 8008754:	46c3      	mov	fp, r8
 8008756:	4626      	mov	r6, r4
 8008758:	e59d      	b.n	8008296 <_dtoa_r+0x4be>
 800875a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80c8 	beq.w	80088f2 <_dtoa_r+0xb1a>
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	9306      	str	r3, [sp, #24]
 8008766:	2f00      	cmp	r7, #0
 8008768:	dd05      	ble.n	8008776 <_dtoa_r+0x99e>
 800876a:	4631      	mov	r1, r6
 800876c:	463a      	mov	r2, r7
 800876e:	4628      	mov	r0, r5
 8008770:	f000 fc20 	bl	8008fb4 <__lshift>
 8008774:	4606      	mov	r6, r0
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	d05b      	beq.n	8008834 <_dtoa_r+0xa5c>
 800877c:	4628      	mov	r0, r5
 800877e:	6871      	ldr	r1, [r6, #4]
 8008780:	f000 fa0a 	bl	8008b98 <_Balloc>
 8008784:	4607      	mov	r7, r0
 8008786:	b928      	cbnz	r0, 8008794 <_dtoa_r+0x9bc>
 8008788:	4602      	mov	r2, r0
 800878a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800878e:	4b81      	ldr	r3, [pc, #516]	; (8008994 <_dtoa_r+0xbbc>)
 8008790:	f7ff bb36 	b.w	8007e00 <_dtoa_r+0x28>
 8008794:	6932      	ldr	r2, [r6, #16]
 8008796:	f106 010c 	add.w	r1, r6, #12
 800879a:	3202      	adds	r2, #2
 800879c:	0092      	lsls	r2, r2, #2
 800879e:	300c      	adds	r0, #12
 80087a0:	f000 fe2c 	bl	80093fc <memcpy>
 80087a4:	2201      	movs	r2, #1
 80087a6:	4639      	mov	r1, r7
 80087a8:	4628      	mov	r0, r5
 80087aa:	f000 fc03 	bl	8008fb4 <__lshift>
 80087ae:	46b0      	mov	r8, r6
 80087b0:	4606      	mov	r6, r0
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	9a03      	ldr	r2, [sp, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	9b06      	ldr	r3, [sp, #24]
 80087bc:	4413      	add	r3, r2
 80087be:	930b      	str	r3, [sp, #44]	; 0x2c
 80087c0:	9b04      	ldr	r3, [sp, #16]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	930a      	str	r3, [sp, #40]	; 0x28
 80087c8:	9b08      	ldr	r3, [sp, #32]
 80087ca:	4621      	mov	r1, r4
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4650      	mov	r0, sl
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	f7ff fa76 	bl	8007cc2 <quorem>
 80087d6:	4641      	mov	r1, r8
 80087d8:	9006      	str	r0, [sp, #24]
 80087da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087de:	4650      	mov	r0, sl
 80087e0:	f000 fc54 	bl	800908c <__mcmp>
 80087e4:	4632      	mov	r2, r6
 80087e6:	9009      	str	r0, [sp, #36]	; 0x24
 80087e8:	4621      	mov	r1, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 fc6a 	bl	80090c4 <__mdiff>
 80087f0:	68c2      	ldr	r2, [r0, #12]
 80087f2:	4607      	mov	r7, r0
 80087f4:	bb02      	cbnz	r2, 8008838 <_dtoa_r+0xa60>
 80087f6:	4601      	mov	r1, r0
 80087f8:	4650      	mov	r0, sl
 80087fa:	f000 fc47 	bl	800908c <__mcmp>
 80087fe:	4602      	mov	r2, r0
 8008800:	4639      	mov	r1, r7
 8008802:	4628      	mov	r0, r5
 8008804:	920c      	str	r2, [sp, #48]	; 0x30
 8008806:	f000 fa07 	bl	8008c18 <_Bfree>
 800880a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800880c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800880e:	9f08      	ldr	r7, [sp, #32]
 8008810:	ea43 0102 	orr.w	r1, r3, r2
 8008814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008816:	4319      	orrs	r1, r3
 8008818:	d110      	bne.n	800883c <_dtoa_r+0xa64>
 800881a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800881e:	d029      	beq.n	8008874 <_dtoa_r+0xa9c>
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	dd02      	ble.n	800882c <_dtoa_r+0xa54>
 8008826:	9b06      	ldr	r3, [sp, #24]
 8008828:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800882c:	9b04      	ldr	r3, [sp, #16]
 800882e:	f883 9000 	strb.w	r9, [r3]
 8008832:	e777      	b.n	8008724 <_dtoa_r+0x94c>
 8008834:	4630      	mov	r0, r6
 8008836:	e7ba      	b.n	80087ae <_dtoa_r+0x9d6>
 8008838:	2201      	movs	r2, #1
 800883a:	e7e1      	b.n	8008800 <_dtoa_r+0xa28>
 800883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	db04      	blt.n	800884c <_dtoa_r+0xa74>
 8008842:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008844:	430b      	orrs	r3, r1
 8008846:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008848:	430b      	orrs	r3, r1
 800884a:	d120      	bne.n	800888e <_dtoa_r+0xab6>
 800884c:	2a00      	cmp	r2, #0
 800884e:	dded      	ble.n	800882c <_dtoa_r+0xa54>
 8008850:	4651      	mov	r1, sl
 8008852:	2201      	movs	r2, #1
 8008854:	4628      	mov	r0, r5
 8008856:	f000 fbad 	bl	8008fb4 <__lshift>
 800885a:	4621      	mov	r1, r4
 800885c:	4682      	mov	sl, r0
 800885e:	f000 fc15 	bl	800908c <__mcmp>
 8008862:	2800      	cmp	r0, #0
 8008864:	dc03      	bgt.n	800886e <_dtoa_r+0xa96>
 8008866:	d1e1      	bne.n	800882c <_dtoa_r+0xa54>
 8008868:	f019 0f01 	tst.w	r9, #1
 800886c:	d0de      	beq.n	800882c <_dtoa_r+0xa54>
 800886e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008872:	d1d8      	bne.n	8008826 <_dtoa_r+0xa4e>
 8008874:	2339      	movs	r3, #57	; 0x39
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	7013      	strb	r3, [r2, #0]
 800887a:	463b      	mov	r3, r7
 800887c:	461f      	mov	r7, r3
 800887e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008882:	3b01      	subs	r3, #1
 8008884:	2a39      	cmp	r2, #57	; 0x39
 8008886:	d06b      	beq.n	8008960 <_dtoa_r+0xb88>
 8008888:	3201      	adds	r2, #1
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	e74a      	b.n	8008724 <_dtoa_r+0x94c>
 800888e:	2a00      	cmp	r2, #0
 8008890:	dd07      	ble.n	80088a2 <_dtoa_r+0xaca>
 8008892:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008896:	d0ed      	beq.n	8008874 <_dtoa_r+0xa9c>
 8008898:	9a04      	ldr	r2, [sp, #16]
 800889a:	f109 0301 	add.w	r3, r9, #1
 800889e:	7013      	strb	r3, [r2, #0]
 80088a0:	e740      	b.n	8008724 <_dtoa_r+0x94c>
 80088a2:	9b08      	ldr	r3, [sp, #32]
 80088a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d042      	beq.n	8008934 <_dtoa_r+0xb5c>
 80088ae:	4651      	mov	r1, sl
 80088b0:	2300      	movs	r3, #0
 80088b2:	220a      	movs	r2, #10
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 f9d1 	bl	8008c5c <__multadd>
 80088ba:	45b0      	cmp	r8, r6
 80088bc:	4682      	mov	sl, r0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	f04f 020a 	mov.w	r2, #10
 80088c6:	4641      	mov	r1, r8
 80088c8:	4628      	mov	r0, r5
 80088ca:	d107      	bne.n	80088dc <_dtoa_r+0xb04>
 80088cc:	f000 f9c6 	bl	8008c5c <__multadd>
 80088d0:	4680      	mov	r8, r0
 80088d2:	4606      	mov	r6, r0
 80088d4:	9b08      	ldr	r3, [sp, #32]
 80088d6:	3301      	adds	r3, #1
 80088d8:	9308      	str	r3, [sp, #32]
 80088da:	e775      	b.n	80087c8 <_dtoa_r+0x9f0>
 80088dc:	f000 f9be 	bl	8008c5c <__multadd>
 80088e0:	4631      	mov	r1, r6
 80088e2:	4680      	mov	r8, r0
 80088e4:	2300      	movs	r3, #0
 80088e6:	220a      	movs	r2, #10
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f9b7 	bl	8008c5c <__multadd>
 80088ee:	4606      	mov	r6, r0
 80088f0:	e7f0      	b.n	80088d4 <_dtoa_r+0xafc>
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	9306      	str	r3, [sp, #24]
 80088f6:	9f03      	ldr	r7, [sp, #12]
 80088f8:	4621      	mov	r1, r4
 80088fa:	4650      	mov	r0, sl
 80088fc:	f7ff f9e1 	bl	8007cc2 <quorem>
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008906:	f807 9b01 	strb.w	r9, [r7], #1
 800890a:	1afa      	subs	r2, r7, r3
 800890c:	9b06      	ldr	r3, [sp, #24]
 800890e:	4293      	cmp	r3, r2
 8008910:	dd07      	ble.n	8008922 <_dtoa_r+0xb4a>
 8008912:	4651      	mov	r1, sl
 8008914:	2300      	movs	r3, #0
 8008916:	220a      	movs	r2, #10
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f99f 	bl	8008c5c <__multadd>
 800891e:	4682      	mov	sl, r0
 8008920:	e7ea      	b.n	80088f8 <_dtoa_r+0xb20>
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	f04f 0800 	mov.w	r8, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfcc      	ite	gt
 800892c:	461f      	movgt	r7, r3
 800892e:	2701      	movle	r7, #1
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	441f      	add	r7, r3
 8008934:	4651      	mov	r1, sl
 8008936:	2201      	movs	r2, #1
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fb3b 	bl	8008fb4 <__lshift>
 800893e:	4621      	mov	r1, r4
 8008940:	4682      	mov	sl, r0
 8008942:	f000 fba3 	bl	800908c <__mcmp>
 8008946:	2800      	cmp	r0, #0
 8008948:	dc97      	bgt.n	800887a <_dtoa_r+0xaa2>
 800894a:	d102      	bne.n	8008952 <_dtoa_r+0xb7a>
 800894c:	f019 0f01 	tst.w	r9, #1
 8008950:	d193      	bne.n	800887a <_dtoa_r+0xaa2>
 8008952:	463b      	mov	r3, r7
 8008954:	461f      	mov	r7, r3
 8008956:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800895a:	2a30      	cmp	r2, #48	; 0x30
 800895c:	d0fa      	beq.n	8008954 <_dtoa_r+0xb7c>
 800895e:	e6e1      	b.n	8008724 <_dtoa_r+0x94c>
 8008960:	9a03      	ldr	r2, [sp, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d18a      	bne.n	800887c <_dtoa_r+0xaa4>
 8008966:	2331      	movs	r3, #49	; 0x31
 8008968:	f10b 0b01 	add.w	fp, fp, #1
 800896c:	e797      	b.n	800889e <_dtoa_r+0xac6>
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <_dtoa_r+0xbc0>)
 8008970:	f7ff ba9f 	b.w	8007eb2 <_dtoa_r+0xda>
 8008974:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008976:	2b00      	cmp	r3, #0
 8008978:	f47f aa77 	bne.w	8007e6a <_dtoa_r+0x92>
 800897c:	4b07      	ldr	r3, [pc, #28]	; (800899c <_dtoa_r+0xbc4>)
 800897e:	f7ff ba98 	b.w	8007eb2 <_dtoa_r+0xda>
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dcb6      	bgt.n	80088f6 <_dtoa_r+0xb1e>
 8008988:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800898a:	2b02      	cmp	r3, #2
 800898c:	f73f aeb5 	bgt.w	80086fa <_dtoa_r+0x922>
 8008990:	e7b1      	b.n	80088f6 <_dtoa_r+0xb1e>
 8008992:	bf00      	nop
 8008994:	0800aeaa 	.word	0x0800aeaa
 8008998:	0800ae0a 	.word	0x0800ae0a
 800899c:	0800ae2e 	.word	0x0800ae2e

080089a0 <_free_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d040      	beq.n	8008a2a <_free_r+0x8a>
 80089a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ac:	1f0c      	subs	r4, r1, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bfb8      	it	lt
 80089b2:	18e4      	addlt	r4, r4, r3
 80089b4:	f000 f8e4 	bl	8008b80 <__malloc_lock>
 80089b8:	4a1c      	ldr	r2, [pc, #112]	; (8008a2c <_free_r+0x8c>)
 80089ba:	6813      	ldr	r3, [r2, #0]
 80089bc:	b933      	cbnz	r3, 80089cc <_free_r+0x2c>
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	6014      	str	r4, [r2, #0]
 80089c2:	4628      	mov	r0, r5
 80089c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c8:	f000 b8e0 	b.w	8008b8c <__malloc_unlock>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d908      	bls.n	80089e2 <_free_r+0x42>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	1821      	adds	r1, r4, r0
 80089d4:	428b      	cmp	r3, r1
 80089d6:	bf01      	itttt	eq
 80089d8:	6819      	ldreq	r1, [r3, #0]
 80089da:	685b      	ldreq	r3, [r3, #4]
 80089dc:	1809      	addeq	r1, r1, r0
 80089de:	6021      	streq	r1, [r4, #0]
 80089e0:	e7ed      	b.n	80089be <_free_r+0x1e>
 80089e2:	461a      	mov	r2, r3
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b10b      	cbz	r3, 80089ec <_free_r+0x4c>
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d9fa      	bls.n	80089e2 <_free_r+0x42>
 80089ec:	6811      	ldr	r1, [r2, #0]
 80089ee:	1850      	adds	r0, r2, r1
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d10b      	bne.n	8008a0c <_free_r+0x6c>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	4401      	add	r1, r0
 80089f8:	1850      	adds	r0, r2, r1
 80089fa:	4283      	cmp	r3, r0
 80089fc:	6011      	str	r1, [r2, #0]
 80089fe:	d1e0      	bne.n	80089c2 <_free_r+0x22>
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4408      	add	r0, r1
 8008a06:	6010      	str	r0, [r2, #0]
 8008a08:	6053      	str	r3, [r2, #4]
 8008a0a:	e7da      	b.n	80089c2 <_free_r+0x22>
 8008a0c:	d902      	bls.n	8008a14 <_free_r+0x74>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	e7d6      	b.n	80089c2 <_free_r+0x22>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	1821      	adds	r1, r4, r0
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	bf01      	itttt	eq
 8008a1c:	6819      	ldreq	r1, [r3, #0]
 8008a1e:	685b      	ldreq	r3, [r3, #4]
 8008a20:	1809      	addeq	r1, r1, r0
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	6063      	str	r3, [r4, #4]
 8008a26:	6054      	str	r4, [r2, #4]
 8008a28:	e7cb      	b.n	80089c2 <_free_r+0x22>
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	200006b4 	.word	0x200006b4

08008a30 <malloc>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <malloc+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f000 b823 	b.w	8008a80 <_malloc_r>
 8008a3a:	bf00      	nop
 8008a3c:	200000b0 	.word	0x200000b0

08008a40 <sbrk_aligned>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4e0e      	ldr	r6, [pc, #56]	; (8008a7c <sbrk_aligned+0x3c>)
 8008a44:	460c      	mov	r4, r1
 8008a46:	6831      	ldr	r1, [r6, #0]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	b911      	cbnz	r1, 8008a52 <sbrk_aligned+0x12>
 8008a4c:	f000 fcc6 	bl	80093dc <_sbrk_r>
 8008a50:	6030      	str	r0, [r6, #0]
 8008a52:	4621      	mov	r1, r4
 8008a54:	4628      	mov	r0, r5
 8008a56:	f000 fcc1 	bl	80093dc <_sbrk_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d00a      	beq.n	8008a74 <sbrk_aligned+0x34>
 8008a5e:	1cc4      	adds	r4, r0, #3
 8008a60:	f024 0403 	bic.w	r4, r4, #3
 8008a64:	42a0      	cmp	r0, r4
 8008a66:	d007      	beq.n	8008a78 <sbrk_aligned+0x38>
 8008a68:	1a21      	subs	r1, r4, r0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 fcb6 	bl	80093dc <_sbrk_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d101      	bne.n	8008a78 <sbrk_aligned+0x38>
 8008a74:	f04f 34ff 	mov.w	r4, #4294967295
 8008a78:	4620      	mov	r0, r4
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	200006b8 	.word	0x200006b8

08008a80 <_malloc_r>:
 8008a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a84:	1ccd      	adds	r5, r1, #3
 8008a86:	f025 0503 	bic.w	r5, r5, #3
 8008a8a:	3508      	adds	r5, #8
 8008a8c:	2d0c      	cmp	r5, #12
 8008a8e:	bf38      	it	cc
 8008a90:	250c      	movcc	r5, #12
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	4607      	mov	r7, r0
 8008a96:	db01      	blt.n	8008a9c <_malloc_r+0x1c>
 8008a98:	42a9      	cmp	r1, r5
 8008a9a:	d905      	bls.n	8008aa8 <_malloc_r+0x28>
 8008a9c:	230c      	movs	r3, #12
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b7c <_malloc_r+0xfc>
 8008aac:	f000 f868 	bl	8008b80 <__malloc_lock>
 8008ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab4:	461c      	mov	r4, r3
 8008ab6:	bb5c      	cbnz	r4, 8008b10 <_malloc_r+0x90>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4638      	mov	r0, r7
 8008abc:	f7ff ffc0 	bl	8008a40 <sbrk_aligned>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	d155      	bne.n	8008b72 <_malloc_r+0xf2>
 8008ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8008aca:	4626      	mov	r6, r4
 8008acc:	2e00      	cmp	r6, #0
 8008ace:	d145      	bne.n	8008b5c <_malloc_r+0xdc>
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	d048      	beq.n	8008b66 <_malloc_r+0xe6>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4638      	mov	r0, r7
 8008ada:	eb04 0903 	add.w	r9, r4, r3
 8008ade:	f000 fc7d 	bl	80093dc <_sbrk_r>
 8008ae2:	4581      	cmp	r9, r0
 8008ae4:	d13f      	bne.n	8008b66 <_malloc_r+0xe6>
 8008ae6:	6821      	ldr	r1, [r4, #0]
 8008ae8:	4638      	mov	r0, r7
 8008aea:	1a6d      	subs	r5, r5, r1
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7ff ffa7 	bl	8008a40 <sbrk_aligned>
 8008af2:	3001      	adds	r0, #1
 8008af4:	d037      	beq.n	8008b66 <_malloc_r+0xe6>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	442b      	add	r3, r5
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	f8d8 3000 	ldr.w	r3, [r8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d038      	beq.n	8008b76 <_malloc_r+0xf6>
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	42a2      	cmp	r2, r4
 8008b08:	d12b      	bne.n	8008b62 <_malloc_r+0xe2>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	e00f      	b.n	8008b30 <_malloc_r+0xb0>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	1b52      	subs	r2, r2, r5
 8008b14:	d41f      	bmi.n	8008b56 <_malloc_r+0xd6>
 8008b16:	2a0b      	cmp	r2, #11
 8008b18:	d917      	bls.n	8008b4a <_malloc_r+0xca>
 8008b1a:	1961      	adds	r1, r4, r5
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	6025      	str	r5, [r4, #0]
 8008b20:	bf18      	it	ne
 8008b22:	6059      	strne	r1, [r3, #4]
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	bf08      	it	eq
 8008b28:	f8c8 1000 	streq.w	r1, [r8]
 8008b2c:	5162      	str	r2, [r4, r5]
 8008b2e:	604b      	str	r3, [r1, #4]
 8008b30:	4638      	mov	r0, r7
 8008b32:	f104 060b 	add.w	r6, r4, #11
 8008b36:	f000 f829 	bl	8008b8c <__malloc_unlock>
 8008b3a:	f026 0607 	bic.w	r6, r6, #7
 8008b3e:	1d23      	adds	r3, r4, #4
 8008b40:	1af2      	subs	r2, r6, r3
 8008b42:	d0ae      	beq.n	8008aa2 <_malloc_r+0x22>
 8008b44:	1b9b      	subs	r3, r3, r6
 8008b46:	50a3      	str	r3, [r4, r2]
 8008b48:	e7ab      	b.n	8008aa2 <_malloc_r+0x22>
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	6862      	ldr	r2, [r4, #4]
 8008b4e:	d1dd      	bne.n	8008b0c <_malloc_r+0x8c>
 8008b50:	f8c8 2000 	str.w	r2, [r8]
 8008b54:	e7ec      	b.n	8008b30 <_malloc_r+0xb0>
 8008b56:	4623      	mov	r3, r4
 8008b58:	6864      	ldr	r4, [r4, #4]
 8008b5a:	e7ac      	b.n	8008ab6 <_malloc_r+0x36>
 8008b5c:	4634      	mov	r4, r6
 8008b5e:	6876      	ldr	r6, [r6, #4]
 8008b60:	e7b4      	b.n	8008acc <_malloc_r+0x4c>
 8008b62:	4613      	mov	r3, r2
 8008b64:	e7cc      	b.n	8008b00 <_malloc_r+0x80>
 8008b66:	230c      	movs	r3, #12
 8008b68:	4638      	mov	r0, r7
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	f000 f80e 	bl	8008b8c <__malloc_unlock>
 8008b70:	e797      	b.n	8008aa2 <_malloc_r+0x22>
 8008b72:	6025      	str	r5, [r4, #0]
 8008b74:	e7dc      	b.n	8008b30 <_malloc_r+0xb0>
 8008b76:	605b      	str	r3, [r3, #4]
 8008b78:	deff      	udf	#255	; 0xff
 8008b7a:	bf00      	nop
 8008b7c:	200006b4 	.word	0x200006b4

08008b80 <__malloc_lock>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__malloc_lock+0x8>)
 8008b82:	f7ff b88e 	b.w	8007ca2 <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	200006b0 	.word	0x200006b0

08008b8c <__malloc_unlock>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__malloc_unlock+0x8>)
 8008b8e:	f7ff b889 	b.w	8007ca4 <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	200006b0 	.word	0x200006b0

08008b98 <_Balloc>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	69c6      	ldr	r6, [r0, #28]
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	b976      	cbnz	r6, 8008bc0 <_Balloc+0x28>
 8008ba2:	2010      	movs	r0, #16
 8008ba4:	f7ff ff44 	bl	8008a30 <malloc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	61e0      	str	r0, [r4, #28]
 8008bac:	b920      	cbnz	r0, 8008bb8 <_Balloc+0x20>
 8008bae:	216b      	movs	r1, #107	; 0x6b
 8008bb0:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <_Balloc+0x78>)
 8008bb2:	4818      	ldr	r0, [pc, #96]	; (8008c14 <_Balloc+0x7c>)
 8008bb4:	f000 fc30 	bl	8009418 <__assert_func>
 8008bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bbc:	6006      	str	r6, [r0, #0]
 8008bbe:	60c6      	str	r6, [r0, #12]
 8008bc0:	69e6      	ldr	r6, [r4, #28]
 8008bc2:	68f3      	ldr	r3, [r6, #12]
 8008bc4:	b183      	cbz	r3, 8008be8 <_Balloc+0x50>
 8008bc6:	69e3      	ldr	r3, [r4, #28]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bce:	b9b8      	cbnz	r0, 8008c00 <_Balloc+0x68>
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bd6:	1d72      	adds	r2, r6, #5
 8008bd8:	4620      	mov	r0, r4
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f000 fc3a 	bl	8009454 <_calloc_r>
 8008be0:	b160      	cbz	r0, 8008bfc <_Balloc+0x64>
 8008be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008be6:	e00e      	b.n	8008c06 <_Balloc+0x6e>
 8008be8:	2221      	movs	r2, #33	; 0x21
 8008bea:	2104      	movs	r1, #4
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fc31 	bl	8009454 <_calloc_r>
 8008bf2:	69e3      	ldr	r3, [r4, #28]
 8008bf4:	60f0      	str	r0, [r6, #12]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e4      	bne.n	8008bc6 <_Balloc+0x2e>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	6802      	ldr	r2, [r0, #0]
 8008c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c06:	2300      	movs	r3, #0
 8008c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c0c:	e7f7      	b.n	8008bfe <_Balloc+0x66>
 8008c0e:	bf00      	nop
 8008c10:	0800ae3b 	.word	0x0800ae3b
 8008c14:	0800aebb 	.word	0x0800aebb

08008c18 <_Bfree>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	69c6      	ldr	r6, [r0, #28]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	b976      	cbnz	r6, 8008c40 <_Bfree+0x28>
 8008c22:	2010      	movs	r0, #16
 8008c24:	f7ff ff04 	bl	8008a30 <malloc>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	61e8      	str	r0, [r5, #28]
 8008c2c:	b920      	cbnz	r0, 8008c38 <_Bfree+0x20>
 8008c2e:	218f      	movs	r1, #143	; 0x8f
 8008c30:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <_Bfree+0x3c>)
 8008c32:	4809      	ldr	r0, [pc, #36]	; (8008c58 <_Bfree+0x40>)
 8008c34:	f000 fbf0 	bl	8009418 <__assert_func>
 8008c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c3c:	6006      	str	r6, [r0, #0]
 8008c3e:	60c6      	str	r6, [r0, #12]
 8008c40:	b13c      	cbz	r4, 8008c52 <_Bfree+0x3a>
 8008c42:	69eb      	ldr	r3, [r5, #28]
 8008c44:	6862      	ldr	r2, [r4, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c4c:	6021      	str	r1, [r4, #0]
 8008c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	0800ae3b 	.word	0x0800ae3b
 8008c58:	0800aebb 	.word	0x0800aebb

08008c5c <__multadd>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	4607      	mov	r7, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	461e      	mov	r6, r3
 8008c66:	2000      	movs	r0, #0
 8008c68:	690d      	ldr	r5, [r1, #16]
 8008c6a:	f101 0c14 	add.w	ip, r1, #20
 8008c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c72:	3001      	adds	r0, #1
 8008c74:	b299      	uxth	r1, r3
 8008c76:	fb02 6101 	mla	r1, r2, r1, r6
 8008c7a:	0c1e      	lsrs	r6, r3, #16
 8008c7c:	0c0b      	lsrs	r3, r1, #16
 8008c7e:	fb02 3306 	mla	r3, r2, r6, r3
 8008c82:	b289      	uxth	r1, r1
 8008c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c88:	4285      	cmp	r5, r0
 8008c8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c92:	dcec      	bgt.n	8008c6e <__multadd+0x12>
 8008c94:	b30e      	cbz	r6, 8008cda <__multadd+0x7e>
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc19      	bgt.n	8008cd0 <__multadd+0x74>
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	3101      	adds	r1, #1
 8008ca2:	f7ff ff79 	bl	8008b98 <_Balloc>
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	b928      	cbnz	r0, 8008cb6 <__multadd+0x5a>
 8008caa:	4602      	mov	r2, r0
 8008cac:	21ba      	movs	r1, #186	; 0xba
 8008cae:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <__multadd+0x84>)
 8008cb0:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <__multadd+0x88>)
 8008cb2:	f000 fbb1 	bl	8009418 <__assert_func>
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	f104 010c 	add.w	r1, r4, #12
 8008cbc:	3202      	adds	r2, #2
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	300c      	adds	r0, #12
 8008cc2:	f000 fb9b 	bl	80093fc <memcpy>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff ffa5 	bl	8008c18 <_Bfree>
 8008cce:	4644      	mov	r4, r8
 8008cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	615e      	str	r6, [r3, #20]
 8008cd8:	6125      	str	r5, [r4, #16]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	0800aeaa 	.word	0x0800aeaa
 8008ce4:	0800aebb 	.word	0x0800aebb

08008ce8 <__hi0bits>:
 8008ce8:	0c02      	lsrs	r2, r0, #16
 8008cea:	0412      	lsls	r2, r2, #16
 8008cec:	4603      	mov	r3, r0
 8008cee:	b9ca      	cbnz	r2, 8008d24 <__hi0bits+0x3c>
 8008cf0:	0403      	lsls	r3, r0, #16
 8008cf2:	2010      	movs	r0, #16
 8008cf4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008cf8:	bf04      	itt	eq
 8008cfa:	021b      	lsleq	r3, r3, #8
 8008cfc:	3008      	addeq	r0, #8
 8008cfe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d02:	bf04      	itt	eq
 8008d04:	011b      	lsleq	r3, r3, #4
 8008d06:	3004      	addeq	r0, #4
 8008d08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d0c:	bf04      	itt	eq
 8008d0e:	009b      	lsleq	r3, r3, #2
 8008d10:	3002      	addeq	r0, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	db05      	blt.n	8008d22 <__hi0bits+0x3a>
 8008d16:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008d1a:	f100 0001 	add.w	r0, r0, #1
 8008d1e:	bf08      	it	eq
 8008d20:	2020      	moveq	r0, #32
 8008d22:	4770      	bx	lr
 8008d24:	2000      	movs	r0, #0
 8008d26:	e7e5      	b.n	8008cf4 <__hi0bits+0xc>

08008d28 <__lo0bits>:
 8008d28:	6803      	ldr	r3, [r0, #0]
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	f013 0007 	ands.w	r0, r3, #7
 8008d30:	d00b      	beq.n	8008d4a <__lo0bits+0x22>
 8008d32:	07d9      	lsls	r1, r3, #31
 8008d34:	d421      	bmi.n	8008d7a <__lo0bits+0x52>
 8008d36:	0798      	lsls	r0, r3, #30
 8008d38:	bf49      	itett	mi
 8008d3a:	085b      	lsrmi	r3, r3, #1
 8008d3c:	089b      	lsrpl	r3, r3, #2
 8008d3e:	2001      	movmi	r0, #1
 8008d40:	6013      	strmi	r3, [r2, #0]
 8008d42:	bf5c      	itt	pl
 8008d44:	2002      	movpl	r0, #2
 8008d46:	6013      	strpl	r3, [r2, #0]
 8008d48:	4770      	bx	lr
 8008d4a:	b299      	uxth	r1, r3
 8008d4c:	b909      	cbnz	r1, 8008d52 <__lo0bits+0x2a>
 8008d4e:	2010      	movs	r0, #16
 8008d50:	0c1b      	lsrs	r3, r3, #16
 8008d52:	b2d9      	uxtb	r1, r3
 8008d54:	b909      	cbnz	r1, 8008d5a <__lo0bits+0x32>
 8008d56:	3008      	adds	r0, #8
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	0719      	lsls	r1, r3, #28
 8008d5c:	bf04      	itt	eq
 8008d5e:	091b      	lsreq	r3, r3, #4
 8008d60:	3004      	addeq	r0, #4
 8008d62:	0799      	lsls	r1, r3, #30
 8008d64:	bf04      	itt	eq
 8008d66:	089b      	lsreq	r3, r3, #2
 8008d68:	3002      	addeq	r0, #2
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d403      	bmi.n	8008d76 <__lo0bits+0x4e>
 8008d6e:	085b      	lsrs	r3, r3, #1
 8008d70:	f100 0001 	add.w	r0, r0, #1
 8008d74:	d003      	beq.n	8008d7e <__lo0bits+0x56>
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	4770      	bx	lr
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	4770      	bx	lr
 8008d7e:	2020      	movs	r0, #32
 8008d80:	4770      	bx	lr
	...

08008d84 <__i2b>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	460c      	mov	r4, r1
 8008d88:	2101      	movs	r1, #1
 8008d8a:	f7ff ff05 	bl	8008b98 <_Balloc>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	b928      	cbnz	r0, 8008d9e <__i2b+0x1a>
 8008d92:	f240 1145 	movw	r1, #325	; 0x145
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <__i2b+0x24>)
 8008d98:	4804      	ldr	r0, [pc, #16]	; (8008dac <__i2b+0x28>)
 8008d9a:	f000 fb3d 	bl	8009418 <__assert_func>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	6144      	str	r4, [r0, #20]
 8008da2:	6103      	str	r3, [r0, #16]
 8008da4:	bd10      	pop	{r4, pc}
 8008da6:	bf00      	nop
 8008da8:	0800aeaa 	.word	0x0800aeaa
 8008dac:	0800aebb 	.word	0x0800aebb

08008db0 <__multiply>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	4691      	mov	r9, r2
 8008db6:	690a      	ldr	r2, [r1, #16]
 8008db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	bfbe      	ittt	lt
 8008dc2:	460b      	movlt	r3, r1
 8008dc4:	464c      	movlt	r4, r9
 8008dc6:	4699      	movlt	r9, r3
 8008dc8:	6927      	ldr	r7, [r4, #16]
 8008dca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	6861      	ldr	r1, [r4, #4]
 8008dd2:	eb07 060a 	add.w	r6, r7, sl
 8008dd6:	42b3      	cmp	r3, r6
 8008dd8:	b085      	sub	sp, #20
 8008dda:	bfb8      	it	lt
 8008ddc:	3101      	addlt	r1, #1
 8008dde:	f7ff fedb 	bl	8008b98 <_Balloc>
 8008de2:	b930      	cbnz	r0, 8008df2 <__multiply+0x42>
 8008de4:	4602      	mov	r2, r0
 8008de6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008dea:	4b43      	ldr	r3, [pc, #268]	; (8008ef8 <__multiply+0x148>)
 8008dec:	4843      	ldr	r0, [pc, #268]	; (8008efc <__multiply+0x14c>)
 8008dee:	f000 fb13 	bl	8009418 <__assert_func>
 8008df2:	f100 0514 	add.w	r5, r0, #20
 8008df6:	462b      	mov	r3, r5
 8008df8:	2200      	movs	r2, #0
 8008dfa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008dfe:	4543      	cmp	r3, r8
 8008e00:	d321      	bcc.n	8008e46 <__multiply+0x96>
 8008e02:	f104 0314 	add.w	r3, r4, #20
 8008e06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e0a:	f109 0314 	add.w	r3, r9, #20
 8008e0e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e12:	9202      	str	r2, [sp, #8]
 8008e14:	1b3a      	subs	r2, r7, r4
 8008e16:	3a15      	subs	r2, #21
 8008e18:	f022 0203 	bic.w	r2, r2, #3
 8008e1c:	3204      	adds	r2, #4
 8008e1e:	f104 0115 	add.w	r1, r4, #21
 8008e22:	428f      	cmp	r7, r1
 8008e24:	bf38      	it	cc
 8008e26:	2204      	movcc	r2, #4
 8008e28:	9201      	str	r2, [sp, #4]
 8008e2a:	9a02      	ldr	r2, [sp, #8]
 8008e2c:	9303      	str	r3, [sp, #12]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d80c      	bhi.n	8008e4c <__multiply+0x9c>
 8008e32:	2e00      	cmp	r6, #0
 8008e34:	dd03      	ble.n	8008e3e <__multiply+0x8e>
 8008e36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d05a      	beq.n	8008ef4 <__multiply+0x144>
 8008e3e:	6106      	str	r6, [r0, #16]
 8008e40:	b005      	add	sp, #20
 8008e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e46:	f843 2b04 	str.w	r2, [r3], #4
 8008e4a:	e7d8      	b.n	8008dfe <__multiply+0x4e>
 8008e4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	d023      	beq.n	8008e9e <__multiply+0xee>
 8008e56:	46a9      	mov	r9, r5
 8008e58:	f04f 0c00 	mov.w	ip, #0
 8008e5c:	f104 0e14 	add.w	lr, r4, #20
 8008e60:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e64:	f8d9 1000 	ldr.w	r1, [r9]
 8008e68:	fa1f fb82 	uxth.w	fp, r2
 8008e6c:	b289      	uxth	r1, r1
 8008e6e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e72:	4461      	add	r1, ip
 8008e74:	f8d9 c000 	ldr.w	ip, [r9]
 8008e78:	0c12      	lsrs	r2, r2, #16
 8008e7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008e7e:	fb0a c202 	mla	r2, sl, r2, ip
 8008e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e86:	b289      	uxth	r1, r1
 8008e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e8c:	4577      	cmp	r7, lr
 8008e8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e92:	f849 1b04 	str.w	r1, [r9], #4
 8008e96:	d8e3      	bhi.n	8008e60 <__multiply+0xb0>
 8008e98:	9a01      	ldr	r2, [sp, #4]
 8008e9a:	f845 c002 	str.w	ip, [r5, r2]
 8008e9e:	9a03      	ldr	r2, [sp, #12]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ea6:	f1b9 0f00 	cmp.w	r9, #0
 8008eaa:	d021      	beq.n	8008ef0 <__multiply+0x140>
 8008eac:	46ae      	mov	lr, r5
 8008eae:	f04f 0a00 	mov.w	sl, #0
 8008eb2:	6829      	ldr	r1, [r5, #0]
 8008eb4:	f104 0c14 	add.w	ip, r4, #20
 8008eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8008ebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ec0:	b289      	uxth	r1, r1
 8008ec2:	fb09 220b 	mla	r2, r9, fp, r2
 8008ec6:	4452      	add	r2, sl
 8008ec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ecc:	f84e 1b04 	str.w	r1, [lr], #4
 8008ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ed8:	f8be 1000 	ldrh.w	r1, [lr]
 8008edc:	4567      	cmp	r7, ip
 8008ede:	fb09 110a 	mla	r1, r9, sl, r1
 8008ee2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ee6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008eea:	d8e5      	bhi.n	8008eb8 <__multiply+0x108>
 8008eec:	9a01      	ldr	r2, [sp, #4]
 8008eee:	50a9      	str	r1, [r5, r2]
 8008ef0:	3504      	adds	r5, #4
 8008ef2:	e79a      	b.n	8008e2a <__multiply+0x7a>
 8008ef4:	3e01      	subs	r6, #1
 8008ef6:	e79c      	b.n	8008e32 <__multiply+0x82>
 8008ef8:	0800aeaa 	.word	0x0800aeaa
 8008efc:	0800aebb 	.word	0x0800aebb

08008f00 <__pow5mult>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4615      	mov	r5, r2
 8008f06:	f012 0203 	ands.w	r2, r2, #3
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	d007      	beq.n	8008f20 <__pow5mult+0x20>
 8008f10:	4c25      	ldr	r4, [pc, #148]	; (8008fa8 <__pow5mult+0xa8>)
 8008f12:	3a01      	subs	r2, #1
 8008f14:	2300      	movs	r3, #0
 8008f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f1a:	f7ff fe9f 	bl	8008c5c <__multadd>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	10ad      	asrs	r5, r5, #2
 8008f22:	d03d      	beq.n	8008fa0 <__pow5mult+0xa0>
 8008f24:	69f4      	ldr	r4, [r6, #28]
 8008f26:	b97c      	cbnz	r4, 8008f48 <__pow5mult+0x48>
 8008f28:	2010      	movs	r0, #16
 8008f2a:	f7ff fd81 	bl	8008a30 <malloc>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	61f0      	str	r0, [r6, #28]
 8008f32:	b928      	cbnz	r0, 8008f40 <__pow5mult+0x40>
 8008f34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008f38:	4b1c      	ldr	r3, [pc, #112]	; (8008fac <__pow5mult+0xac>)
 8008f3a:	481d      	ldr	r0, [pc, #116]	; (8008fb0 <__pow5mult+0xb0>)
 8008f3c:	f000 fa6c 	bl	8009418 <__assert_func>
 8008f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f44:	6004      	str	r4, [r0, #0]
 8008f46:	60c4      	str	r4, [r0, #12]
 8008f48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f50:	b94c      	cbnz	r4, 8008f66 <__pow5mult+0x66>
 8008f52:	f240 2171 	movw	r1, #625	; 0x271
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ff14 	bl	8008d84 <__i2b>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	07eb      	lsls	r3, r5, #31
 8008f6c:	d50a      	bpl.n	8008f84 <__pow5mult+0x84>
 8008f6e:	4639      	mov	r1, r7
 8008f70:	4622      	mov	r2, r4
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ff1c 	bl	8008db0 <__multiply>
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff fe4b 	bl	8008c18 <_Bfree>
 8008f82:	4647      	mov	r7, r8
 8008f84:	106d      	asrs	r5, r5, #1
 8008f86:	d00b      	beq.n	8008fa0 <__pow5mult+0xa0>
 8008f88:	6820      	ldr	r0, [r4, #0]
 8008f8a:	b938      	cbnz	r0, 8008f9c <__pow5mult+0x9c>
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7ff ff0d 	bl	8008db0 <__multiply>
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	f8c0 9000 	str.w	r9, [r0]
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	e7e4      	b.n	8008f6a <__pow5mult+0x6a>
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	bf00      	nop
 8008fa8:	0800b008 	.word	0x0800b008
 8008fac:	0800ae3b 	.word	0x0800ae3b
 8008fb0:	0800aebb 	.word	0x0800aebb

08008fb4 <__lshift>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4607      	mov	r7, r0
 8008fbc:	4691      	mov	r9, r2
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	6849      	ldr	r1, [r1, #4]
 8008fc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fcc:	f108 0601 	add.w	r6, r8, #1
 8008fd0:	42b3      	cmp	r3, r6
 8008fd2:	db0b      	blt.n	8008fec <__lshift+0x38>
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff fddf 	bl	8008b98 <_Balloc>
 8008fda:	4605      	mov	r5, r0
 8008fdc:	b948      	cbnz	r0, 8008ff2 <__lshift+0x3e>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008fe4:	4b27      	ldr	r3, [pc, #156]	; (8009084 <__lshift+0xd0>)
 8008fe6:	4828      	ldr	r0, [pc, #160]	; (8009088 <__lshift+0xd4>)
 8008fe8:	f000 fa16 	bl	8009418 <__assert_func>
 8008fec:	3101      	adds	r1, #1
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__lshift+0x1c>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f100 0114 	add.w	r1, r0, #20
 8008ff8:	f100 0210 	add.w	r2, r0, #16
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	4553      	cmp	r3, sl
 8009000:	db33      	blt.n	800906a <__lshift+0xb6>
 8009002:	6920      	ldr	r0, [r4, #16]
 8009004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009008:	f104 0314 	add.w	r3, r4, #20
 800900c:	f019 091f 	ands.w	r9, r9, #31
 8009010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009018:	d02b      	beq.n	8009072 <__lshift+0xbe>
 800901a:	468a      	mov	sl, r1
 800901c:	2200      	movs	r2, #0
 800901e:	f1c9 0e20 	rsb	lr, r9, #32
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	fa00 f009 	lsl.w	r0, r0, r9
 8009028:	4310      	orrs	r0, r2
 800902a:	f84a 0b04 	str.w	r0, [sl], #4
 800902e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009032:	459c      	cmp	ip, r3
 8009034:	fa22 f20e 	lsr.w	r2, r2, lr
 8009038:	d8f3      	bhi.n	8009022 <__lshift+0x6e>
 800903a:	ebac 0304 	sub.w	r3, ip, r4
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3304      	adds	r3, #4
 8009046:	f104 0015 	add.w	r0, r4, #21
 800904a:	4584      	cmp	ip, r0
 800904c:	bf38      	it	cc
 800904e:	2304      	movcc	r3, #4
 8009050:	50ca      	str	r2, [r1, r3]
 8009052:	b10a      	cbz	r2, 8009058 <__lshift+0xa4>
 8009054:	f108 0602 	add.w	r6, r8, #2
 8009058:	3e01      	subs	r6, #1
 800905a:	4638      	mov	r0, r7
 800905c:	4621      	mov	r1, r4
 800905e:	612e      	str	r6, [r5, #16]
 8009060:	f7ff fdda 	bl	8008c18 <_Bfree>
 8009064:	4628      	mov	r0, r5
 8009066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906a:	f842 0f04 	str.w	r0, [r2, #4]!
 800906e:	3301      	adds	r3, #1
 8009070:	e7c5      	b.n	8008ffe <__lshift+0x4a>
 8009072:	3904      	subs	r1, #4
 8009074:	f853 2b04 	ldr.w	r2, [r3], #4
 8009078:	459c      	cmp	ip, r3
 800907a:	f841 2f04 	str.w	r2, [r1, #4]!
 800907e:	d8f9      	bhi.n	8009074 <__lshift+0xc0>
 8009080:	e7ea      	b.n	8009058 <__lshift+0xa4>
 8009082:	bf00      	nop
 8009084:	0800aeaa 	.word	0x0800aeaa
 8009088:	0800aebb 	.word	0x0800aebb

0800908c <__mcmp>:
 800908c:	4603      	mov	r3, r0
 800908e:	690a      	ldr	r2, [r1, #16]
 8009090:	6900      	ldr	r0, [r0, #16]
 8009092:	b530      	push	{r4, r5, lr}
 8009094:	1a80      	subs	r0, r0, r2
 8009096:	d10d      	bne.n	80090b4 <__mcmp+0x28>
 8009098:	3314      	adds	r3, #20
 800909a:	3114      	adds	r1, #20
 800909c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090ac:	4295      	cmp	r5, r2
 80090ae:	d002      	beq.n	80090b6 <__mcmp+0x2a>
 80090b0:	d304      	bcc.n	80090bc <__mcmp+0x30>
 80090b2:	2001      	movs	r0, #1
 80090b4:	bd30      	pop	{r4, r5, pc}
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	d3f4      	bcc.n	80090a4 <__mcmp+0x18>
 80090ba:	e7fb      	b.n	80090b4 <__mcmp+0x28>
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	e7f8      	b.n	80090b4 <__mcmp+0x28>
	...

080090c4 <__mdiff>:
 80090c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	460d      	mov	r5, r1
 80090ca:	4607      	mov	r7, r0
 80090cc:	4611      	mov	r1, r2
 80090ce:	4628      	mov	r0, r5
 80090d0:	4614      	mov	r4, r2
 80090d2:	f7ff ffdb 	bl	800908c <__mcmp>
 80090d6:	1e06      	subs	r6, r0, #0
 80090d8:	d111      	bne.n	80090fe <__mdiff+0x3a>
 80090da:	4631      	mov	r1, r6
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff fd5b 	bl	8008b98 <_Balloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <__mdiff+0x2e>
 80090e6:	f240 2137 	movw	r1, #567	; 0x237
 80090ea:	4b3a      	ldr	r3, [pc, #232]	; (80091d4 <__mdiff+0x110>)
 80090ec:	483a      	ldr	r0, [pc, #232]	; (80091d8 <__mdiff+0x114>)
 80090ee:	f000 f993 	bl	8009418 <__assert_func>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80090f8:	4610      	mov	r0, r2
 80090fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	bfa4      	itt	ge
 8009100:	4623      	movge	r3, r4
 8009102:	462c      	movge	r4, r5
 8009104:	4638      	mov	r0, r7
 8009106:	6861      	ldr	r1, [r4, #4]
 8009108:	bfa6      	itte	ge
 800910a:	461d      	movge	r5, r3
 800910c:	2600      	movge	r6, #0
 800910e:	2601      	movlt	r6, #1
 8009110:	f7ff fd42 	bl	8008b98 <_Balloc>
 8009114:	4602      	mov	r2, r0
 8009116:	b918      	cbnz	r0, 8009120 <__mdiff+0x5c>
 8009118:	f240 2145 	movw	r1, #581	; 0x245
 800911c:	4b2d      	ldr	r3, [pc, #180]	; (80091d4 <__mdiff+0x110>)
 800911e:	e7e5      	b.n	80090ec <__mdiff+0x28>
 8009120:	f102 0814 	add.w	r8, r2, #20
 8009124:	46c2      	mov	sl, r8
 8009126:	f04f 0c00 	mov.w	ip, #0
 800912a:	6927      	ldr	r7, [r4, #16]
 800912c:	60c6      	str	r6, [r0, #12]
 800912e:	692e      	ldr	r6, [r5, #16]
 8009130:	f104 0014 	add.w	r0, r4, #20
 8009134:	f105 0914 	add.w	r9, r5, #20
 8009138:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800913c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009140:	3410      	adds	r4, #16
 8009142:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009146:	f859 3b04 	ldr.w	r3, [r9], #4
 800914a:	fa1f f18b 	uxth.w	r1, fp
 800914e:	4461      	add	r1, ip
 8009150:	fa1f fc83 	uxth.w	ip, r3
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	eba1 010c 	sub.w	r1, r1, ip
 800915a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800915e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009162:	b289      	uxth	r1, r1
 8009164:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009168:	454e      	cmp	r6, r9
 800916a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800916e:	f84a 1b04 	str.w	r1, [sl], #4
 8009172:	d8e6      	bhi.n	8009142 <__mdiff+0x7e>
 8009174:	1b73      	subs	r3, r6, r5
 8009176:	3b15      	subs	r3, #21
 8009178:	f023 0303 	bic.w	r3, r3, #3
 800917c:	3515      	adds	r5, #21
 800917e:	3304      	adds	r3, #4
 8009180:	42ae      	cmp	r6, r5
 8009182:	bf38      	it	cc
 8009184:	2304      	movcc	r3, #4
 8009186:	4418      	add	r0, r3
 8009188:	4443      	add	r3, r8
 800918a:	461e      	mov	r6, r3
 800918c:	4605      	mov	r5, r0
 800918e:	4575      	cmp	r5, lr
 8009190:	d30e      	bcc.n	80091b0 <__mdiff+0xec>
 8009192:	f10e 0103 	add.w	r1, lr, #3
 8009196:	1a09      	subs	r1, r1, r0
 8009198:	f021 0103 	bic.w	r1, r1, #3
 800919c:	3803      	subs	r0, #3
 800919e:	4586      	cmp	lr, r0
 80091a0:	bf38      	it	cc
 80091a2:	2100      	movcc	r1, #0
 80091a4:	440b      	add	r3, r1
 80091a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091aa:	b189      	cbz	r1, 80091d0 <__mdiff+0x10c>
 80091ac:	6117      	str	r7, [r2, #16]
 80091ae:	e7a3      	b.n	80090f8 <__mdiff+0x34>
 80091b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80091b4:	fa1f f188 	uxth.w	r1, r8
 80091b8:	4461      	add	r1, ip
 80091ba:	140c      	asrs	r4, r1, #16
 80091bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091c0:	b289      	uxth	r1, r1
 80091c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091c6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80091ca:	f846 1b04 	str.w	r1, [r6], #4
 80091ce:	e7de      	b.n	800918e <__mdiff+0xca>
 80091d0:	3f01      	subs	r7, #1
 80091d2:	e7e8      	b.n	80091a6 <__mdiff+0xe2>
 80091d4:	0800aeaa 	.word	0x0800aeaa
 80091d8:	0800aebb 	.word	0x0800aebb

080091dc <__d2b>:
 80091dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091de:	2101      	movs	r1, #1
 80091e0:	4617      	mov	r7, r2
 80091e2:	461c      	mov	r4, r3
 80091e4:	9e08      	ldr	r6, [sp, #32]
 80091e6:	f7ff fcd7 	bl	8008b98 <_Balloc>
 80091ea:	4605      	mov	r5, r0
 80091ec:	b930      	cbnz	r0, 80091fc <__d2b+0x20>
 80091ee:	4602      	mov	r2, r0
 80091f0:	f240 310f 	movw	r1, #783	; 0x30f
 80091f4:	4b22      	ldr	r3, [pc, #136]	; (8009280 <__d2b+0xa4>)
 80091f6:	4823      	ldr	r0, [pc, #140]	; (8009284 <__d2b+0xa8>)
 80091f8:	f000 f90e 	bl	8009418 <__assert_func>
 80091fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009200:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009204:	bb24      	cbnz	r4, 8009250 <__d2b+0x74>
 8009206:	2f00      	cmp	r7, #0
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	d026      	beq.n	800925a <__d2b+0x7e>
 800920c:	4668      	mov	r0, sp
 800920e:	9700      	str	r7, [sp, #0]
 8009210:	f7ff fd8a 	bl	8008d28 <__lo0bits>
 8009214:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009218:	b1e8      	cbz	r0, 8009256 <__d2b+0x7a>
 800921a:	f1c0 0320 	rsb	r3, r0, #32
 800921e:	fa02 f303 	lsl.w	r3, r2, r3
 8009222:	430b      	orrs	r3, r1
 8009224:	40c2      	lsrs	r2, r0
 8009226:	616b      	str	r3, [r5, #20]
 8009228:	9201      	str	r2, [sp, #4]
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf14      	ite	ne
 8009230:	2102      	movne	r1, #2
 8009232:	2101      	moveq	r1, #1
 8009234:	61ab      	str	r3, [r5, #24]
 8009236:	6129      	str	r1, [r5, #16]
 8009238:	b1bc      	cbz	r4, 800926a <__d2b+0x8e>
 800923a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800923e:	4404      	add	r4, r0
 8009240:	6034      	str	r4, [r6, #0]
 8009242:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	4628      	mov	r0, r5
 800924c:	b003      	add	sp, #12
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009254:	e7d7      	b.n	8009206 <__d2b+0x2a>
 8009256:	6169      	str	r1, [r5, #20]
 8009258:	e7e7      	b.n	800922a <__d2b+0x4e>
 800925a:	a801      	add	r0, sp, #4
 800925c:	f7ff fd64 	bl	8008d28 <__lo0bits>
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	2101      	movs	r1, #1
 8009264:	616b      	str	r3, [r5, #20]
 8009266:	3020      	adds	r0, #32
 8009268:	e7e5      	b.n	8009236 <__d2b+0x5a>
 800926a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800926e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009272:	6030      	str	r0, [r6, #0]
 8009274:	6918      	ldr	r0, [r3, #16]
 8009276:	f7ff fd37 	bl	8008ce8 <__hi0bits>
 800927a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800927e:	e7e2      	b.n	8009246 <__d2b+0x6a>
 8009280:	0800aeaa 	.word	0x0800aeaa
 8009284:	0800aebb 	.word	0x0800aebb

08009288 <__sflush_r>:
 8009288:	898a      	ldrh	r2, [r1, #12]
 800928a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928c:	4605      	mov	r5, r0
 800928e:	0710      	lsls	r0, r2, #28
 8009290:	460c      	mov	r4, r1
 8009292:	d457      	bmi.n	8009344 <__sflush_r+0xbc>
 8009294:	684b      	ldr	r3, [r1, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	dc04      	bgt.n	80092a4 <__sflush_r+0x1c>
 800929a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc01      	bgt.n	80092a4 <__sflush_r+0x1c>
 80092a0:	2000      	movs	r0, #0
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	d0fa      	beq.n	80092a0 <__sflush_r+0x18>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092b0:	682f      	ldr	r7, [r5, #0]
 80092b2:	6a21      	ldr	r1, [r4, #32]
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	d032      	beq.n	800931e <__sflush_r+0x96>
 80092b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	075a      	lsls	r2, r3, #29
 80092be:	d505      	bpl.n	80092cc <__sflush_r+0x44>
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	1ac0      	subs	r0, r0, r3
 80092c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092c6:	b10b      	cbz	r3, 80092cc <__sflush_r+0x44>
 80092c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092ca:	1ac0      	subs	r0, r0, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	4602      	mov	r2, r0
 80092d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d2:	4628      	mov	r0, r5
 80092d4:	6a21      	ldr	r1, [r4, #32]
 80092d6:	47b0      	blx	r6
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	d106      	bne.n	80092ec <__sflush_r+0x64>
 80092de:	6829      	ldr	r1, [r5, #0]
 80092e0:	291d      	cmp	r1, #29
 80092e2:	d82b      	bhi.n	800933c <__sflush_r+0xb4>
 80092e4:	4a28      	ldr	r2, [pc, #160]	; (8009388 <__sflush_r+0x100>)
 80092e6:	410a      	asrs	r2, r1
 80092e8:	07d6      	lsls	r6, r2, #31
 80092ea:	d427      	bmi.n	800933c <__sflush_r+0xb4>
 80092ec:	2200      	movs	r2, #0
 80092ee:	6062      	str	r2, [r4, #4]
 80092f0:	6922      	ldr	r2, [r4, #16]
 80092f2:	04d9      	lsls	r1, r3, #19
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	d504      	bpl.n	8009302 <__sflush_r+0x7a>
 80092f8:	1c42      	adds	r2, r0, #1
 80092fa:	d101      	bne.n	8009300 <__sflush_r+0x78>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b903      	cbnz	r3, 8009302 <__sflush_r+0x7a>
 8009300:	6560      	str	r0, [r4, #84]	; 0x54
 8009302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009304:	602f      	str	r7, [r5, #0]
 8009306:	2900      	cmp	r1, #0
 8009308:	d0ca      	beq.n	80092a0 <__sflush_r+0x18>
 800930a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930e:	4299      	cmp	r1, r3
 8009310:	d002      	beq.n	8009318 <__sflush_r+0x90>
 8009312:	4628      	mov	r0, r5
 8009314:	f7ff fb44 	bl	80089a0 <_free_r>
 8009318:	2000      	movs	r0, #0
 800931a:	6360      	str	r0, [r4, #52]	; 0x34
 800931c:	e7c1      	b.n	80092a2 <__sflush_r+0x1a>
 800931e:	2301      	movs	r3, #1
 8009320:	4628      	mov	r0, r5
 8009322:	47b0      	blx	r6
 8009324:	1c41      	adds	r1, r0, #1
 8009326:	d1c8      	bne.n	80092ba <__sflush_r+0x32>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0c5      	beq.n	80092ba <__sflush_r+0x32>
 800932e:	2b1d      	cmp	r3, #29
 8009330:	d001      	beq.n	8009336 <__sflush_r+0xae>
 8009332:	2b16      	cmp	r3, #22
 8009334:	d101      	bne.n	800933a <__sflush_r+0xb2>
 8009336:	602f      	str	r7, [r5, #0]
 8009338:	e7b2      	b.n	80092a0 <__sflush_r+0x18>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e7ae      	b.n	80092a2 <__sflush_r+0x1a>
 8009344:	690f      	ldr	r7, [r1, #16]
 8009346:	2f00      	cmp	r7, #0
 8009348:	d0aa      	beq.n	80092a0 <__sflush_r+0x18>
 800934a:	0793      	lsls	r3, r2, #30
 800934c:	bf18      	it	ne
 800934e:	2300      	movne	r3, #0
 8009350:	680e      	ldr	r6, [r1, #0]
 8009352:	bf08      	it	eq
 8009354:	694b      	ldreq	r3, [r1, #20]
 8009356:	1bf6      	subs	r6, r6, r7
 8009358:	600f      	str	r7, [r1, #0]
 800935a:	608b      	str	r3, [r1, #8]
 800935c:	2e00      	cmp	r6, #0
 800935e:	dd9f      	ble.n	80092a0 <__sflush_r+0x18>
 8009360:	4633      	mov	r3, r6
 8009362:	463a      	mov	r2, r7
 8009364:	4628      	mov	r0, r5
 8009366:	6a21      	ldr	r1, [r4, #32]
 8009368:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800936c:	47e0      	blx	ip
 800936e:	2800      	cmp	r0, #0
 8009370:	dc06      	bgt.n	8009380 <__sflush_r+0xf8>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e790      	b.n	80092a2 <__sflush_r+0x1a>
 8009380:	4407      	add	r7, r0
 8009382:	1a36      	subs	r6, r6, r0
 8009384:	e7ea      	b.n	800935c <__sflush_r+0xd4>
 8009386:	bf00      	nop
 8009388:	dfbffffe 	.word	0xdfbffffe

0800938c <_fflush_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b913      	cbnz	r3, 800939c <_fflush_r+0x10>
 8009396:	2500      	movs	r5, #0
 8009398:	4628      	mov	r0, r5
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	b118      	cbz	r0, 80093a6 <_fflush_r+0x1a>
 800939e:	6a03      	ldr	r3, [r0, #32]
 80093a0:	b90b      	cbnz	r3, 80093a6 <_fflush_r+0x1a>
 80093a2:	f7fe fb87 	bl	8007ab4 <__sinit>
 80093a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f3      	beq.n	8009396 <_fflush_r+0xa>
 80093ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093b0:	07d0      	lsls	r0, r2, #31
 80093b2:	d404      	bmi.n	80093be <_fflush_r+0x32>
 80093b4:	0599      	lsls	r1, r3, #22
 80093b6:	d402      	bmi.n	80093be <_fflush_r+0x32>
 80093b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ba:	f7fe fc72 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 80093be:	4628      	mov	r0, r5
 80093c0:	4621      	mov	r1, r4
 80093c2:	f7ff ff61 	bl	8009288 <__sflush_r>
 80093c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093c8:	4605      	mov	r5, r0
 80093ca:	07da      	lsls	r2, r3, #31
 80093cc:	d4e4      	bmi.n	8009398 <_fflush_r+0xc>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	059b      	lsls	r3, r3, #22
 80093d2:	d4e1      	bmi.n	8009398 <_fflush_r+0xc>
 80093d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093d6:	f7fe fc65 	bl	8007ca4 <__retarget_lock_release_recursive>
 80093da:	e7dd      	b.n	8009398 <_fflush_r+0xc>

080093dc <_sbrk_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	2300      	movs	r3, #0
 80093e0:	4d05      	ldr	r5, [pc, #20]	; (80093f8 <_sbrk_r+0x1c>)
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	f7fa f9d6 	bl	8003798 <_sbrk>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_sbrk_r+0x1a>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_sbrk_r+0x1a>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	200006ac 	.word	0x200006ac

080093fc <memcpy>:
 80093fc:	440a      	add	r2, r1
 80093fe:	4291      	cmp	r1, r2
 8009400:	f100 33ff 	add.w	r3, r0, #4294967295
 8009404:	d100      	bne.n	8009408 <memcpy+0xc>
 8009406:	4770      	bx	lr
 8009408:	b510      	push	{r4, lr}
 800940a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800940e:	4291      	cmp	r1, r2
 8009410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009414:	d1f9      	bne.n	800940a <memcpy+0xe>
 8009416:	bd10      	pop	{r4, pc}

08009418 <__assert_func>:
 8009418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800941a:	4614      	mov	r4, r2
 800941c:	461a      	mov	r2, r3
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <__assert_func+0x2c>)
 8009420:	4605      	mov	r5, r0
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68d8      	ldr	r0, [r3, #12]
 8009426:	b14c      	cbz	r4, 800943c <__assert_func+0x24>
 8009428:	4b07      	ldr	r3, [pc, #28]	; (8009448 <__assert_func+0x30>)
 800942a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800942e:	9100      	str	r1, [sp, #0]
 8009430:	462b      	mov	r3, r5
 8009432:	4906      	ldr	r1, [pc, #24]	; (800944c <__assert_func+0x34>)
 8009434:	f000 f842 	bl	80094bc <fiprintf>
 8009438:	f000 f852 	bl	80094e0 <abort>
 800943c:	4b04      	ldr	r3, [pc, #16]	; (8009450 <__assert_func+0x38>)
 800943e:	461c      	mov	r4, r3
 8009440:	e7f3      	b.n	800942a <__assert_func+0x12>
 8009442:	bf00      	nop
 8009444:	200000b0 	.word	0x200000b0
 8009448:	0800b01e 	.word	0x0800b01e
 800944c:	0800b02b 	.word	0x0800b02b
 8009450:	0800b059 	.word	0x0800b059

08009454 <_calloc_r>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	fba1 5402 	umull	r5, r4, r1, r2
 800945a:	b934      	cbnz	r4, 800946a <_calloc_r+0x16>
 800945c:	4629      	mov	r1, r5
 800945e:	f7ff fb0f 	bl	8008a80 <_malloc_r>
 8009462:	4606      	mov	r6, r0
 8009464:	b928      	cbnz	r0, 8009472 <_calloc_r+0x1e>
 8009466:	4630      	mov	r0, r6
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	220c      	movs	r2, #12
 800946c:	2600      	movs	r6, #0
 800946e:	6002      	str	r2, [r0, #0]
 8009470:	e7f9      	b.n	8009466 <_calloc_r+0x12>
 8009472:	462a      	mov	r2, r5
 8009474:	4621      	mov	r1, r4
 8009476:	f7fe fb96 	bl	8007ba6 <memset>
 800947a:	e7f4      	b.n	8009466 <_calloc_r+0x12>

0800947c <__ascii_mbtowc>:
 800947c:	b082      	sub	sp, #8
 800947e:	b901      	cbnz	r1, 8009482 <__ascii_mbtowc+0x6>
 8009480:	a901      	add	r1, sp, #4
 8009482:	b142      	cbz	r2, 8009496 <__ascii_mbtowc+0x1a>
 8009484:	b14b      	cbz	r3, 800949a <__ascii_mbtowc+0x1e>
 8009486:	7813      	ldrb	r3, [r2, #0]
 8009488:	600b      	str	r3, [r1, #0]
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	1e10      	subs	r0, r2, #0
 800948e:	bf18      	it	ne
 8009490:	2001      	movne	r0, #1
 8009492:	b002      	add	sp, #8
 8009494:	4770      	bx	lr
 8009496:	4610      	mov	r0, r2
 8009498:	e7fb      	b.n	8009492 <__ascii_mbtowc+0x16>
 800949a:	f06f 0001 	mvn.w	r0, #1
 800949e:	e7f8      	b.n	8009492 <__ascii_mbtowc+0x16>

080094a0 <__ascii_wctomb>:
 80094a0:	4603      	mov	r3, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	b141      	cbz	r1, 80094b8 <__ascii_wctomb+0x18>
 80094a6:	2aff      	cmp	r2, #255	; 0xff
 80094a8:	d904      	bls.n	80094b4 <__ascii_wctomb+0x14>
 80094aa:	228a      	movs	r2, #138	; 0x8a
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	4770      	bx	lr
 80094b4:	2001      	movs	r0, #1
 80094b6:	700a      	strb	r2, [r1, #0]
 80094b8:	4770      	bx	lr
	...

080094bc <fiprintf>:
 80094bc:	b40e      	push	{r1, r2, r3}
 80094be:	b503      	push	{r0, r1, lr}
 80094c0:	4601      	mov	r1, r0
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	4805      	ldr	r0, [pc, #20]	; (80094dc <fiprintf+0x20>)
 80094c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f000 f835 	bl	800953c <_vfiprintf_r>
 80094d2:	b002      	add	sp, #8
 80094d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d8:	b003      	add	sp, #12
 80094da:	4770      	bx	lr
 80094dc:	200000b0 	.word	0x200000b0

080094e0 <abort>:
 80094e0:	2006      	movs	r0, #6
 80094e2:	b508      	push	{r3, lr}
 80094e4:	f000 fa02 	bl	80098ec <raise>
 80094e8:	2001      	movs	r0, #1
 80094ea:	f7fa f8e2 	bl	80036b2 <_exit>

080094ee <__sfputc_r>:
 80094ee:	6893      	ldr	r3, [r2, #8]
 80094f0:	b410      	push	{r4}
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	6093      	str	r3, [r2, #8]
 80094f8:	da07      	bge.n	800950a <__sfputc_r+0x1c>
 80094fa:	6994      	ldr	r4, [r2, #24]
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	db01      	blt.n	8009504 <__sfputc_r+0x16>
 8009500:	290a      	cmp	r1, #10
 8009502:	d102      	bne.n	800950a <__sfputc_r+0x1c>
 8009504:	bc10      	pop	{r4}
 8009506:	f000 b933 	b.w	8009770 <__swbuf_r>
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	1c58      	adds	r0, r3, #1
 800950e:	6010      	str	r0, [r2, #0]
 8009510:	7019      	strb	r1, [r3, #0]
 8009512:	4608      	mov	r0, r1
 8009514:	bc10      	pop	{r4}
 8009516:	4770      	bx	lr

08009518 <__sfputs_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	4614      	mov	r4, r2
 8009520:	18d5      	adds	r5, r2, r3
 8009522:	42ac      	cmp	r4, r5
 8009524:	d101      	bne.n	800952a <__sfputs_r+0x12>
 8009526:	2000      	movs	r0, #0
 8009528:	e007      	b.n	800953a <__sfputs_r+0x22>
 800952a:	463a      	mov	r2, r7
 800952c:	4630      	mov	r0, r6
 800952e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009532:	f7ff ffdc 	bl	80094ee <__sfputc_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	d1f3      	bne.n	8009522 <__sfputs_r+0xa>
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800953c <_vfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	460d      	mov	r5, r1
 8009542:	4614      	mov	r4, r2
 8009544:	4698      	mov	r8, r3
 8009546:	4606      	mov	r6, r0
 8009548:	b09d      	sub	sp, #116	; 0x74
 800954a:	b118      	cbz	r0, 8009554 <_vfiprintf_r+0x18>
 800954c:	6a03      	ldr	r3, [r0, #32]
 800954e:	b90b      	cbnz	r3, 8009554 <_vfiprintf_r+0x18>
 8009550:	f7fe fab0 	bl	8007ab4 <__sinit>
 8009554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d405      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d402      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 8009560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009562:	f7fe fb9e 	bl	8007ca2 <__retarget_lock_acquire_recursive>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	071b      	lsls	r3, r3, #28
 800956a:	d501      	bpl.n	8009570 <_vfiprintf_r+0x34>
 800956c:	692b      	ldr	r3, [r5, #16]
 800956e:	b99b      	cbnz	r3, 8009598 <_vfiprintf_r+0x5c>
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f93a 	bl	80097ec <__swsetup_r>
 8009578:	b170      	cbz	r0, 8009598 <_vfiprintf_r+0x5c>
 800957a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957c:	07dc      	lsls	r4, r3, #31
 800957e:	d504      	bpl.n	800958a <_vfiprintf_r+0x4e>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b01d      	add	sp, #116	; 0x74
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	0598      	lsls	r0, r3, #22
 800958e:	d4f7      	bmi.n	8009580 <_vfiprintf_r+0x44>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7fe fb87 	bl	8007ca4 <__retarget_lock_release_recursive>
 8009596:	e7f3      	b.n	8009580 <_vfiprintf_r+0x44>
 8009598:	2300      	movs	r3, #0
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	2320      	movs	r3, #32
 800959e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a2:	2330      	movs	r3, #48	; 0x30
 80095a4:	f04f 0901 	mov.w	r9, #1
 80095a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800975c <_vfiprintf_r+0x220>
 80095b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b4:	4623      	mov	r3, r4
 80095b6:	469a      	mov	sl, r3
 80095b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095bc:	b10a      	cbz	r2, 80095c2 <_vfiprintf_r+0x86>
 80095be:	2a25      	cmp	r2, #37	; 0x25
 80095c0:	d1f9      	bne.n	80095b6 <_vfiprintf_r+0x7a>
 80095c2:	ebba 0b04 	subs.w	fp, sl, r4
 80095c6:	d00b      	beq.n	80095e0 <_vfiprintf_r+0xa4>
 80095c8:	465b      	mov	r3, fp
 80095ca:	4622      	mov	r2, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ffa2 	bl	8009518 <__sfputs_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f000 80a9 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095dc:	445a      	add	r2, fp
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a1 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f4:	f10a 0a01 	add.w	sl, sl, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009600:	931a      	str	r3, [sp, #104]	; 0x68
 8009602:	4654      	mov	r4, sl
 8009604:	2205      	movs	r2, #5
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	4854      	ldr	r0, [pc, #336]	; (800975c <_vfiprintf_r+0x220>)
 800960c:	f7fe fb4b 	bl	8007ca6 <memchr>
 8009610:	9a04      	ldr	r2, [sp, #16]
 8009612:	b9d8      	cbnz	r0, 800964c <_vfiprintf_r+0x110>
 8009614:	06d1      	lsls	r1, r2, #27
 8009616:	bf44      	itt	mi
 8009618:	2320      	movmi	r3, #32
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	0713      	lsls	r3, r2, #28
 8009620:	bf44      	itt	mi
 8009622:	232b      	movmi	r3, #43	; 0x2b
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	f89a 3000 	ldrb.w	r3, [sl]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d015      	beq.n	800965c <_vfiprintf_r+0x120>
 8009630:	4654      	mov	r4, sl
 8009632:	2000      	movs	r0, #0
 8009634:	f04f 0c0a 	mov.w	ip, #10
 8009638:	9a07      	ldr	r2, [sp, #28]
 800963a:	4621      	mov	r1, r4
 800963c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009640:	3b30      	subs	r3, #48	; 0x30
 8009642:	2b09      	cmp	r3, #9
 8009644:	d94d      	bls.n	80096e2 <_vfiprintf_r+0x1a6>
 8009646:	b1b0      	cbz	r0, 8009676 <_vfiprintf_r+0x13a>
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	e014      	b.n	8009676 <_vfiprintf_r+0x13a>
 800964c:	eba0 0308 	sub.w	r3, r0, r8
 8009650:	fa09 f303 	lsl.w	r3, r9, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	46a2      	mov	sl, r4
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	e7d2      	b.n	8009602 <_vfiprintf_r+0xc6>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d19      	adds	r1, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbb      	ittet	lt
 8009668:	425b      	neglt	r3, r3
 800966a:	f042 0202 	orrlt.w	r2, r2, #2
 800966e:	9307      	strge	r3, [sp, #28]
 8009670:	9307      	strlt	r3, [sp, #28]
 8009672:	bfb8      	it	lt
 8009674:	9204      	strlt	r2, [sp, #16]
 8009676:	7823      	ldrb	r3, [r4, #0]
 8009678:	2b2e      	cmp	r3, #46	; 0x2e
 800967a:	d10c      	bne.n	8009696 <_vfiprintf_r+0x15a>
 800967c:	7863      	ldrb	r3, [r4, #1]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d134      	bne.n	80096ec <_vfiprintf_r+0x1b0>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	3402      	adds	r4, #2
 8009686:	1d1a      	adds	r2, r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	9203      	str	r2, [sp, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	bfb8      	it	lt
 8009690:	f04f 33ff 	movlt.w	r3, #4294967295
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009760 <_vfiprintf_r+0x224>
 800969a:	2203      	movs	r2, #3
 800969c:	4650      	mov	r0, sl
 800969e:	7821      	ldrb	r1, [r4, #0]
 80096a0:	f7fe fb01 	bl	8007ca6 <memchr>
 80096a4:	b138      	cbz	r0, 80096b6 <_vfiprintf_r+0x17a>
 80096a6:	2240      	movs	r2, #64	; 0x40
 80096a8:	9b04      	ldr	r3, [sp, #16]
 80096aa:	eba0 000a 	sub.w	r0, r0, sl
 80096ae:	4082      	lsls	r2, r0
 80096b0:	4313      	orrs	r3, r2
 80096b2:	3401      	adds	r4, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	2206      	movs	r2, #6
 80096bc:	4829      	ldr	r0, [pc, #164]	; (8009764 <_vfiprintf_r+0x228>)
 80096be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c2:	f7fe faf0 	bl	8007ca6 <memchr>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d03f      	beq.n	800974a <_vfiprintf_r+0x20e>
 80096ca:	4b27      	ldr	r3, [pc, #156]	; (8009768 <_vfiprintf_r+0x22c>)
 80096cc:	bb1b      	cbnz	r3, 8009716 <_vfiprintf_r+0x1da>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	3308      	adds	r3, #8
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	443b      	add	r3, r7
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	e768      	b.n	80095b4 <_vfiprintf_r+0x78>
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ea:	e7a6      	b.n	800963a <_vfiprintf_r+0xfe>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f04f 0c0a 	mov.w	ip, #10
 80096f2:	4619      	mov	r1, r3
 80096f4:	3401      	adds	r4, #1
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	4620      	mov	r0, r4
 80096fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fe:	3a30      	subs	r2, #48	; 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d903      	bls.n	800970c <_vfiprintf_r+0x1d0>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c6      	beq.n	8009696 <_vfiprintf_r+0x15a>
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	e7c4      	b.n	8009696 <_vfiprintf_r+0x15a>
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	fb0c 2101 	mla	r1, ip, r1, r2
 8009714:	e7f0      	b.n	80096f8 <_vfiprintf_r+0x1bc>
 8009716:	ab03      	add	r3, sp, #12
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	462a      	mov	r2, r5
 800971c:	4630      	mov	r0, r6
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <_vfiprintf_r+0x230>)
 8009720:	a904      	add	r1, sp, #16
 8009722:	f7fd fd79 	bl	8007218 <_printf_float>
 8009726:	4607      	mov	r7, r0
 8009728:	1c78      	adds	r0, r7, #1
 800972a:	d1d6      	bne.n	80096da <_vfiprintf_r+0x19e>
 800972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972e:	07d9      	lsls	r1, r3, #31
 8009730:	d405      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	059a      	lsls	r2, r3, #22
 8009736:	d402      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973a:	f7fe fab3 	bl	8007ca4 <__retarget_lock_release_recursive>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	065b      	lsls	r3, r3, #25
 8009742:	f53f af1d 	bmi.w	8009580 <_vfiprintf_r+0x44>
 8009746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009748:	e71c      	b.n	8009584 <_vfiprintf_r+0x48>
 800974a:	ab03      	add	r3, sp, #12
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	462a      	mov	r2, r5
 8009750:	4630      	mov	r0, r6
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <_vfiprintf_r+0x230>)
 8009754:	a904      	add	r1, sp, #16
 8009756:	f7fd ffff 	bl	8007758 <_printf_i>
 800975a:	e7e4      	b.n	8009726 <_vfiprintf_r+0x1ea>
 800975c:	0800b15b 	.word	0x0800b15b
 8009760:	0800b161 	.word	0x0800b161
 8009764:	0800b165 	.word	0x0800b165
 8009768:	08007219 	.word	0x08007219
 800976c:	08009519 	.word	0x08009519

08009770 <__swbuf_r>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	460e      	mov	r6, r1
 8009774:	4614      	mov	r4, r2
 8009776:	4605      	mov	r5, r0
 8009778:	b118      	cbz	r0, 8009782 <__swbuf_r+0x12>
 800977a:	6a03      	ldr	r3, [r0, #32]
 800977c:	b90b      	cbnz	r3, 8009782 <__swbuf_r+0x12>
 800977e:	f7fe f999 	bl	8007ab4 <__sinit>
 8009782:	69a3      	ldr	r3, [r4, #24]
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	071a      	lsls	r2, r3, #28
 800978a:	d525      	bpl.n	80097d8 <__swbuf_r+0x68>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	b31b      	cbz	r3, 80097d8 <__swbuf_r+0x68>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	6922      	ldr	r2, [r4, #16]
 8009794:	b2f6      	uxtb	r6, r6
 8009796:	1a98      	subs	r0, r3, r2
 8009798:	6963      	ldr	r3, [r4, #20]
 800979a:	4637      	mov	r7, r6
 800979c:	4283      	cmp	r3, r0
 800979e:	dc04      	bgt.n	80097aa <__swbuf_r+0x3a>
 80097a0:	4621      	mov	r1, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7ff fdf2 	bl	800938c <_fflush_r>
 80097a8:	b9e0      	cbnz	r0, 80097e4 <__swbuf_r+0x74>
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	60a3      	str	r3, [r4, #8]
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	6022      	str	r2, [r4, #0]
 80097b6:	701e      	strb	r6, [r3, #0]
 80097b8:	6962      	ldr	r2, [r4, #20]
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	429a      	cmp	r2, r3
 80097be:	d004      	beq.n	80097ca <__swbuf_r+0x5a>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d506      	bpl.n	80097d4 <__swbuf_r+0x64>
 80097c6:	2e0a      	cmp	r6, #10
 80097c8:	d104      	bne.n	80097d4 <__swbuf_r+0x64>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7ff fddd 	bl	800938c <_fflush_r>
 80097d2:	b938      	cbnz	r0, 80097e4 <__swbuf_r+0x74>
 80097d4:	4638      	mov	r0, r7
 80097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f806 	bl	80097ec <__swsetup_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0d5      	beq.n	8009790 <__swbuf_r+0x20>
 80097e4:	f04f 37ff 	mov.w	r7, #4294967295
 80097e8:	e7f4      	b.n	80097d4 <__swbuf_r+0x64>
	...

080097ec <__swsetup_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4b2a      	ldr	r3, [pc, #168]	; (8009898 <__swsetup_r+0xac>)
 80097f0:	4605      	mov	r5, r0
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	460c      	mov	r4, r1
 80097f6:	b118      	cbz	r0, 8009800 <__swsetup_r+0x14>
 80097f8:	6a03      	ldr	r3, [r0, #32]
 80097fa:	b90b      	cbnz	r3, 8009800 <__swsetup_r+0x14>
 80097fc:	f7fe f95a 	bl	8007ab4 <__sinit>
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009806:	0718      	lsls	r0, r3, #28
 8009808:	d422      	bmi.n	8009850 <__swsetup_r+0x64>
 800980a:	06d9      	lsls	r1, r3, #27
 800980c:	d407      	bmi.n	800981e <__swsetup_r+0x32>
 800980e:	2309      	movs	r3, #9
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	e034      	b.n	8009888 <__swsetup_r+0x9c>
 800981e:	0758      	lsls	r0, r3, #29
 8009820:	d512      	bpl.n	8009848 <__swsetup_r+0x5c>
 8009822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009824:	b141      	cbz	r1, 8009838 <__swsetup_r+0x4c>
 8009826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800982a:	4299      	cmp	r1, r3
 800982c:	d002      	beq.n	8009834 <__swsetup_r+0x48>
 800982e:	4628      	mov	r0, r5
 8009830:	f7ff f8b6 	bl	80089a0 <_free_r>
 8009834:	2300      	movs	r3, #0
 8009836:	6363      	str	r3, [r4, #52]	; 0x34
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	2300      	movs	r3, #0
 8009842:	6063      	str	r3, [r4, #4]
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f043 0308 	orr.w	r3, r3, #8
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	b94b      	cbnz	r3, 8009868 <__swsetup_r+0x7c>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800985a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985e:	d003      	beq.n	8009868 <__swsetup_r+0x7c>
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f883 	bl	800996e <__smakebuf_r>
 8009868:	89a0      	ldrh	r0, [r4, #12]
 800986a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800986e:	f010 0301 	ands.w	r3, r0, #1
 8009872:	d00a      	beq.n	800988a <__swsetup_r+0x9e>
 8009874:	2300      	movs	r3, #0
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6963      	ldr	r3, [r4, #20]
 800987a:	425b      	negs	r3, r3
 800987c:	61a3      	str	r3, [r4, #24]
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	b943      	cbnz	r3, 8009894 <__swsetup_r+0xa8>
 8009882:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009886:	d1c4      	bne.n	8009812 <__swsetup_r+0x26>
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	0781      	lsls	r1, r0, #30
 800988c:	bf58      	it	pl
 800988e:	6963      	ldrpl	r3, [r4, #20]
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	e7f4      	b.n	800987e <__swsetup_r+0x92>
 8009894:	2000      	movs	r0, #0
 8009896:	e7f7      	b.n	8009888 <__swsetup_r+0x9c>
 8009898:	200000b0 	.word	0x200000b0

0800989c <_raise_r>:
 800989c:	291f      	cmp	r1, #31
 800989e:	b538      	push	{r3, r4, r5, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	d904      	bls.n	80098b0 <_raise_r+0x14>
 80098a6:	2316      	movs	r3, #22
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	f04f 30ff 	mov.w	r0, #4294967295
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098b2:	b112      	cbz	r2, 80098ba <_raise_r+0x1e>
 80098b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b8:	b94b      	cbnz	r3, 80098ce <_raise_r+0x32>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f830 	bl	8009920 <_getpid_r>
 80098c0:	462a      	mov	r2, r5
 80098c2:	4601      	mov	r1, r0
 80098c4:	4620      	mov	r0, r4
 80098c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ca:	f000 b817 	b.w	80098fc <_kill_r>
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d00a      	beq.n	80098e8 <_raise_r+0x4c>
 80098d2:	1c59      	adds	r1, r3, #1
 80098d4:	d103      	bne.n	80098de <_raise_r+0x42>
 80098d6:	2316      	movs	r3, #22
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	2001      	movs	r0, #1
 80098dc:	e7e7      	b.n	80098ae <_raise_r+0x12>
 80098de:	2400      	movs	r4, #0
 80098e0:	4628      	mov	r0, r5
 80098e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e6:	4798      	blx	r3
 80098e8:	2000      	movs	r0, #0
 80098ea:	e7e0      	b.n	80098ae <_raise_r+0x12>

080098ec <raise>:
 80098ec:	4b02      	ldr	r3, [pc, #8]	; (80098f8 <raise+0xc>)
 80098ee:	4601      	mov	r1, r0
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f7ff bfd3 	b.w	800989c <_raise_r>
 80098f6:	bf00      	nop
 80098f8:	200000b0 	.word	0x200000b0

080098fc <_kill_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	2300      	movs	r3, #0
 8009900:	4d06      	ldr	r5, [pc, #24]	; (800991c <_kill_r+0x20>)
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	f7f9 fec2 	bl	8003692 <_kill>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d102      	bne.n	8009918 <_kill_r+0x1c>
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	b103      	cbz	r3, 8009918 <_kill_r+0x1c>
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	bf00      	nop
 800991c:	200006ac 	.word	0x200006ac

08009920 <_getpid_r>:
 8009920:	f7f9 beb0 	b.w	8003684 <_getpid>

08009924 <__swhatbuf_r>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	4615      	mov	r5, r2
 800992e:	2900      	cmp	r1, #0
 8009930:	461e      	mov	r6, r3
 8009932:	b096      	sub	sp, #88	; 0x58
 8009934:	da0c      	bge.n	8009950 <__swhatbuf_r+0x2c>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	2100      	movs	r1, #0
 800993a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800993e:	bf0c      	ite	eq
 8009940:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009944:	2340      	movne	r3, #64	; 0x40
 8009946:	2000      	movs	r0, #0
 8009948:	6031      	str	r1, [r6, #0]
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	b016      	add	sp, #88	; 0x58
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	466a      	mov	r2, sp
 8009952:	f000 f849 	bl	80099e8 <_fstat_r>
 8009956:	2800      	cmp	r0, #0
 8009958:	dbed      	blt.n	8009936 <__swhatbuf_r+0x12>
 800995a:	9901      	ldr	r1, [sp, #4]
 800995c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009960:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009964:	4259      	negs	r1, r3
 8009966:	4159      	adcs	r1, r3
 8009968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996c:	e7eb      	b.n	8009946 <__swhatbuf_r+0x22>

0800996e <__smakebuf_r>:
 800996e:	898b      	ldrh	r3, [r1, #12]
 8009970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009972:	079d      	lsls	r5, r3, #30
 8009974:	4606      	mov	r6, r0
 8009976:	460c      	mov	r4, r1
 8009978:	d507      	bpl.n	800998a <__smakebuf_r+0x1c>
 800997a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	6123      	str	r3, [r4, #16]
 8009982:	2301      	movs	r3, #1
 8009984:	6163      	str	r3, [r4, #20]
 8009986:	b002      	add	sp, #8
 8009988:	bd70      	pop	{r4, r5, r6, pc}
 800998a:	466a      	mov	r2, sp
 800998c:	ab01      	add	r3, sp, #4
 800998e:	f7ff ffc9 	bl	8009924 <__swhatbuf_r>
 8009992:	9900      	ldr	r1, [sp, #0]
 8009994:	4605      	mov	r5, r0
 8009996:	4630      	mov	r0, r6
 8009998:	f7ff f872 	bl	8008a80 <_malloc_r>
 800999c:	b948      	cbnz	r0, 80099b2 <__smakebuf_r+0x44>
 800999e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a2:	059a      	lsls	r2, r3, #22
 80099a4:	d4ef      	bmi.n	8009986 <__smakebuf_r+0x18>
 80099a6:	f023 0303 	bic.w	r3, r3, #3
 80099aa:	f043 0302 	orr.w	r3, r3, #2
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	e7e3      	b.n	800997a <__smakebuf_r+0xc>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	6020      	str	r0, [r4, #0]
 80099b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	9b00      	ldr	r3, [sp, #0]
 80099be:	6120      	str	r0, [r4, #16]
 80099c0:	6163      	str	r3, [r4, #20]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	b15b      	cbz	r3, 80099de <__smakebuf_r+0x70>
 80099c6:	4630      	mov	r0, r6
 80099c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099cc:	f000 f81e 	bl	8009a0c <_isatty_r>
 80099d0:	b128      	cbz	r0, 80099de <__smakebuf_r+0x70>
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f023 0303 	bic.w	r3, r3, #3
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	431d      	orrs	r5, r3
 80099e2:	81a5      	strh	r5, [r4, #12]
 80099e4:	e7cf      	b.n	8009986 <__smakebuf_r+0x18>
	...

080099e8 <_fstat_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	2300      	movs	r3, #0
 80099ec:	4d06      	ldr	r5, [pc, #24]	; (8009a08 <_fstat_r+0x20>)
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	f7f9 feaa 	bl	800374e <_fstat>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	d102      	bne.n	8009a04 <_fstat_r+0x1c>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	b103      	cbz	r3, 8009a04 <_fstat_r+0x1c>
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	200006ac 	.word	0x200006ac

08009a0c <_isatty_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4d05      	ldr	r5, [pc, #20]	; (8009a28 <_isatty_r+0x1c>)
 8009a12:	4604      	mov	r4, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	f7f9 fea8 	bl	800376c <_isatty>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_isatty_r+0x1a>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_isatty_r+0x1a>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200006ac 	.word	0x200006ac
 8009a2c:	00000000 	.word	0x00000000

08009a30 <atan>:
 8009a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	4bb6      	ldr	r3, [pc, #728]	; (8009d10 <atan+0x2e0>)
 8009a36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a3a:	429e      	cmp	r6, r3
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	468b      	mov	fp, r1
 8009a42:	dd17      	ble.n	8009a74 <atan+0x44>
 8009a44:	4bb3      	ldr	r3, [pc, #716]	; (8009d14 <atan+0x2e4>)
 8009a46:	429e      	cmp	r6, r3
 8009a48:	dc01      	bgt.n	8009a4e <atan+0x1e>
 8009a4a:	d109      	bne.n	8009a60 <atan+0x30>
 8009a4c:	b140      	cbz	r0, 8009a60 <atan+0x30>
 8009a4e:	4622      	mov	r2, r4
 8009a50:	462b      	mov	r3, r5
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fb89 	bl	800016c <__adddf3>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	e005      	b.n	8009a6c <atan+0x3c>
 8009a60:	f1bb 0f00 	cmp.w	fp, #0
 8009a64:	4cac      	ldr	r4, [pc, #688]	; (8009d18 <atan+0x2e8>)
 8009a66:	f300 8121 	bgt.w	8009cac <atan+0x27c>
 8009a6a:	4dac      	ldr	r5, [pc, #688]	; (8009d1c <atan+0x2ec>)
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4629      	mov	r1, r5
 8009a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a74:	4baa      	ldr	r3, [pc, #680]	; (8009d20 <atan+0x2f0>)
 8009a76:	429e      	cmp	r6, r3
 8009a78:	dc11      	bgt.n	8009a9e <atan+0x6e>
 8009a7a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	dc0a      	bgt.n	8009a98 <atan+0x68>
 8009a82:	a38b      	add	r3, pc, #556	; (adr r3, 8009cb0 <atan+0x280>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fb70 	bl	800016c <__adddf3>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4ba5      	ldr	r3, [pc, #660]	; (8009d24 <atan+0x2f4>)
 8009a90:	f7f6 ffb2 	bl	80009f8 <__aeabi_dcmpgt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d1e9      	bne.n	8009a6c <atan+0x3c>
 8009a98:	f04f 3aff 	mov.w	sl, #4294967295
 8009a9c:	e027      	b.n	8009aee <atan+0xbe>
 8009a9e:	f000 f997 	bl	8009dd0 <fabs>
 8009aa2:	4ba1      	ldr	r3, [pc, #644]	; (8009d28 <atan+0x2f8>)
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	429e      	cmp	r6, r3
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	f300 80b8 	bgt.w	8009c1e <atan+0x1ee>
 8009aae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009ab2:	429e      	cmp	r6, r3
 8009ab4:	f300 809c 	bgt.w	8009bf0 <atan+0x1c0>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	f7f6 fb56 	bl	800016c <__adddf3>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4b98      	ldr	r3, [pc, #608]	; (8009d24 <atan+0x2f4>)
 8009ac4:	f7f6 fb50 	bl	8000168 <__aeabi_dsub>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 fb49 	bl	800016c <__adddf3>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4630      	mov	r0, r6
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f6 fe23 	bl	800072c <__aeabi_ddiv>
 8009ae6:	f04f 0a00 	mov.w	sl, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	460d      	mov	r5, r1
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fcef 	bl	80004d8 <__aeabi_dmul>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	f7f6 fce9 	bl	80004d8 <__aeabi_dmul>
 8009b06:	a36c      	add	r3, pc, #432	; (adr r3, 8009cb8 <atan+0x288>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	f7f6 fce2 	bl	80004d8 <__aeabi_dmul>
 8009b14:	a36a      	add	r3, pc, #424	; (adr r3, 8009cc0 <atan+0x290>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f7f6 fb27 	bl	800016c <__adddf3>
 8009b1e:	4632      	mov	r2, r6
 8009b20:	463b      	mov	r3, r7
 8009b22:	f7f6 fcd9 	bl	80004d8 <__aeabi_dmul>
 8009b26:	a368      	add	r3, pc, #416	; (adr r3, 8009cc8 <atan+0x298>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fb1e 	bl	800016c <__adddf3>
 8009b30:	4632      	mov	r2, r6
 8009b32:	463b      	mov	r3, r7
 8009b34:	f7f6 fcd0 	bl	80004d8 <__aeabi_dmul>
 8009b38:	a365      	add	r3, pc, #404	; (adr r3, 8009cd0 <atan+0x2a0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fb15 	bl	800016c <__adddf3>
 8009b42:	4632      	mov	r2, r6
 8009b44:	463b      	mov	r3, r7
 8009b46:	f7f6 fcc7 	bl	80004d8 <__aeabi_dmul>
 8009b4a:	a363      	add	r3, pc, #396	; (adr r3, 8009cd8 <atan+0x2a8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fb0c 	bl	800016c <__adddf3>
 8009b54:	4632      	mov	r2, r6
 8009b56:	463b      	mov	r3, r7
 8009b58:	f7f6 fcbe 	bl	80004d8 <__aeabi_dmul>
 8009b5c:	a360      	add	r3, pc, #384	; (adr r3, 8009ce0 <atan+0x2b0>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fb03 	bl	800016c <__adddf3>
 8009b66:	4642      	mov	r2, r8
 8009b68:	464b      	mov	r3, r9
 8009b6a:	f7f6 fcb5 	bl	80004d8 <__aeabi_dmul>
 8009b6e:	a35e      	add	r3, pc, #376	; (adr r3, 8009ce8 <atan+0x2b8>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	4680      	mov	r8, r0
 8009b76:	4689      	mov	r9, r1
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fcac 	bl	80004d8 <__aeabi_dmul>
 8009b80:	a35b      	add	r3, pc, #364	; (adr r3, 8009cf0 <atan+0x2c0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 faef 	bl	8000168 <__aeabi_dsub>
 8009b8a:	4632      	mov	r2, r6
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	f7f6 fca3 	bl	80004d8 <__aeabi_dmul>
 8009b92:	a359      	add	r3, pc, #356	; (adr r3, 8009cf8 <atan+0x2c8>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f7f6 fae6 	bl	8000168 <__aeabi_dsub>
 8009b9c:	4632      	mov	r2, r6
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	f7f6 fc9a 	bl	80004d8 <__aeabi_dmul>
 8009ba4:	a356      	add	r3, pc, #344	; (adr r3, 8009d00 <atan+0x2d0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	f7f6 fadd 	bl	8000168 <__aeabi_dsub>
 8009bae:	4632      	mov	r2, r6
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	f7f6 fc91 	bl	80004d8 <__aeabi_dmul>
 8009bb6:	a354      	add	r3, pc, #336	; (adr r3, 8009d08 <atan+0x2d8>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fad4 	bl	8000168 <__aeabi_dsub>
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	f7f6 fc88 	bl	80004d8 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 facc 	bl	800016c <__adddf3>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	f7f6 fc7e 	bl	80004d8 <__aeabi_dmul>
 8009bdc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	d144      	bne.n	8009c70 <atan+0x240>
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 fabd 	bl	8000168 <__aeabi_dsub>
 8009bee:	e734      	b.n	8009a5a <atan+0x2a>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <atan+0x2f4>)
 8009bf4:	f7f6 fab8 	bl	8000168 <__aeabi_dsub>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	4b48      	ldr	r3, [pc, #288]	; (8009d24 <atan+0x2f4>)
 8009c04:	f7f6 fab2 	bl	800016c <__adddf3>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fd8c 	bl	800072c <__aeabi_ddiv>
 8009c14:	f04f 0a01 	mov.w	sl, #1
 8009c18:	4604      	mov	r4, r0
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	e767      	b.n	8009aee <atan+0xbe>
 8009c1e:	4b43      	ldr	r3, [pc, #268]	; (8009d2c <atan+0x2fc>)
 8009c20:	429e      	cmp	r6, r3
 8009c22:	da1a      	bge.n	8009c5a <atan+0x22a>
 8009c24:	2200      	movs	r2, #0
 8009c26:	4b42      	ldr	r3, [pc, #264]	; (8009d30 <atan+0x300>)
 8009c28:	f7f6 fa9e 	bl	8000168 <__aeabi_dsub>
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460f      	mov	r7, r1
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <atan+0x300>)
 8009c38:	f7f6 fc4e 	bl	80004d8 <__aeabi_dmul>
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	4b39      	ldr	r3, [pc, #228]	; (8009d24 <atan+0x2f4>)
 8009c40:	f7f6 fa94 	bl	800016c <__adddf3>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 fd6e 	bl	800072c <__aeabi_ddiv>
 8009c50:	f04f 0a02 	mov.w	sl, #2
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	e749      	b.n	8009aee <atan+0xbe>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	2000      	movs	r0, #0
 8009c60:	4934      	ldr	r1, [pc, #208]	; (8009d34 <atan+0x304>)
 8009c62:	f7f6 fd63 	bl	800072c <__aeabi_ddiv>
 8009c66:	f04f 0a03 	mov.w	sl, #3
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	e73e      	b.n	8009aee <atan+0xbe>
 8009c70:	4b31      	ldr	r3, [pc, #196]	; (8009d38 <atan+0x308>)
 8009c72:	4e32      	ldr	r6, [pc, #200]	; (8009d3c <atan+0x30c>)
 8009c74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f6 fa74 	bl	8000168 <__aeabi_dsub>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	f7f6 fa70 	bl	8000168 <__aeabi_dsub>
 8009c88:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009c94:	f7f6 fa68 	bl	8000168 <__aeabi_dsub>
 8009c98:	f1bb 0f00 	cmp.w	fp, #0
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	f6bf aee4 	bge.w	8009a6c <atan+0x3c>
 8009ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca8:	461d      	mov	r5, r3
 8009caa:	e6df      	b.n	8009a6c <atan+0x3c>
 8009cac:	4d24      	ldr	r5, [pc, #144]	; (8009d40 <atan+0x310>)
 8009cae:	e6dd      	b.n	8009a6c <atan+0x3c>
 8009cb0:	8800759c 	.word	0x8800759c
 8009cb4:	7e37e43c 	.word	0x7e37e43c
 8009cb8:	e322da11 	.word	0xe322da11
 8009cbc:	3f90ad3a 	.word	0x3f90ad3a
 8009cc0:	24760deb 	.word	0x24760deb
 8009cc4:	3fa97b4b 	.word	0x3fa97b4b
 8009cc8:	a0d03d51 	.word	0xa0d03d51
 8009ccc:	3fb10d66 	.word	0x3fb10d66
 8009cd0:	c54c206e 	.word	0xc54c206e
 8009cd4:	3fb745cd 	.word	0x3fb745cd
 8009cd8:	920083ff 	.word	0x920083ff
 8009cdc:	3fc24924 	.word	0x3fc24924
 8009ce0:	5555550d 	.word	0x5555550d
 8009ce4:	3fd55555 	.word	0x3fd55555
 8009ce8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009cec:	bfa2b444 	.word	0xbfa2b444
 8009cf0:	52defd9a 	.word	0x52defd9a
 8009cf4:	3fadde2d 	.word	0x3fadde2d
 8009cf8:	af749a6d 	.word	0xaf749a6d
 8009cfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009d00:	fe231671 	.word	0xfe231671
 8009d04:	3fbc71c6 	.word	0x3fbc71c6
 8009d08:	9998ebc4 	.word	0x9998ebc4
 8009d0c:	3fc99999 	.word	0x3fc99999
 8009d10:	440fffff 	.word	0x440fffff
 8009d14:	7ff00000 	.word	0x7ff00000
 8009d18:	54442d18 	.word	0x54442d18
 8009d1c:	bff921fb 	.word	0xbff921fb
 8009d20:	3fdbffff 	.word	0x3fdbffff
 8009d24:	3ff00000 	.word	0x3ff00000
 8009d28:	3ff2ffff 	.word	0x3ff2ffff
 8009d2c:	40038000 	.word	0x40038000
 8009d30:	3ff80000 	.word	0x3ff80000
 8009d34:	bff00000 	.word	0xbff00000
 8009d38:	0800b190 	.word	0x0800b190
 8009d3c:	0800b170 	.word	0x0800b170
 8009d40:	3ff921fb 	.word	0x3ff921fb

08009d44 <cos>:
 8009d44:	b530      	push	{r4, r5, lr}
 8009d46:	4a20      	ldr	r2, [pc, #128]	; (8009dc8 <cos+0x84>)
 8009d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	b087      	sub	sp, #28
 8009d50:	dc06      	bgt.n	8009d60 <cos+0x1c>
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	b007      	add	sp, #28
 8009d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d5c:	f000 b884 	b.w	8009e68 <__kernel_cos>
 8009d60:	4a1a      	ldr	r2, [pc, #104]	; (8009dcc <cos+0x88>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	dd05      	ble.n	8009d72 <cos+0x2e>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	f7f6 f9fd 	bl	8000168 <__aeabi_dsub>
 8009d6e:	b007      	add	sp, #28
 8009d70:	bd30      	pop	{r4, r5, pc}
 8009d72:	aa02      	add	r2, sp, #8
 8009d74:	f000 f9f0 	bl	800a158 <__ieee754_rem_pio2>
 8009d78:	f000 0003 	and.w	r0, r0, #3
 8009d7c:	2801      	cmp	r0, #1
 8009d7e:	d009      	beq.n	8009d94 <cos+0x50>
 8009d80:	2802      	cmp	r0, #2
 8009d82:	d011      	beq.n	8009da8 <cos+0x64>
 8009d84:	b9b8      	cbnz	r0, 8009db6 <cos+0x72>
 8009d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d8e:	f000 f86b 	bl	8009e68 <__kernel_cos>
 8009d92:	e7ec      	b.n	8009d6e <cos+0x2a>
 8009d94:	9000      	str	r0, [sp, #0]
 8009d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d9e:	f000 f923 	bl	8009fe8 <__kernel_sin>
 8009da2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009da6:	e7e2      	b.n	8009d6e <cos+0x2a>
 8009da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db0:	f000 f85a 	bl	8009e68 <__kernel_cos>
 8009db4:	e7f5      	b.n	8009da2 <cos+0x5e>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc2:	f000 f911 	bl	8009fe8 <__kernel_sin>
 8009dc6:	e7d2      	b.n	8009d6e <cos+0x2a>
 8009dc8:	3fe921fb 	.word	0x3fe921fb
 8009dcc:	7fefffff 	.word	0x7fefffff

08009dd0 <fabs>:
 8009dd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4770      	bx	lr

08009dd8 <sin>:
 8009dd8:	b530      	push	{r4, r5, lr}
 8009dda:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <sin+0x84>)
 8009ddc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009de0:	4293      	cmp	r3, r2
 8009de2:	b087      	sub	sp, #28
 8009de4:	dc06      	bgt.n	8009df4 <sin+0x1c>
 8009de6:	2300      	movs	r3, #0
 8009de8:	2200      	movs	r2, #0
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	2300      	movs	r3, #0
 8009dee:	f000 f8fb 	bl	8009fe8 <__kernel_sin>
 8009df2:	e006      	b.n	8009e02 <sin+0x2a>
 8009df4:	4a1a      	ldr	r2, [pc, #104]	; (8009e60 <sin+0x88>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	dd05      	ble.n	8009e06 <sin+0x2e>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	f7f6 f9b3 	bl	8000168 <__aeabi_dsub>
 8009e02:	b007      	add	sp, #28
 8009e04:	bd30      	pop	{r4, r5, pc}
 8009e06:	aa02      	add	r2, sp, #8
 8009e08:	f000 f9a6 	bl	800a158 <__ieee754_rem_pio2>
 8009e0c:	f000 0003 	and.w	r0, r0, #3
 8009e10:	2801      	cmp	r0, #1
 8009e12:	d009      	beq.n	8009e28 <sin+0x50>
 8009e14:	2802      	cmp	r0, #2
 8009e16:	d00e      	beq.n	8009e36 <sin+0x5e>
 8009e18:	b9c0      	cbnz	r0, 8009e4c <sin+0x74>
 8009e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e1e:	2301      	movs	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e26:	e7e2      	b.n	8009dee <sin+0x16>
 8009e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e30:	f000 f81a 	bl	8009e68 <__kernel_cos>
 8009e34:	e7e5      	b.n	8009e02 <sin+0x2a>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e42:	f000 f8d1 	bl	8009fe8 <__kernel_sin>
 8009e46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009e4a:	e7da      	b.n	8009e02 <sin+0x2a>
 8009e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e54:	f000 f808 	bl	8009e68 <__kernel_cos>
 8009e58:	e7f5      	b.n	8009e46 <sin+0x6e>
 8009e5a:	bf00      	nop
 8009e5c:	3fe921fb 	.word	0x3fe921fb
 8009e60:	7fefffff 	.word	0x7fefffff
 8009e64:	00000000 	.word	0x00000000

08009e68 <__kernel_cos>:
 8009e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009e70:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009e74:	4680      	mov	r8, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	e9cd 2300 	strd	r2, r3, [sp]
 8009e7c:	da04      	bge.n	8009e88 <__kernel_cos+0x20>
 8009e7e:	f7f6 fddb 	bl	8000a38 <__aeabi_d2iz>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	f000 8086 	beq.w	8009f94 <__kernel_cos+0x12c>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fb22 	bl	80004d8 <__aeabi_dmul>
 8009e94:	2200      	movs	r2, #0
 8009e96:	4b4e      	ldr	r3, [pc, #312]	; (8009fd0 <__kernel_cos+0x168>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	f7f6 fb1c 	bl	80004d8 <__aeabi_dmul>
 8009ea0:	a33f      	add	r3, pc, #252	; (adr r3, 8009fa0 <__kernel_cos+0x138>)
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 fb13 	bl	80004d8 <__aeabi_dmul>
 8009eb2:	a33d      	add	r3, pc, #244	; (adr r3, 8009fa8 <__kernel_cos+0x140>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 f958 	bl	800016c <__adddf3>
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	f7f6 fb0a 	bl	80004d8 <__aeabi_dmul>
 8009ec4:	a33a      	add	r3, pc, #232	; (adr r3, 8009fb0 <__kernel_cos+0x148>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f7f6 f94d 	bl	8000168 <__aeabi_dsub>
 8009ece:	4622      	mov	r2, r4
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	f7f6 fb01 	bl	80004d8 <__aeabi_dmul>
 8009ed6:	a338      	add	r3, pc, #224	; (adr r3, 8009fb8 <__kernel_cos+0x150>)
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f7f6 f946 	bl	800016c <__adddf3>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	f7f6 faf8 	bl	80004d8 <__aeabi_dmul>
 8009ee8:	a335      	add	r3, pc, #212	; (adr r3, 8009fc0 <__kernel_cos+0x158>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 f93b 	bl	8000168 <__aeabi_dsub>
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	f7f6 faef 	bl	80004d8 <__aeabi_dmul>
 8009efa:	a333      	add	r3, pc, #204	; (adr r3, 8009fc8 <__kernel_cos+0x160>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 f934 	bl	800016c <__adddf3>
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	f7f6 fae6 	bl	80004d8 <__aeabi_dmul>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	f7f6 fae2 	bl	80004d8 <__aeabi_dmul>
 8009f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 fada 	bl	80004d8 <__aeabi_dmul>
 8009f24:	460b      	mov	r3, r1
 8009f26:	4602      	mov	r2, r0
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7f6 f91c 	bl	8000168 <__aeabi_dsub>
 8009f30:	4b28      	ldr	r3, [pc, #160]	; (8009fd4 <__kernel_cos+0x16c>)
 8009f32:	4680      	mov	r8, r0
 8009f34:	429e      	cmp	r6, r3
 8009f36:	4689      	mov	r9, r1
 8009f38:	dc0e      	bgt.n	8009f58 <__kernel_cos+0xf0>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4659      	mov	r1, fp
 8009f42:	f7f6 f911 	bl	8000168 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	2000      	movs	r0, #0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4922      	ldr	r1, [pc, #136]	; (8009fd8 <__kernel_cos+0x170>)
 8009f4e:	f7f6 f90b 	bl	8000168 <__aeabi_dsub>
 8009f52:	b003      	add	sp, #12
 8009f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f58:	2400      	movs	r4, #0
 8009f5a:	4b20      	ldr	r3, [pc, #128]	; (8009fdc <__kernel_cos+0x174>)
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	429e      	cmp	r6, r3
 8009f60:	bfcc      	ite	gt
 8009f62:	4d1f      	ldrgt	r5, [pc, #124]	; (8009fe0 <__kernel_cos+0x178>)
 8009f64:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009f68:	462b      	mov	r3, r5
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	491a      	ldr	r1, [pc, #104]	; (8009fd8 <__kernel_cos+0x170>)
 8009f6e:	f7f6 f8fb 	bl	8000168 <__aeabi_dsub>
 8009f72:	4622      	mov	r2, r4
 8009f74:	4606      	mov	r6, r0
 8009f76:	460f      	mov	r7, r1
 8009f78:	462b      	mov	r3, r5
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	4659      	mov	r1, fp
 8009f7e:	f7f6 f8f3 	bl	8000168 <__aeabi_dsub>
 8009f82:	4642      	mov	r2, r8
 8009f84:	464b      	mov	r3, r9
 8009f86:	f7f6 f8ef 	bl	8000168 <__aeabi_dsub>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	e7dc      	b.n	8009f4e <__kernel_cos+0xe6>
 8009f94:	2000      	movs	r0, #0
 8009f96:	4910      	ldr	r1, [pc, #64]	; (8009fd8 <__kernel_cos+0x170>)
 8009f98:	e7db      	b.n	8009f52 <__kernel_cos+0xea>
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w
 8009fa0:	be8838d4 	.word	0xbe8838d4
 8009fa4:	bda8fae9 	.word	0xbda8fae9
 8009fa8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009fac:	3e21ee9e 	.word	0x3e21ee9e
 8009fb0:	809c52ad 	.word	0x809c52ad
 8009fb4:	3e927e4f 	.word	0x3e927e4f
 8009fb8:	19cb1590 	.word	0x19cb1590
 8009fbc:	3efa01a0 	.word	0x3efa01a0
 8009fc0:	16c15177 	.word	0x16c15177
 8009fc4:	3f56c16c 	.word	0x3f56c16c
 8009fc8:	5555554c 	.word	0x5555554c
 8009fcc:	3fa55555 	.word	0x3fa55555
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	3fd33332 	.word	0x3fd33332
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	3fe90000 	.word	0x3fe90000
 8009fe0:	3fd20000 	.word	0x3fd20000
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <__kernel_sin>:
 8009fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	e9cd 2300 	strd	r2, r3, [sp]
 8009ff2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ff6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009ffa:	4682      	mov	sl, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a000:	da03      	bge.n	800a00a <__kernel_sin+0x22>
 800a002:	f7f6 fd19 	bl	8000a38 <__aeabi_d2iz>
 800a006:	2800      	cmp	r0, #0
 800a008:	d050      	beq.n	800a0ac <__kernel_sin+0xc4>
 800a00a:	4652      	mov	r2, sl
 800a00c:	4623      	mov	r3, r4
 800a00e:	4650      	mov	r0, sl
 800a010:	4621      	mov	r1, r4
 800a012:	f7f6 fa61 	bl	80004d8 <__aeabi_dmul>
 800a016:	4606      	mov	r6, r0
 800a018:	460f      	mov	r7, r1
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4650      	mov	r0, sl
 800a020:	4621      	mov	r1, r4
 800a022:	f7f6 fa59 	bl	80004d8 <__aeabi_dmul>
 800a026:	a33e      	add	r3, pc, #248	; (adr r3, 800a120 <__kernel_sin+0x138>)
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 fa50 	bl	80004d8 <__aeabi_dmul>
 800a038:	a33b      	add	r3, pc, #236	; (adr r3, 800a128 <__kernel_sin+0x140>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f893 	bl	8000168 <__aeabi_dsub>
 800a042:	4632      	mov	r2, r6
 800a044:	463b      	mov	r3, r7
 800a046:	f7f6 fa47 	bl	80004d8 <__aeabi_dmul>
 800a04a:	a339      	add	r3, pc, #228	; (adr r3, 800a130 <__kernel_sin+0x148>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 f88c 	bl	800016c <__adddf3>
 800a054:	4632      	mov	r2, r6
 800a056:	463b      	mov	r3, r7
 800a058:	f7f6 fa3e 	bl	80004d8 <__aeabi_dmul>
 800a05c:	a336      	add	r3, pc, #216	; (adr r3, 800a138 <__kernel_sin+0x150>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 f881 	bl	8000168 <__aeabi_dsub>
 800a066:	4632      	mov	r2, r6
 800a068:	463b      	mov	r3, r7
 800a06a:	f7f6 fa35 	bl	80004d8 <__aeabi_dmul>
 800a06e:	a334      	add	r3, pc, #208	; (adr r3, 800a140 <__kernel_sin+0x158>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f7f6 f87a 	bl	800016c <__adddf3>
 800a078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07c:	b9dd      	cbnz	r5, 800a0b6 <__kernel_sin+0xce>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 fa27 	bl	80004d8 <__aeabi_dmul>
 800a08a:	a32f      	add	r3, pc, #188	; (adr r3, 800a148 <__kernel_sin+0x160>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 f86a 	bl	8000168 <__aeabi_dsub>
 800a094:	4642      	mov	r2, r8
 800a096:	464b      	mov	r3, r9
 800a098:	f7f6 fa1e 	bl	80004d8 <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	f7f6 f862 	bl	800016c <__adddf3>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	b006      	add	sp, #24
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0bc:	4b24      	ldr	r3, [pc, #144]	; (800a150 <__kernel_sin+0x168>)
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	f7f6 fa03 	bl	80004d8 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0da:	f7f6 f845 	bl	8000168 <__aeabi_dsub>
 800a0de:	4632      	mov	r2, r6
 800a0e0:	463b      	mov	r3, r7
 800a0e2:	f7f6 f9f9 	bl	80004d8 <__aeabi_dmul>
 800a0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ea:	f7f6 f83d 	bl	8000168 <__aeabi_dsub>
 800a0ee:	a316      	add	r3, pc, #88	; (adr r3, 800a148 <__kernel_sin+0x160>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	f7f6 f9ec 	bl	80004d8 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f830 	bl	800016c <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4650      	mov	r0, sl
 800a112:	4621      	mov	r1, r4
 800a114:	f7f6 f828 	bl	8000168 <__aeabi_dsub>
 800a118:	e7c6      	b.n	800a0a8 <__kernel_sin+0xc0>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	5acfd57c 	.word	0x5acfd57c
 800a124:	3de5d93a 	.word	0x3de5d93a
 800a128:	8a2b9ceb 	.word	0x8a2b9ceb
 800a12c:	3e5ae5e6 	.word	0x3e5ae5e6
 800a130:	57b1fe7d 	.word	0x57b1fe7d
 800a134:	3ec71de3 	.word	0x3ec71de3
 800a138:	19c161d5 	.word	0x19c161d5
 800a13c:	3f2a01a0 	.word	0x3f2a01a0
 800a140:	1110f8a6 	.word	0x1110f8a6
 800a144:	3f811111 	.word	0x3f811111
 800a148:	55555549 	.word	0x55555549
 800a14c:	3fc55555 	.word	0x3fc55555
 800a150:	3fe00000 	.word	0x3fe00000
 800a154:	00000000 	.word	0x00000000

0800a158 <__ieee754_rem_pio2>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	4614      	mov	r4, r2
 800a15e:	4ac2      	ldr	r2, [pc, #776]	; (800a468 <__ieee754_rem_pio2+0x310>)
 800a160:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a164:	b08d      	sub	sp, #52	; 0x34
 800a166:	4592      	cmp	sl, r2
 800a168:	9104      	str	r1, [sp, #16]
 800a16a:	dc07      	bgt.n	800a17c <__ieee754_rem_pio2+0x24>
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	e9c4 0100 	strd	r0, r1, [r4]
 800a174:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a178:	2500      	movs	r5, #0
 800a17a:	e024      	b.n	800a1c6 <__ieee754_rem_pio2+0x6e>
 800a17c:	4abb      	ldr	r2, [pc, #748]	; (800a46c <__ieee754_rem_pio2+0x314>)
 800a17e:	4592      	cmp	sl, r2
 800a180:	dc72      	bgt.n	800a268 <__ieee754_rem_pio2+0x110>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	4dba      	ldr	r5, [pc, #744]	; (800a470 <__ieee754_rem_pio2+0x318>)
 800a186:	2b00      	cmp	r3, #0
 800a188:	a3a9      	add	r3, pc, #676	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2d8>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	dd36      	ble.n	800a1fe <__ieee754_rem_pio2+0xa6>
 800a190:	f7f5 ffea 	bl	8000168 <__aeabi_dsub>
 800a194:	45aa      	cmp	sl, r5
 800a196:	4606      	mov	r6, r0
 800a198:	460f      	mov	r7, r1
 800a19a:	d018      	beq.n	800a1ce <__ieee754_rem_pio2+0x76>
 800a19c:	a3a6      	add	r3, pc, #664	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2e0>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f5 ffe1 	bl	8000168 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	e9c4 2300 	strd	r2, r3, [r4]
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f5 ffd9 	bl	8000168 <__aeabi_dsub>
 800a1b6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2e0>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f5 ffd4 	bl	8000168 <__aeabi_dsub>
 800a1c0:	2501      	movs	r5, #1
 800a1c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	b00d      	add	sp, #52	; 0x34
 800a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ce:	a39c      	add	r3, pc, #624	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2e8>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f5 ffc8 	bl	8000168 <__aeabi_dsub>
 800a1d8:	a39b      	add	r3, pc, #620	; (adr r3, 800a448 <__ieee754_rem_pio2+0x2f0>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	f7f5 ffc1 	bl	8000168 <__aeabi_dsub>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	e9c4 2300 	strd	r2, r3, [r4]
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f5 ffb9 	bl	8000168 <__aeabi_dsub>
 800a1f6:	a394      	add	r3, pc, #592	; (adr r3, 800a448 <__ieee754_rem_pio2+0x2f0>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	e7de      	b.n	800a1bc <__ieee754_rem_pio2+0x64>
 800a1fe:	f7f5 ffb5 	bl	800016c <__adddf3>
 800a202:	45aa      	cmp	sl, r5
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	d016      	beq.n	800a238 <__ieee754_rem_pio2+0xe0>
 800a20a:	a38b      	add	r3, pc, #556	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2e0>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f5 ffac 	bl	800016c <__adddf3>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4630      	mov	r0, r6
 800a21a:	e9c4 2300 	strd	r2, r3, [r4]
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f5 ffa2 	bl	8000168 <__aeabi_dsub>
 800a224:	a384      	add	r3, pc, #528	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2e0>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f5 ff9f 	bl	800016c <__adddf3>
 800a22e:	f04f 35ff 	mov.w	r5, #4294967295
 800a232:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a236:	e7c6      	b.n	800a1c6 <__ieee754_rem_pio2+0x6e>
 800a238:	a381      	add	r3, pc, #516	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2e8>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f5 ff95 	bl	800016c <__adddf3>
 800a242:	a381      	add	r3, pc, #516	; (adr r3, 800a448 <__ieee754_rem_pio2+0x2f0>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	4606      	mov	r6, r0
 800a24a:	460f      	mov	r7, r1
 800a24c:	f7f5 ff8e 	bl	800016c <__adddf3>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4630      	mov	r0, r6
 800a256:	e9c4 2300 	strd	r2, r3, [r4]
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f5 ff84 	bl	8000168 <__aeabi_dsub>
 800a260:	a379      	add	r3, pc, #484	; (adr r3, 800a448 <__ieee754_rem_pio2+0x2f0>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	e7e0      	b.n	800a22a <__ieee754_rem_pio2+0xd2>
 800a268:	4a82      	ldr	r2, [pc, #520]	; (800a474 <__ieee754_rem_pio2+0x31c>)
 800a26a:	4592      	cmp	sl, r2
 800a26c:	f300 80d4 	bgt.w	800a418 <__ieee754_rem_pio2+0x2c0>
 800a270:	f7ff fdae 	bl	8009dd0 <fabs>
 800a274:	a376      	add	r3, pc, #472	; (adr r3, 800a450 <__ieee754_rem_pio2+0x2f8>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	f7f6 f92b 	bl	80004d8 <__aeabi_dmul>
 800a282:	2200      	movs	r2, #0
 800a284:	4b7c      	ldr	r3, [pc, #496]	; (800a478 <__ieee754_rem_pio2+0x320>)
 800a286:	f7f5 ff71 	bl	800016c <__adddf3>
 800a28a:	f7f6 fbd5 	bl	8000a38 <__aeabi_d2iz>
 800a28e:	4605      	mov	r5, r0
 800a290:	f7f6 f8b8 	bl	8000404 <__aeabi_i2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a29c:	a364      	add	r3, pc, #400	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2d8>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f6 f919 	bl	80004d8 <__aeabi_dmul>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	f7f5 ff5b 	bl	8000168 <__aeabi_dsub>
 800a2b2:	a361      	add	r3, pc, #388	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2e0>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4689      	mov	r9, r1
 800a2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c0:	f7f6 f90a 	bl	80004d8 <__aeabi_dmul>
 800a2c4:	2d1f      	cmp	r5, #31
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	dc0e      	bgt.n	800a2ea <__ieee754_rem_pio2+0x192>
 800a2cc:	4b6b      	ldr	r3, [pc, #428]	; (800a47c <__ieee754_rem_pio2+0x324>)
 800a2ce:	1e6a      	subs	r2, r5, #1
 800a2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d4:	4553      	cmp	r3, sl
 800a2d6:	d008      	beq.n	800a2ea <__ieee754_rem_pio2+0x192>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	463b      	mov	r3, r7
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	e9c4 0100 	strd	r0, r1, [r4]
 800a2e8:	e012      	b.n	800a310 <__ieee754_rem_pio2+0x1b8>
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f5 ff39 	bl	8000168 <__aeabi_dsub>
 800a2f6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a300:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800a304:	2b10      	cmp	r3, #16
 800a306:	dc1f      	bgt.n	800a348 <__ieee754_rem_pio2+0x1f0>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	e9c4 2300 	strd	r2, r3, [r4]
 800a310:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a314:	4640      	mov	r0, r8
 800a316:	4653      	mov	r3, sl
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f5 ff25 	bl	8000168 <__aeabi_dsub>
 800a31e:	4632      	mov	r2, r6
 800a320:	463b      	mov	r3, r7
 800a322:	f7f5 ff21 	bl	8000168 <__aeabi_dsub>
 800a326:	460b      	mov	r3, r1
 800a328:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a32c:	9904      	ldr	r1, [sp, #16]
 800a32e:	4602      	mov	r2, r0
 800a330:	2900      	cmp	r1, #0
 800a332:	f6bf af48 	bge.w	800a1c6 <__ieee754_rem_pio2+0x6e>
 800a336:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a33a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a33e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a342:	60e3      	str	r3, [r4, #12]
 800a344:	426d      	negs	r5, r5
 800a346:	e73e      	b.n	800a1c6 <__ieee754_rem_pio2+0x6e>
 800a348:	a33d      	add	r3, pc, #244	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2e8>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a352:	f7f6 f8c1 	bl	80004d8 <__aeabi_dmul>
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4640      	mov	r0, r8
 800a360:	4649      	mov	r1, r9
 800a362:	f7f5 ff01 	bl	8000168 <__aeabi_dsub>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4682      	mov	sl, r0
 800a36c:	468b      	mov	fp, r1
 800a36e:	4640      	mov	r0, r8
 800a370:	4649      	mov	r1, r9
 800a372:	f7f5 fef9 	bl	8000168 <__aeabi_dsub>
 800a376:	4632      	mov	r2, r6
 800a378:	463b      	mov	r3, r7
 800a37a:	f7f5 fef5 	bl	8000168 <__aeabi_dsub>
 800a37e:	a332      	add	r3, pc, #200	; (adr r3, 800a448 <__ieee754_rem_pio2+0x2f0>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38c:	f7f6 f8a4 	bl	80004d8 <__aeabi_dmul>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f5 fee8 	bl	8000168 <__aeabi_dsub>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4606      	mov	r6, r0
 800a39e:	460f      	mov	r7, r1
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	4659      	mov	r1, fp
 800a3a4:	f7f5 fee0 	bl	8000168 <__aeabi_dsub>
 800a3a8:	9a05      	ldr	r2, [sp, #20]
 800a3aa:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b31      	cmp	r3, #49	; 0x31
 800a3b2:	dc06      	bgt.n	800a3c2 <__ieee754_rem_pio2+0x26a>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	46d0      	mov	r8, sl
 800a3ba:	46d9      	mov	r9, fp
 800a3bc:	e9c4 2300 	strd	r2, r3, [r4]
 800a3c0:	e7a6      	b.n	800a310 <__ieee754_rem_pio2+0x1b8>
 800a3c2:	a325      	add	r3, pc, #148	; (adr r3, 800a458 <__ieee754_rem_pio2+0x300>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3cc:	f7f6 f884 	bl	80004d8 <__aeabi_dmul>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4650      	mov	r0, sl
 800a3da:	4659      	mov	r1, fp
 800a3dc:	f7f5 fec4 	bl	8000168 <__aeabi_dsub>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	4689      	mov	r9, r1
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	f7f5 feb8 	bl	8000168 <__aeabi_dsub>
 800a3f8:	a319      	add	r3, pc, #100	; (adr r3, 800a460 <__ieee754_rem_pio2+0x308>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a406:	f7f6 f867 	bl	80004d8 <__aeabi_dmul>
 800a40a:	4632      	mov	r2, r6
 800a40c:	463b      	mov	r3, r7
 800a40e:	f7f5 feab 	bl	8000168 <__aeabi_dsub>
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	e75f      	b.n	800a2d8 <__ieee754_rem_pio2+0x180>
 800a418:	4a19      	ldr	r2, [pc, #100]	; (800a480 <__ieee754_rem_pio2+0x328>)
 800a41a:	4592      	cmp	sl, r2
 800a41c:	dd32      	ble.n	800a484 <__ieee754_rem_pio2+0x32c>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	f7f5 fea1 	bl	8000168 <__aeabi_dsub>
 800a426:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a42a:	e9c4 0100 	strd	r0, r1, [r4]
 800a42e:	e6a3      	b.n	800a178 <__ieee754_rem_pio2+0x20>
 800a430:	54400000 	.word	0x54400000
 800a434:	3ff921fb 	.word	0x3ff921fb
 800a438:	1a626331 	.word	0x1a626331
 800a43c:	3dd0b461 	.word	0x3dd0b461
 800a440:	1a600000 	.word	0x1a600000
 800a444:	3dd0b461 	.word	0x3dd0b461
 800a448:	2e037073 	.word	0x2e037073
 800a44c:	3ba3198a 	.word	0x3ba3198a
 800a450:	6dc9c883 	.word	0x6dc9c883
 800a454:	3fe45f30 	.word	0x3fe45f30
 800a458:	2e000000 	.word	0x2e000000
 800a45c:	3ba3198a 	.word	0x3ba3198a
 800a460:	252049c1 	.word	0x252049c1
 800a464:	397b839a 	.word	0x397b839a
 800a468:	3fe921fb 	.word	0x3fe921fb
 800a46c:	4002d97b 	.word	0x4002d97b
 800a470:	3ff921fb 	.word	0x3ff921fb
 800a474:	413921fb 	.word	0x413921fb
 800a478:	3fe00000 	.word	0x3fe00000
 800a47c:	0800b1b0 	.word	0x0800b1b0
 800a480:	7fefffff 	.word	0x7fefffff
 800a484:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a488:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a48c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a490:	460f      	mov	r7, r1
 800a492:	4606      	mov	r6, r0
 800a494:	f7f6 fad0 	bl	8000a38 <__aeabi_d2iz>
 800a498:	f7f5 ffb4 	bl	8000404 <__aeabi_i2d>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4a8:	f7f5 fe5e 	bl	8000168 <__aeabi_dsub>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4b22      	ldr	r3, [pc, #136]	; (800a538 <__ieee754_rem_pio2+0x3e0>)
 800a4b0:	f7f6 f812 	bl	80004d8 <__aeabi_dmul>
 800a4b4:	460f      	mov	r7, r1
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	f7f6 fabe 	bl	8000a38 <__aeabi_d2iz>
 800a4bc:	f7f5 ffa2 	bl	8000404 <__aeabi_i2d>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4cc:	f7f5 fe4c 	bl	8000168 <__aeabi_dsub>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4b19      	ldr	r3, [pc, #100]	; (800a538 <__ieee754_rem_pio2+0x3e0>)
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	f04f 0803 	mov.w	r8, #3
 800a4dc:	2600      	movs	r6, #0
 800a4de:	2700      	movs	r7, #0
 800a4e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	46c2      	mov	sl, r8
 800a4f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4f6:	f7f6 fa57 	bl	80009a8 <__aeabi_dcmpeq>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d1f4      	bne.n	800a4e8 <__ieee754_rem_pio2+0x390>
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <__ieee754_rem_pio2+0x3e4>)
 800a500:	462a      	mov	r2, r5
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	2302      	movs	r3, #2
 800a506:	4621      	mov	r1, r4
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	a806      	add	r0, sp, #24
 800a50c:	4653      	mov	r3, sl
 800a50e:	f000 f817 	bl	800a540 <__kernel_rem_pio2>
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	4605      	mov	r5, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	f6bf ae55 	bge.w	800a1c6 <__ieee754_rem_pio2+0x6e>
 800a51c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a524:	e9c4 2300 	strd	r2, r3, [r4]
 800a528:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a530:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a534:	e706      	b.n	800a344 <__ieee754_rem_pio2+0x1ec>
 800a536:	bf00      	nop
 800a538:	41700000 	.word	0x41700000
 800a53c:	0800b230 	.word	0x0800b230

0800a540 <__kernel_rem_pio2>:
 800a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a544:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	9106      	str	r1, [sp, #24]
 800a54c:	4bb6      	ldr	r3, [pc, #728]	; (800a828 <__kernel_rem_pio2+0x2e8>)
 800a54e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a550:	f112 0f14 	cmn.w	r2, #20
 800a554:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a558:	bfa8      	it	ge
 800a55a:	1ed4      	subge	r4, r2, #3
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	bfb8      	it	lt
 800a562:	2400      	movlt	r4, #0
 800a564:	f103 33ff 	add.w	r3, r3, #4294967295
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	bfa4      	itt	ge
 800a56c:	2318      	movge	r3, #24
 800a56e:	fb94 f4f3 	sdivge	r4, r4, r3
 800a572:	f06f 0317 	mvn.w	r3, #23
 800a576:	fb04 3303 	mla	r3, r4, r3, r3
 800a57a:	eb03 0b02 	add.w	fp, r3, r2
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	1aa7      	subs	r7, r4, r2
 800a584:	eb03 0802 	add.w	r8, r3, r2
 800a588:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a58a:	2500      	movs	r5, #0
 800a58c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	9009      	str	r0, [sp, #36]	; 0x24
 800a596:	ae20      	add	r6, sp, #128	; 0x80
 800a598:	4545      	cmp	r5, r8
 800a59a:	dd14      	ble.n	800a5c6 <__kernel_rem_pio2+0x86>
 800a59c:	f04f 0800 	mov.w	r8, #0
 800a5a0:	9a08      	ldr	r2, [sp, #32]
 800a5a2:	ab20      	add	r3, sp, #128	; 0x80
 800a5a4:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a5a8:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	4598      	cmp	r8, r3
 800a5b0:	dc35      	bgt.n	800a61e <__kernel_rem_pio2+0xde>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f1a3 0908 	sub.w	r9, r3, #8
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	462f      	mov	r7, r5
 800a5be:	2600      	movs	r6, #0
 800a5c0:	e9cd 2300 	strd	r2, r3, [sp]
 800a5c4:	e01f      	b.n	800a606 <__kernel_rem_pio2+0xc6>
 800a5c6:	42ef      	cmn	r7, r5
 800a5c8:	d40b      	bmi.n	800a5e2 <__kernel_rem_pio2+0xa2>
 800a5ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5ce:	e9cd 2300 	strd	r2, r3, [sp]
 800a5d2:	f7f5 ff17 	bl	8000404 <__aeabi_i2d>
 800a5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a5de:	3501      	adds	r5, #1
 800a5e0:	e7da      	b.n	800a598 <__kernel_rem_pio2+0x58>
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	e7f8      	b.n	800a5da <__kernel_rem_pio2+0x9a>
 800a5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ec:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a5f0:	f7f5 ff72 	bl	80004d8 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5fc:	f7f5 fdb6 	bl	800016c <__adddf3>
 800a600:	e9cd 0100 	strd	r0, r1, [sp]
 800a604:	3601      	adds	r6, #1
 800a606:	9b07      	ldr	r3, [sp, #28]
 800a608:	3f08      	subs	r7, #8
 800a60a:	429e      	cmp	r6, r3
 800a60c:	ddec      	ble.n	800a5e8 <__kernel_rem_pio2+0xa8>
 800a60e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a612:	f108 0801 	add.w	r8, r8, #1
 800a616:	e8ea 2302 	strd	r2, r3, [sl], #8
 800a61a:	3508      	adds	r5, #8
 800a61c:	e7c6      	b.n	800a5ac <__kernel_rem_pio2+0x6c>
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	aa0c      	add	r2, sp, #48	; 0x30
 800a622:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a626:	930b      	str	r3, [sp, #44]	; 0x2c
 800a628:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a62a:	9e02      	ldr	r6, [sp, #8]
 800a62c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a630:	930a      	str	r3, [sp, #40]	; 0x28
 800a632:	ab98      	add	r3, sp, #608	; 0x260
 800a634:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a638:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800a63c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a63e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800a642:	46d0      	mov	r8, sl
 800a644:	46b1      	mov	r9, r6
 800a646:	af0c      	add	r7, sp, #48	; 0x30
 800a648:	9700      	str	r7, [sp, #0]
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	f1a8 0808 	sub.w	r8, r8, #8
 800a652:	dc70      	bgt.n	800a736 <__kernel_rem_pio2+0x1f6>
 800a654:	465a      	mov	r2, fp
 800a656:	4620      	mov	r0, r4
 800a658:	4629      	mov	r1, r5
 800a65a:	f000 fab1 	bl	800abc0 <scalbn>
 800a65e:	2200      	movs	r2, #0
 800a660:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a664:	4604      	mov	r4, r0
 800a666:	460d      	mov	r5, r1
 800a668:	f7f5 ff36 	bl	80004d8 <__aeabi_dmul>
 800a66c:	f000 fb24 	bl	800acb8 <floor>
 800a670:	2200      	movs	r2, #0
 800a672:	4b6e      	ldr	r3, [pc, #440]	; (800a82c <__kernel_rem_pio2+0x2ec>)
 800a674:	f7f5 ff30 	bl	80004d8 <__aeabi_dmul>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4620      	mov	r0, r4
 800a67e:	4629      	mov	r1, r5
 800a680:	f7f5 fd72 	bl	8000168 <__aeabi_dsub>
 800a684:	460d      	mov	r5, r1
 800a686:	4604      	mov	r4, r0
 800a688:	f7f6 f9d6 	bl	8000a38 <__aeabi_d2iz>
 800a68c:	9004      	str	r0, [sp, #16]
 800a68e:	f7f5 feb9 	bl	8000404 <__aeabi_i2d>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f5 fd65 	bl	8000168 <__aeabi_dsub>
 800a69e:	f1bb 0f00 	cmp.w	fp, #0
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	dd6f      	ble.n	800a788 <__kernel_rem_pio2+0x248>
 800a6a8:	1e71      	subs	r1, r6, #1
 800a6aa:	ab0c      	add	r3, sp, #48	; 0x30
 800a6ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6b0:	9c04      	ldr	r4, [sp, #16]
 800a6b2:	f1cb 0018 	rsb	r0, fp, #24
 800a6b6:	fa43 f200 	asr.w	r2, r3, r0
 800a6ba:	4414      	add	r4, r2
 800a6bc:	4082      	lsls	r2, r0
 800a6be:	1a9b      	subs	r3, r3, r2
 800a6c0:	aa0c      	add	r2, sp, #48	; 0x30
 800a6c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6c6:	f1cb 0217 	rsb	r2, fp, #23
 800a6ca:	9404      	str	r4, [sp, #16]
 800a6cc:	4113      	asrs	r3, r2
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	9b00      	ldr	r3, [sp, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dd66      	ble.n	800a7a4 <__kernel_rem_pio2+0x264>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a6dc:	4614      	mov	r4, r2
 800a6de:	9b04      	ldr	r3, [sp, #16]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	4296      	cmp	r6, r2
 800a6e6:	f300 80ad 	bgt.w	800a844 <__kernel_rem_pio2+0x304>
 800a6ea:	f1bb 0f00 	cmp.w	fp, #0
 800a6ee:	dd07      	ble.n	800a700 <__kernel_rem_pio2+0x1c0>
 800a6f0:	f1bb 0f01 	cmp.w	fp, #1
 800a6f4:	f000 80b5 	beq.w	800a862 <__kernel_rem_pio2+0x322>
 800a6f8:	f1bb 0f02 	cmp.w	fp, #2
 800a6fc:	f000 80bb 	beq.w	800a876 <__kernel_rem_pio2+0x336>
 800a700:	9b00      	ldr	r3, [sp, #0]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d14e      	bne.n	800a7a4 <__kernel_rem_pio2+0x264>
 800a706:	4642      	mov	r2, r8
 800a708:	464b      	mov	r3, r9
 800a70a:	2000      	movs	r0, #0
 800a70c:	4948      	ldr	r1, [pc, #288]	; (800a830 <__kernel_rem_pio2+0x2f0>)
 800a70e:	f7f5 fd2b 	bl	8000168 <__aeabi_dsub>
 800a712:	4680      	mov	r8, r0
 800a714:	4689      	mov	r9, r1
 800a716:	2c00      	cmp	r4, #0
 800a718:	d044      	beq.n	800a7a4 <__kernel_rem_pio2+0x264>
 800a71a:	465a      	mov	r2, fp
 800a71c:	2000      	movs	r0, #0
 800a71e:	4944      	ldr	r1, [pc, #272]	; (800a830 <__kernel_rem_pio2+0x2f0>)
 800a720:	f000 fa4e 	bl	800abc0 <scalbn>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4640      	mov	r0, r8
 800a72a:	4649      	mov	r1, r9
 800a72c:	f7f5 fd1c 	bl	8000168 <__aeabi_dsub>
 800a730:	4680      	mov	r8, r0
 800a732:	4689      	mov	r9, r1
 800a734:	e036      	b.n	800a7a4 <__kernel_rem_pio2+0x264>
 800a736:	2200      	movs	r2, #0
 800a738:	4b3e      	ldr	r3, [pc, #248]	; (800a834 <__kernel_rem_pio2+0x2f4>)
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f5 fecb 	bl	80004d8 <__aeabi_dmul>
 800a742:	f7f6 f979 	bl	8000a38 <__aeabi_d2iz>
 800a746:	f7f5 fe5d 	bl	8000404 <__aeabi_i2d>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a752:	2200      	movs	r2, #0
 800a754:	4b38      	ldr	r3, [pc, #224]	; (800a838 <__kernel_rem_pio2+0x2f8>)
 800a756:	f7f5 febf 	bl	80004d8 <__aeabi_dmul>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f5 fd01 	bl	8000168 <__aeabi_dsub>
 800a766:	f7f6 f967 	bl	8000a38 <__aeabi_d2iz>
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a770:	f843 0b04 	str.w	r0, [r3], #4
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a77a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a77e:	f7f5 fcf5 	bl	800016c <__adddf3>
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	e760      	b.n	800a64a <__kernel_rem_pio2+0x10a>
 800a788:	d105      	bne.n	800a796 <__kernel_rem_pio2+0x256>
 800a78a:	1e73      	subs	r3, r6, #1
 800a78c:	aa0c      	add	r2, sp, #48	; 0x30
 800a78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a792:	15db      	asrs	r3, r3, #23
 800a794:	e79b      	b.n	800a6ce <__kernel_rem_pio2+0x18e>
 800a796:	2200      	movs	r2, #0
 800a798:	4b28      	ldr	r3, [pc, #160]	; (800a83c <__kernel_rem_pio2+0x2fc>)
 800a79a:	f7f6 f923 	bl	80009e4 <__aeabi_dcmpge>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d13e      	bne.n	800a820 <__kernel_rem_pio2+0x2e0>
 800a7a2:	9000      	str	r0, [sp, #0]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	f7f6 f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f000 80b2 	beq.w	800a91a <__kernel_rem_pio2+0x3da>
 800a7b6:	1e74      	subs	r4, r6, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	9902      	ldr	r1, [sp, #8]
 800a7be:	428b      	cmp	r3, r1
 800a7c0:	da60      	bge.n	800a884 <__kernel_rem_pio2+0x344>
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	d075      	beq.n	800a8b2 <__kernel_rem_pio2+0x372>
 800a7c6:	ab0c      	add	r3, sp, #48	; 0x30
 800a7c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a7cc:	f1ab 0b18 	sub.w	fp, fp, #24
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 80a0 	beq.w	800a916 <__kernel_rem_pio2+0x3d6>
 800a7d6:	465a      	mov	r2, fp
 800a7d8:	2000      	movs	r0, #0
 800a7da:	4915      	ldr	r1, [pc, #84]	; (800a830 <__kernel_rem_pio2+0x2f0>)
 800a7dc:	f000 f9f0 	bl	800abc0 <scalbn>
 800a7e0:	46a2      	mov	sl, r4
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	f04f 0800 	mov.w	r8, #0
 800a7ea:	ab70      	add	r3, sp, #448	; 0x1c0
 800a7ec:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800a834 <__kernel_rem_pio2+0x2f4>
 800a7f0:	00e5      	lsls	r5, r4, #3
 800a7f2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800a7f6:	f1ba 0f00 	cmp.w	sl, #0
 800a7fa:	f280 80c4 	bge.w	800a986 <__kernel_rem_pio2+0x446>
 800a7fe:	4626      	mov	r6, r4
 800a800:	2e00      	cmp	r6, #0
 800a802:	f2c0 80f6 	blt.w	800a9f2 <__kernel_rem_pio2+0x4b2>
 800a806:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <__kernel_rem_pio2+0x300>)
 800a808:	f04f 0a00 	mov.w	sl, #0
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	ab70      	add	r3, sp, #448	; 0x1c0
 800a810:	f04f 0b00 	mov.w	fp, #0
 800a814:	f04f 0800 	mov.w	r8, #0
 800a818:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a81c:	1ba7      	subs	r7, r4, r6
 800a81e:	e0dc      	b.n	800a9da <__kernel_rem_pio2+0x49a>
 800a820:	2302      	movs	r3, #2
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	e757      	b.n	800a6d6 <__kernel_rem_pio2+0x196>
 800a826:	bf00      	nop
 800a828:	0800b378 	.word	0x0800b378
 800a82c:	40200000 	.word	0x40200000
 800a830:	3ff00000 	.word	0x3ff00000
 800a834:	3e700000 	.word	0x3e700000
 800a838:	41700000 	.word	0x41700000
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	0800b338 	.word	0x0800b338
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	b944      	cbnz	r4, 800a85a <__kernel_rem_pio2+0x31a>
 800a848:	b11b      	cbz	r3, 800a852 <__kernel_rem_pio2+0x312>
 800a84a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	2301      	movs	r3, #1
 800a852:	461c      	mov	r4, r3
 800a854:	3201      	adds	r2, #1
 800a856:	3704      	adds	r7, #4
 800a858:	e744      	b.n	800a6e4 <__kernel_rem_pio2+0x1a4>
 800a85a:	1acb      	subs	r3, r1, r3
 800a85c:	603b      	str	r3, [r7, #0]
 800a85e:	4623      	mov	r3, r4
 800a860:	e7f7      	b.n	800a852 <__kernel_rem_pio2+0x312>
 800a862:	1e72      	subs	r2, r6, #1
 800a864:	ab0c      	add	r3, sp, #48	; 0x30
 800a866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a86e:	a90c      	add	r1, sp, #48	; 0x30
 800a870:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a874:	e744      	b.n	800a700 <__kernel_rem_pio2+0x1c0>
 800a876:	1e72      	subs	r2, r6, #1
 800a878:	ab0c      	add	r3, sp, #48	; 0x30
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a882:	e7f4      	b.n	800a86e <__kernel_rem_pio2+0x32e>
 800a884:	a90c      	add	r1, sp, #48	; 0x30
 800a886:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	430a      	orrs	r2, r1
 800a88e:	e795      	b.n	800a7bc <__kernel_rem_pio2+0x27c>
 800a890:	3301      	adds	r3, #1
 800a892:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a896:	2900      	cmp	r1, #0
 800a898:	d0fa      	beq.n	800a890 <__kernel_rem_pio2+0x350>
 800a89a:	9a08      	ldr	r2, [sp, #32]
 800a89c:	a920      	add	r1, sp, #128	; 0x80
 800a89e:	18b2      	adds	r2, r6, r2
 800a8a0:	f106 0801 	add.w	r8, r6, #1
 800a8a4:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a8a8:	18f4      	adds	r4, r6, r3
 800a8aa:	4544      	cmp	r4, r8
 800a8ac:	da04      	bge.n	800a8b8 <__kernel_rem_pio2+0x378>
 800a8ae:	4626      	mov	r6, r4
 800a8b0:	e6bf      	b.n	800a632 <__kernel_rem_pio2+0xf2>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8b6:	e7ec      	b.n	800a892 <__kernel_rem_pio2+0x352>
 800a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ba:	f04f 0900 	mov.w	r9, #0
 800a8be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a8c2:	f7f5 fd9f 	bl	8000404 <__aeabi_i2d>
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	2700      	movs	r7, #0
 800a8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8cc:	e9c5 0100 	strd	r0, r1, [r5]
 800a8d0:	3b08      	subs	r3, #8
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	9504      	str	r5, [sp, #16]
 800a8d6:	9b07      	ldr	r3, [sp, #28]
 800a8d8:	4599      	cmp	r9, r3
 800a8da:	dd05      	ble.n	800a8e8 <__kernel_rem_pio2+0x3a8>
 800a8dc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800a8e0:	f108 0801 	add.w	r8, r8, #1
 800a8e4:	3508      	adds	r5, #8
 800a8e6:	e7e0      	b.n	800a8aa <__kernel_rem_pio2+0x36a>
 800a8e8:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a8ec:	9900      	ldr	r1, [sp, #0]
 800a8ee:	f109 0901 	add.w	r9, r9, #1
 800a8f2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a8f6:	9100      	str	r1, [sp, #0]
 800a8f8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800a8fc:	f8cd c010 	str.w	ip, [sp, #16]
 800a900:	f7f5 fdea 	bl	80004d8 <__aeabi_dmul>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f5 fc2e 	bl	800016c <__adddf3>
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	e7df      	b.n	800a8d6 <__kernel_rem_pio2+0x396>
 800a916:	3c01      	subs	r4, #1
 800a918:	e755      	b.n	800a7c6 <__kernel_rem_pio2+0x286>
 800a91a:	f1cb 0200 	rsb	r2, fp, #0
 800a91e:	4640      	mov	r0, r8
 800a920:	4649      	mov	r1, r9
 800a922:	f000 f94d 	bl	800abc0 <scalbn>
 800a926:	2200      	movs	r2, #0
 800a928:	4ba3      	ldr	r3, [pc, #652]	; (800abb8 <__kernel_rem_pio2+0x678>)
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	f7f6 f859 	bl	80009e4 <__aeabi_dcmpge>
 800a932:	b1f8      	cbz	r0, 800a974 <__kernel_rem_pio2+0x434>
 800a934:	2200      	movs	r2, #0
 800a936:	4ba1      	ldr	r3, [pc, #644]	; (800abbc <__kernel_rem_pio2+0x67c>)
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fdcc 	bl	80004d8 <__aeabi_dmul>
 800a940:	f7f6 f87a 	bl	8000a38 <__aeabi_d2iz>
 800a944:	4607      	mov	r7, r0
 800a946:	f7f5 fd5d 	bl	8000404 <__aeabi_i2d>
 800a94a:	2200      	movs	r2, #0
 800a94c:	4b9a      	ldr	r3, [pc, #616]	; (800abb8 <__kernel_rem_pio2+0x678>)
 800a94e:	f7f5 fdc3 	bl	80004d8 <__aeabi_dmul>
 800a952:	460b      	mov	r3, r1
 800a954:	4602      	mov	r2, r0
 800a956:	4629      	mov	r1, r5
 800a958:	4620      	mov	r0, r4
 800a95a:	f7f5 fc05 	bl	8000168 <__aeabi_dsub>
 800a95e:	f7f6 f86b 	bl	8000a38 <__aeabi_d2iz>
 800a962:	1c74      	adds	r4, r6, #1
 800a964:	ab0c      	add	r3, sp, #48	; 0x30
 800a966:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a96a:	f10b 0b18 	add.w	fp, fp, #24
 800a96e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800a972:	e730      	b.n	800a7d6 <__kernel_rem_pio2+0x296>
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f6 f85e 	bl	8000a38 <__aeabi_d2iz>
 800a97c:	ab0c      	add	r3, sp, #48	; 0x30
 800a97e:	4634      	mov	r4, r6
 800a980:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a984:	e727      	b.n	800a7d6 <__kernel_rem_pio2+0x296>
 800a986:	ab0c      	add	r3, sp, #48	; 0x30
 800a988:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a98c:	f7f5 fd3a 	bl	8000404 <__aeabi_i2d>
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	f7f5 fda0 	bl	80004d8 <__aeabi_dmul>
 800a998:	4642      	mov	r2, r8
 800a99a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800a99e:	464b      	mov	r3, r9
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fd98 	bl	80004d8 <__aeabi_dmul>
 800a9a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	e721      	b.n	800a7f6 <__kernel_rem_pio2+0x2b6>
 800a9b2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a9b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a9ba:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a9be:	f8cd c01c 	str.w	ip, [sp, #28]
 800a9c2:	f7f5 fd89 	bl	80004d8 <__aeabi_dmul>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	f7f5 fbcd 	bl	800016c <__adddf3>
 800a9d2:	4682      	mov	sl, r0
 800a9d4:	468b      	mov	fp, r1
 800a9d6:	f108 0801 	add.w	r8, r8, #1
 800a9da:	9b02      	ldr	r3, [sp, #8]
 800a9dc:	4598      	cmp	r8, r3
 800a9de:	dc01      	bgt.n	800a9e4 <__kernel_rem_pio2+0x4a4>
 800a9e0:	45b8      	cmp	r8, r7
 800a9e2:	dde6      	ble.n	800a9b2 <__kernel_rem_pio2+0x472>
 800a9e4:	ab48      	add	r3, sp, #288	; 0x120
 800a9e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a9ea:	e9c7 ab00 	strd	sl, fp, [r7]
 800a9ee:	3e01      	subs	r6, #1
 800a9f0:	e706      	b.n	800a800 <__kernel_rem_pio2+0x2c0>
 800a9f2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	dc09      	bgt.n	800aa0c <__kernel_rem_pio2+0x4cc>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	dc32      	bgt.n	800aa62 <__kernel_rem_pio2+0x522>
 800a9fc:	d058      	beq.n	800aab0 <__kernel_rem_pio2+0x570>
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	f003 0007 	and.w	r0, r3, #7
 800aa04:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d1f5      	bne.n	800a9fe <__kernel_rem_pio2+0x4be>
 800aa12:	ab48      	add	r3, sp, #288	; 0x120
 800aa14:	441d      	add	r5, r3
 800aa16:	46aa      	mov	sl, r5
 800aa18:	46a3      	mov	fp, r4
 800aa1a:	f1bb 0f00 	cmp.w	fp, #0
 800aa1e:	dc74      	bgt.n	800ab0a <__kernel_rem_pio2+0x5ca>
 800aa20:	46aa      	mov	sl, r5
 800aa22:	46a3      	mov	fp, r4
 800aa24:	f1bb 0f01 	cmp.w	fp, #1
 800aa28:	f300 808e 	bgt.w	800ab48 <__kernel_rem_pio2+0x608>
 800aa2c:	2700      	movs	r7, #0
 800aa2e:	463e      	mov	r6, r7
 800aa30:	2c01      	cmp	r4, #1
 800aa32:	f300 80a8 	bgt.w	800ab86 <__kernel_rem_pio2+0x646>
 800aa36:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800aa3a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800aa3e:	9b00      	ldr	r3, [sp, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 80aa 	bne.w	800ab9a <__kernel_rem_pio2+0x65a>
 800aa46:	4603      	mov	r3, r0
 800aa48:	462a      	mov	r2, r5
 800aa4a:	9806      	ldr	r0, [sp, #24]
 800aa4c:	e9c0 2300 	strd	r2, r3, [r0]
 800aa50:	4622      	mov	r2, r4
 800aa52:	460b      	mov	r3, r1
 800aa54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa58:	463a      	mov	r2, r7
 800aa5a:	4633      	mov	r3, r6
 800aa5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800aa60:	e7cd      	b.n	800a9fe <__kernel_rem_pio2+0x4be>
 800aa62:	2000      	movs	r0, #0
 800aa64:	46a0      	mov	r8, r4
 800aa66:	4601      	mov	r1, r0
 800aa68:	ab48      	add	r3, sp, #288	; 0x120
 800aa6a:	441d      	add	r5, r3
 800aa6c:	f1b8 0f00 	cmp.w	r8, #0
 800aa70:	da38      	bge.n	800aae4 <__kernel_rem_pio2+0x5a4>
 800aa72:	9b00      	ldr	r3, [sp, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d03c      	beq.n	800aaf2 <__kernel_rem_pio2+0x5b2>
 800aa78:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	462b      	mov	r3, r5
 800aa80:	9d06      	ldr	r5, [sp, #24]
 800aa82:	2601      	movs	r6, #1
 800aa84:	e9c5 2300 	strd	r2, r3, [r5]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800aa8e:	f7f5 fb6b 	bl	8000168 <__aeabi_dsub>
 800aa92:	4684      	mov	ip, r0
 800aa94:	460f      	mov	r7, r1
 800aa96:	ad48      	add	r5, sp, #288	; 0x120
 800aa98:	42b4      	cmp	r4, r6
 800aa9a:	da2c      	bge.n	800aaf6 <__kernel_rem_pio2+0x5b6>
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	b10b      	cbz	r3, 800aaa4 <__kernel_rem_pio2+0x564>
 800aaa0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800aaa4:	4662      	mov	r2, ip
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	9906      	ldr	r1, [sp, #24]
 800aaaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800aaae:	e7a6      	b.n	800a9fe <__kernel_rem_pio2+0x4be>
 800aab0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800aab2:	ab48      	add	r3, sp, #288	; 0x120
 800aab4:	4637      	mov	r7, r6
 800aab6:	441d      	add	r5, r3
 800aab8:	2c00      	cmp	r4, #0
 800aaba:	da09      	bge.n	800aad0 <__kernel_rem_pio2+0x590>
 800aabc:	9b00      	ldr	r3, [sp, #0]
 800aabe:	b10b      	cbz	r3, 800aac4 <__kernel_rem_pio2+0x584>
 800aac0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800aac4:	4632      	mov	r2, r6
 800aac6:	463b      	mov	r3, r7
 800aac8:	9906      	ldr	r1, [sp, #24]
 800aaca:	e9c1 2300 	strd	r2, r3, [r1]
 800aace:	e796      	b.n	800a9fe <__kernel_rem_pio2+0x4be>
 800aad0:	4630      	mov	r0, r6
 800aad2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800aad6:	4639      	mov	r1, r7
 800aad8:	f7f5 fb48 	bl	800016c <__adddf3>
 800aadc:	3c01      	subs	r4, #1
 800aade:	4606      	mov	r6, r0
 800aae0:	460f      	mov	r7, r1
 800aae2:	e7e9      	b.n	800aab8 <__kernel_rem_pio2+0x578>
 800aae4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800aae8:	f7f5 fb40 	bl	800016c <__adddf3>
 800aaec:	f108 38ff 	add.w	r8, r8, #4294967295
 800aaf0:	e7bc      	b.n	800aa6c <__kernel_rem_pio2+0x52c>
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	e7c2      	b.n	800aa7c <__kernel_rem_pio2+0x53c>
 800aaf6:	4660      	mov	r0, ip
 800aaf8:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fb35 	bl	800016c <__adddf3>
 800ab02:	3601      	adds	r6, #1
 800ab04:	4684      	mov	ip, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	e7c6      	b.n	800aa98 <__kernel_rem_pio2+0x558>
 800ab0a:	e9da 6700 	ldrd	r6, r7, [sl]
 800ab0e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ab12:	4632      	mov	r2, r6
 800ab14:	463b      	mov	r3, r7
 800ab16:	4640      	mov	r0, r8
 800ab18:	4649      	mov	r1, r9
 800ab1a:	f7f5 fb27 	bl	800016c <__adddf3>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab26:	4640      	mov	r0, r8
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f7f5 fb1d 	bl	8000168 <__aeabi_dsub>
 800ab2e:	4632      	mov	r2, r6
 800ab30:	463b      	mov	r3, r7
 800ab32:	f7f5 fb1b 	bl	800016c <__adddf3>
 800ab36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab3a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ab3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab42:	e9ca 2300 	strd	r2, r3, [sl]
 800ab46:	e768      	b.n	800aa1a <__kernel_rem_pio2+0x4da>
 800ab48:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab4c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	4630      	mov	r0, r6
 800ab56:	4639      	mov	r1, r7
 800ab58:	f7f5 fb08 	bl	800016c <__adddf3>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fafe 	bl	8000168 <__aeabi_dsub>
 800ab6c:	4642      	mov	r2, r8
 800ab6e:	464b      	mov	r3, r9
 800ab70:	f7f5 fafc 	bl	800016c <__adddf3>
 800ab74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab78:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ab7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab80:	e9ca 2300 	strd	r2, r3, [sl]
 800ab84:	e74e      	b.n	800aa24 <__kernel_rem_pio2+0x4e4>
 800ab86:	4638      	mov	r0, r7
 800ab88:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	f7f5 faed 	bl	800016c <__adddf3>
 800ab92:	3c01      	subs	r4, #1
 800ab94:	4607      	mov	r7, r0
 800ab96:	460e      	mov	r6, r1
 800ab98:	e74a      	b.n	800aa30 <__kernel_rem_pio2+0x4f0>
 800ab9a:	9b06      	ldr	r3, [sp, #24]
 800ab9c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800aba0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800aba4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800aba8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800abac:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800abb0:	601d      	str	r5, [r3, #0]
 800abb2:	615e      	str	r6, [r3, #20]
 800abb4:	e723      	b.n	800a9fe <__kernel_rem_pio2+0x4be>
 800abb6:	bf00      	nop
 800abb8:	41700000 	.word	0x41700000
 800abbc:	3e700000 	.word	0x3e700000

0800abc0 <scalbn>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	4616      	mov	r6, r2
 800abc4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abc8:	4604      	mov	r4, r0
 800abca:	460d      	mov	r5, r1
 800abcc:	460b      	mov	r3, r1
 800abce:	b992      	cbnz	r2, 800abf6 <scalbn+0x36>
 800abd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abd4:	4303      	orrs	r3, r0
 800abd6:	d03c      	beq.n	800ac52 <scalbn+0x92>
 800abd8:	4b31      	ldr	r3, [pc, #196]	; (800aca0 <scalbn+0xe0>)
 800abda:	2200      	movs	r2, #0
 800abdc:	f7f5 fc7c 	bl	80004d8 <__aeabi_dmul>
 800abe0:	4b30      	ldr	r3, [pc, #192]	; (800aca4 <scalbn+0xe4>)
 800abe2:	4604      	mov	r4, r0
 800abe4:	429e      	cmp	r6, r3
 800abe6:	460d      	mov	r5, r1
 800abe8:	da0f      	bge.n	800ac0a <scalbn+0x4a>
 800abea:	a329      	add	r3, pc, #164	; (adr r3, 800ac90 <scalbn+0xd0>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	f7f5 fc72 	bl	80004d8 <__aeabi_dmul>
 800abf4:	e006      	b.n	800ac04 <scalbn+0x44>
 800abf6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800abfa:	42ba      	cmp	r2, r7
 800abfc:	d109      	bne.n	800ac12 <scalbn+0x52>
 800abfe:	4602      	mov	r2, r0
 800ac00:	f7f5 fab4 	bl	800016c <__adddf3>
 800ac04:	4604      	mov	r4, r0
 800ac06:	460d      	mov	r5, r1
 800ac08:	e023      	b.n	800ac52 <scalbn+0x92>
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac10:	3a36      	subs	r2, #54	; 0x36
 800ac12:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ac16:	428e      	cmp	r6, r1
 800ac18:	dd0e      	ble.n	800ac38 <scalbn+0x78>
 800ac1a:	a31f      	add	r3, pc, #124	; (adr r3, 800ac98 <scalbn+0xd8>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ac24:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ac28:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ac2c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ac30:	481d      	ldr	r0, [pc, #116]	; (800aca8 <scalbn+0xe8>)
 800ac32:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ac36:	e7db      	b.n	800abf0 <scalbn+0x30>
 800ac38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac3c:	4432      	add	r2, r6
 800ac3e:	428a      	cmp	r2, r1
 800ac40:	dceb      	bgt.n	800ac1a <scalbn+0x5a>
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	dd08      	ble.n	800ac58 <scalbn+0x98>
 800ac46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac4e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac58:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac5c:	da0c      	bge.n	800ac78 <scalbn+0xb8>
 800ac5e:	a30c      	add	r3, pc, #48	; (adr r3, 800ac90 <scalbn+0xd0>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ac68:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ac6c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ac70:	480e      	ldr	r0, [pc, #56]	; (800acac <scalbn+0xec>)
 800ac72:	f041 011f 	orr.w	r1, r1, #31
 800ac76:	e7bb      	b.n	800abf0 <scalbn+0x30>
 800ac78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac7c:	3236      	adds	r2, #54	; 0x36
 800ac7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac86:	4620      	mov	r0, r4
 800ac88:	4629      	mov	r1, r5
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4b08      	ldr	r3, [pc, #32]	; (800acb0 <scalbn+0xf0>)
 800ac8e:	e7af      	b.n	800abf0 <scalbn+0x30>
 800ac90:	c2f8f359 	.word	0xc2f8f359
 800ac94:	01a56e1f 	.word	0x01a56e1f
 800ac98:	8800759c 	.word	0x8800759c
 800ac9c:	7e37e43c 	.word	0x7e37e43c
 800aca0:	43500000 	.word	0x43500000
 800aca4:	ffff3cb0 	.word	0xffff3cb0
 800aca8:	8800759c 	.word	0x8800759c
 800acac:	c2f8f359 	.word	0xc2f8f359
 800acb0:	3c900000 	.word	0x3c900000
 800acb4:	00000000 	.word	0x00000000

0800acb8 <floor>:
 800acb8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800acc4:	2e13      	cmp	r6, #19
 800acc6:	460b      	mov	r3, r1
 800acc8:	4607      	mov	r7, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4605      	mov	r5, r0
 800acce:	dc32      	bgt.n	800ad36 <floor+0x7e>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	da14      	bge.n	800acfe <floor+0x46>
 800acd4:	a334      	add	r3, pc, #208	; (adr r3, 800ada8 <floor+0xf0>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fa47 	bl	800016c <__adddf3>
 800acde:	2200      	movs	r2, #0
 800ace0:	2300      	movs	r3, #0
 800ace2:	f7f5 fe89 	bl	80009f8 <__aeabi_dcmpgt>
 800ace6:	b138      	cbz	r0, 800acf8 <floor+0x40>
 800ace8:	2c00      	cmp	r4, #0
 800acea:	da56      	bge.n	800ad9a <floor+0xe2>
 800acec:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800acf0:	4325      	orrs	r5, r4
 800acf2:	d055      	beq.n	800ada0 <floor+0xe8>
 800acf4:	2500      	movs	r5, #0
 800acf6:	4c2e      	ldr	r4, [pc, #184]	; (800adb0 <floor+0xf8>)
 800acf8:	4623      	mov	r3, r4
 800acfa:	462f      	mov	r7, r5
 800acfc:	e025      	b.n	800ad4a <floor+0x92>
 800acfe:	4a2d      	ldr	r2, [pc, #180]	; (800adb4 <floor+0xfc>)
 800ad00:	fa42 f806 	asr.w	r8, r2, r6
 800ad04:	ea01 0208 	and.w	r2, r1, r8
 800ad08:	4302      	orrs	r2, r0
 800ad0a:	d01e      	beq.n	800ad4a <floor+0x92>
 800ad0c:	a326      	add	r3, pc, #152	; (adr r3, 800ada8 <floor+0xf0>)
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	f7f5 fa2b 	bl	800016c <__adddf3>
 800ad16:	2200      	movs	r2, #0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f7f5 fe6d 	bl	80009f8 <__aeabi_dcmpgt>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d0ea      	beq.n	800acf8 <floor+0x40>
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	bfbe      	ittt	lt
 800ad26:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad2a:	4133      	asrlt	r3, r6
 800ad2c:	18e4      	addlt	r4, r4, r3
 800ad2e:	2500      	movs	r5, #0
 800ad30:	ea24 0408 	bic.w	r4, r4, r8
 800ad34:	e7e0      	b.n	800acf8 <floor+0x40>
 800ad36:	2e33      	cmp	r6, #51	; 0x33
 800ad38:	dd0b      	ble.n	800ad52 <floor+0x9a>
 800ad3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad3e:	d104      	bne.n	800ad4a <floor+0x92>
 800ad40:	4602      	mov	r2, r0
 800ad42:	f7f5 fa13 	bl	800016c <__adddf3>
 800ad46:	4607      	mov	r7, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad52:	f04f 38ff 	mov.w	r8, #4294967295
 800ad56:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ad5a:	fa28 f802 	lsr.w	r8, r8, r2
 800ad5e:	ea10 0f08 	tst.w	r0, r8
 800ad62:	d0f2      	beq.n	800ad4a <floor+0x92>
 800ad64:	a310      	add	r3, pc, #64	; (adr r3, 800ada8 <floor+0xf0>)
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f7f5 f9ff 	bl	800016c <__adddf3>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2300      	movs	r3, #0
 800ad72:	f7f5 fe41 	bl	80009f8 <__aeabi_dcmpgt>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d0be      	beq.n	800acf8 <floor+0x40>
 800ad7a:	2c00      	cmp	r4, #0
 800ad7c:	da0a      	bge.n	800ad94 <floor+0xdc>
 800ad7e:	2e14      	cmp	r6, #20
 800ad80:	d101      	bne.n	800ad86 <floor+0xce>
 800ad82:	3401      	adds	r4, #1
 800ad84:	e006      	b.n	800ad94 <floor+0xdc>
 800ad86:	2301      	movs	r3, #1
 800ad88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad8c:	40b3      	lsls	r3, r6
 800ad8e:	441d      	add	r5, r3
 800ad90:	42af      	cmp	r7, r5
 800ad92:	d8f6      	bhi.n	800ad82 <floor+0xca>
 800ad94:	ea25 0508 	bic.w	r5, r5, r8
 800ad98:	e7ae      	b.n	800acf8 <floor+0x40>
 800ad9a:	2500      	movs	r5, #0
 800ad9c:	462c      	mov	r4, r5
 800ad9e:	e7ab      	b.n	800acf8 <floor+0x40>
 800ada0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ada4:	e7a8      	b.n	800acf8 <floor+0x40>
 800ada6:	bf00      	nop
 800ada8:	8800759c 	.word	0x8800759c
 800adac:	7e37e43c 	.word	0x7e37e43c
 800adb0:	bff00000 	.word	0xbff00000
 800adb4:	000fffff 	.word	0x000fffff

0800adb8 <_init>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	bf00      	nop
 800adbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adbe:	bc08      	pop	{r3}
 800adc0:	469e      	mov	lr, r3
 800adc2:	4770      	bx	lr

0800adc4 <_fini>:
 800adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc6:	bf00      	nop
 800adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adca:	bc08      	pop	{r3}
 800adcc:	469e      	mov	lr, r3
 800adce:	4770      	bx	lr
